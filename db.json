{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/error-page.png","path":"img/error-page.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/theme_images/archive_top_img.jpg","path":"theme_images/archive_top_img.jpg","modified":0,"renderable":0},{"_id":"source/theme_images/avatar.jpg","path":"theme_images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/theme_images/bg.jpg","path":"theme_images/bg.jpg","modified":0,"renderable":0},{"_id":"source/theme_images/default_top_img.jpg","path":"theme_images/default_top_img.jpg","modified":0,"renderable":0},{"_id":"source/theme_images/f.ico","path":"theme_images/f.ico","modified":0,"renderable":0},{"_id":"source/theme_images/footer.jpg","path":"theme_images/footer.jpg","modified":0,"renderable":0},{"_id":"source/theme_images/index_top_img.jpg","path":"theme_images/index_top_img.jpg","modified":0,"renderable":0},{"_id":"source/images/Event事件循环/cover.jpg","path":"images/Event事件循环/cover.jpg","modified":0,"renderable":0},{"_id":"source/images/compoents下组件自动注册/cover.jpg","path":"images/compoents下组件自动注册/cover.jpg","modified":0,"renderable":0},{"_id":"source/images/compoents下组件自动注册/vite_com.png","path":"images/compoents下组件自动注册/vite_com.png","modified":0,"renderable":0},{"_id":"source/images/compoents下组件自动注册/vue_com.png","path":"images/compoents下组件自动注册/vue_com.png","modified":0,"renderable":0},{"_id":"source/images/get-post入参格式/bodyData.png","path":"images/get-post入参格式/bodyData.png","modified":0,"renderable":0},{"_id":"source/images/get-post入参格式/cover.jpg","path":"images/get-post入参格式/cover.jpg","modified":0,"renderable":0},{"_id":"source/images/get-post入参格式/formdata2.png","path":"images/get-post入参格式/formdata2.png","modified":0,"renderable":0},{"_id":"source/images/get-post入参格式/formdata1.png","path":"images/get-post入参格式/formdata1.png","modified":0,"renderable":0},{"_id":"source/images/get-post入参格式/formdata3.png","path":"images/get-post入参格式/formdata3.png","modified":0,"renderable":0},{"_id":"source/images/get-post入参格式/get.png","path":"images/get-post入参格式/get.png","modified":0,"renderable":0},{"_id":"source/images/get-post入参格式/json1.png","path":"images/get-post入参格式/json1.png","modified":0,"renderable":0},{"_id":"source/images/get-post入参格式/json2.png","path":"images/get-post入参格式/json2.png","modified":0,"renderable":0},{"_id":"source/images/get-post入参格式/json3.png","path":"images/get-post入参格式/json3.png","modified":0,"renderable":0},{"_id":"source/images/get-post入参格式/params.png","path":"images/get-post入参格式/params.png","modified":0,"renderable":0},{"_id":"source/images/get-post入参格式/urlencoded1.png","path":"images/get-post入参格式/urlencoded1.png","modified":0,"renderable":0},{"_id":"source/images/get-post入参格式/urlencoded2.png","path":"images/get-post入参格式/urlencoded2.png","modified":0,"renderable":0},{"_id":"source/images/get-post入参格式/urlencoded3.png","path":"images/get-post入参格式/urlencoded3.png","modified":0,"renderable":0},{"_id":"source/images/git远程项目迁移/cover.jpg","path":"images/git远程项目迁移/cover.jpg","modified":0,"renderable":0},{"_id":"source/images/nvm管理node/cover.jpg","path":"images/nvm管理node/cover.jpg","modified":0,"renderable":0},{"_id":"source/images/nvm管理node/node.png","path":"images/nvm管理node/node.png","modified":0,"renderable":0},{"_id":"source/images/nvm管理node/nvms1.png","path":"images/nvm管理node/nvms1.png","modified":0,"renderable":0},{"_id":"source/images/nvm管理node/nvms2.png","path":"images/nvm管理node/nvms2.png","modified":0,"renderable":0},{"_id":"source/images/nvm管理node/nvms3.png","path":"images/nvm管理node/nvms3.png","modified":0,"renderable":0},{"_id":"source/images/nvm管理node/path1.png","path":"images/nvm管理node/path1.png","modified":0,"renderable":0},{"_id":"source/images/nvm管理node/path2.png","path":"images/nvm管理node/path2.png","modified":0,"renderable":0},{"_id":"source/images/setTimeout与闭包/cover.jpg","path":"images/setTimeout与闭包/cover.jpg","modified":0,"renderable":0},{"_id":"source/images/接入Google地图/cover.jpg","path":"images/接入Google地图/cover.jpg","modified":0,"renderable":0},{"_id":"source/images/接入Google地图/latlng.png","path":"images/接入Google地图/latlng.png","modified":0,"renderable":0},{"_id":"source/images/接入Google地图/maps.png","path":"images/接入Google地图/maps.png","modified":0,"renderable":0},{"_id":"source/images/搭建个人博客/cover.jpg","path":"images/搭建个人博客/cover.jpg","modified":0,"renderable":0},{"_id":"source/images/搭建个人博客/firstBlog.png","path":"images/搭建个人博客/firstBlog.png","modified":0,"renderable":0},{"_id":"source/images/搭建个人博客/gitRuning.png","path":"images/搭建个人博客/gitRuning.png","modified":0,"renderable":0},{"_id":"source/images/搭建个人博客/gitRuning0.png","path":"images/搭建个人博客/gitRuning0.png","modified":0,"renderable":0},{"_id":"source/images/搭建个人博客/gitlab-ci-yml.png","path":"images/搭建个人博客/gitlab-ci-yml.png","modified":0,"renderable":0},{"_id":"source/images/搭建个人博客/hexo_init.png","path":"images/搭建个人博客/hexo_init.png","modified":0,"renderable":0},{"_id":"source/images/搭建个人博客/hexo_themes.png","path":"images/搭建个人博客/hexo_themes.png","modified":0,"renderable":0},{"_id":"source/images/微信小程序实战/准备工作/accountManage.png","path":"images/微信小程序实战/准备工作/accountManage.png","modified":0,"renderable":0},{"_id":"source/images/微信小程序实战/准备工作/confirmInfo.png","path":"images/微信小程序实战/准备工作/confirmInfo.png","modified":0,"renderable":0},{"_id":"source/images/微信小程序实战/准备工作/cover.jpg","path":"images/微信小程序实战/准备工作/cover.jpg","modified":0,"renderable":0},{"_id":"source/images/微信小程序实战/准备工作/createProject0.png","path":"images/微信小程序实战/准备工作/createProject0.png","modified":0,"renderable":0},{"_id":"source/images/微信小程序实战/准备工作/createProject1.png","path":"images/微信小程序实战/准备工作/createProject1.png","modified":0,"renderable":0},{"_id":"source/images/微信小程序实战/准备工作/createProject2.png","path":"images/微信小程序实战/准备工作/createProject2.png","modified":0,"renderable":0},{"_id":"source/images/微信小程序实战/准备工作/infoRecord.png","path":"images/微信小程序实战/准备工作/infoRecord.png","modified":0,"renderable":0},{"_id":"source/images/微信小程序实战/准备工作/preview.png","path":"images/微信小程序实战/准备工作/preview.png","modified":0,"renderable":0},{"_id":"source/images/微信小程序实战/准备工作/registerAccount.png","path":"images/微信小程序实战/准备工作/registerAccount.png","modified":0,"renderable":0},{"_id":"source/images/微信小程序实战/准备工作/release.png","path":"images/微信小程序实战/准备工作/release.png","modified":0,"renderable":0},{"_id":"source/images/微信小程序实战/准备工作/updateVersion.png","path":"images/微信小程序实战/准备工作/updateVersion.png","modified":0,"renderable":0},{"_id":"source/images/微信小程序实战/准备工作/updateVersion2.png","path":"images/微信小程序实战/准备工作/updateVersion2.png","modified":0,"renderable":0},{"_id":"source/images/微信小程序实战/准备工作/uploadcode.png","path":"images/微信小程序实战/准备工作/uploadcode.png","modified":0,"renderable":0},{"_id":"source/images/微信小程序实战/准备工作/wxgzpt.png","path":"images/微信小程序实战/准备工作/wxgzpt.png","modified":0,"renderable":0},{"_id":"source/images/微信小程序实战/准备工作/wxtool.png","path":"images/微信小程序实战/准备工作/wxtool.png","modified":0,"renderable":0},{"_id":"source/images/微信小程序实战/准备工作/wxtooldowload.png","path":"images/微信小程序实战/准备工作/wxtooldowload.png","modified":0,"renderable":0},{"_id":"source/images/微信小程序实战/准备工作/wxtoolexe.png","path":"images/微信小程序实战/准备工作/wxtoolexe.png","modified":0,"renderable":0},{"_id":"source/images/微信小程序实战/准备工作/wxtoolexeinstall.png","path":"images/微信小程序实战/准备工作/wxtoolexeinstall.png","modified":0,"renderable":0},{"_id":"source/images/微信小程序实战/准备工作/wxtype4.png","path":"images/微信小程序实战/准备工作/wxtype4.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_data/link.yml","hash":"67d1f1fd07008129efdff968a7631b7a5d4eaaa3","modified":1753762302816},{"_id":"source/_posts/2025-07-11-git远程项目迁移.md","hash":"335543eb2b9efe6171ec38d573c1c2aa22283241","modified":1753673899543},{"_id":"source/_posts/2025-07-14-forEach不能直接支持异步等待.md","hash":"e05b63b2334b96ced2f19439140459965d3e0436","modified":1753684650874},{"_id":"source/_posts/2025-07-14-nvm管理node.md","hash":"7bd74c61f05f115d39f323033a9a838266f38978","modified":1753955975012},{"_id":"source/_posts/2025-07-11-我的第一篇博客.md","hash":"e9b78c3e89b46e86dbd777120f648b11fe2bc64a","modified":1753254888532},{"_id":"source/_posts/2025-07-16-get-post入参格式.md","hash":"8864b69e36d119413597ab1adc8682542d921e11","modified":1753955975014},{"_id":"source/_posts/2025-07-23-js判断数据类型.md","hash":"19648e3194cbfb1dd42aaec52f0599c7eaeb218f","modified":1753325661104},{"_id":"source/_posts/2025-07-23-搭建个人博客.md","hash":"15e6fa996c40028d96b8e3b50a3d9fc95f665be9","modified":1753955975014},{"_id":"source/_posts/2025-07-24-compoents下组件自动注册.md","hash":"1a54abf0cc2fe6d6fe571302891b8b0f415a0f89","modified":1753955975014},{"_id":"source/_posts/2025-07-28-setTimeout与闭包.md","hash":"d3a3a9648b9324908d2746aa08443299be21b641","modified":1753687325400},{"_id":"source/_posts/2025-07-29-Event事件循环.md","hash":"dd92c4a0ebe661c9bf0475fad6a242cd63cf2c4b","modified":1753759035222},{"_id":"source/_posts/2025-07-30-接入Google地图.md","hash":"4aacf6f25bc34e2f812066c89620d07829f5a929","modified":1753955975014},{"_id":"source/_posts/2025-07-31-【微信小程序实战】之准备工作详解.md","hash":"37159681f022c6a1e38c11cc03c52dd693045eeb","modified":1754020914063},{"_id":"source/about/index.md","hash":"ea558914a82f9f6d439210e0f4016bd2c7cd3640","modified":1753754385171},{"_id":"source/categories/index.md","hash":"8b5458c809b4fda5621e649eb50848ce733f6c4f","modified":1753754472930},{"_id":"source/css/custom.css","hash":"ee8dfda661cc8cb5734eaa684ca1bfead8f8df5a","modified":1754018592556},{"_id":"source/link/index.md","hash":"27b9251d465dcc30df28f43bfa8377432e7a4b68","modified":1753761953208},{"_id":"source/theme_images/archive_top_img.jpg","hash":"95d5f11cc991be77a59aca0a01a67e989e1b7413","modified":1753323319157},{"_id":"source/tags/index.md","hash":"b09822c2531635b463b5fcaed2fc41597dc00a56","modified":1753754476919},{"_id":"source/images/Event事件循环/cover.jpg","hash":"c40de14fe01eff147bb88bdd7e59ee417d286c38","modified":1753676640941},{"_id":"source/images/compoents下组件自动注册/vite_com.png","hash":"0bfb6a7eb3bc08d5c23bf2be40ddd4f2274275a6","modified":1753340543573},{"_id":"source/images/get-post入参格式/cover.jpg","hash":"db5b4b65aa21b94b17221a0cbe39e6eeacb866f0","modified":1753684650876},{"_id":"source/images/nvm管理node/path1.png","hash":"370c3f1e2b766325349a380eb0a86982d639e710","modified":1752740113446},{"_id":"source/images/setTimeout与闭包/cover.jpg","hash":"e07386cca1c57d264b72238ab93efe831d212f3b","modified":1753673188298},{"_id":"source/images/接入Google地图/cover.jpg","hash":"c684bcdf54625e3cafa39f0154238604fcc69b03","modified":1753845595719},{"_id":"source/images/搭建个人博客/cover.jpg","hash":"ad51e1244168f82abf7dbb9a54d15b3a6217abf9","modified":1670416535069},{"_id":"source/images/搭建个人博客/gitlab-ci-yml.png","hash":"846233b88f3ea5e836a20d58fdfa7c8eb83f3763","modified":1753252376055},{"_id":"source/images/微信小程序实战/准备工作/cover.jpg","hash":"7a1f15b314cc9998b338de9aa035cd33036647ea","modified":1753948413237},{"_id":"source/images/微信小程序实战/准备工作/wxtoolexeinstall.png","hash":"1c59bdf99db0e6785a01a0689e8a35a6ecb63846","modified":1753943021851},{"_id":"source/theme_images/avatar.jpg","hash":"0d1ad2b6763489ffba0ce86c10ca3c94eef4051a","modified":1753265945561},{"_id":"source/theme_images/index_top_img.jpg","hash":"fd37dfb1269e1c7f771c5f7b203194b88be218bd","modified":1753264101655},{"_id":"source/images/git远程项目迁移/cover.jpg","hash":"a27322ef944313c5f1b43c745b4166747c607a94","modified":1753341978643},{"_id":"source/theme_images/f.ico","hash":"fdc2c6f9a8a07f9f5f1e009ba389f9436c2f1081","modified":1753266722997},{"_id":"source/theme_images/footer.jpg","hash":"fe19b156f7575fa85f57e2e5504f28a1ed0d332b","modified":1753264208305},{"_id":"source/images/compoents下组件自动注册/cover.jpg","hash":"aa625942db12ad7881670cfda51e76b6aa1178e6","modified":1753342186612},{"_id":"source/images/nvm管理node/cover.jpg","hash":"2270e49eb94f05b86c18fa8055bf0fce4d315399","modified":1753259513213},{"_id":"source/theme_images/default_top_img.jpg","hash":"6d086040d7b10582e2995729e765b4e8f63cc4da","modified":1746694831829},{"_id":"source/images/compoents下组件自动注册/vue_com.png","hash":"6b3ab66352d03d06f5c91aeb155ca5b894f94b20","modified":1753340588693},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"a394861e4dd3c8ac366be62af0f4ad752f921ef3","modified":1752828272705},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"e1b9096ae0c4e5ef0a911aec05dbad4a3aae3173","modified":1752828272707},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1752828272656},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"92e45255b8725f0a00450c88fcfd51ec61e1db67","modified":1752828272706},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"e7e2aebec046dbeb5c8bddc9c3533a1c1f06b1ae","modified":1752828272837},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"97a55ae0f4784ca80c7862da36da22b54be41ae5","modified":1752828272843},{"_id":"node_modules/hexo-theme-butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1752828272842},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"2e3beaf7fb585d83c3e7cd1cca51573f42935f3c","modified":1752828272839},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"2e3beaf7fb585d83c3e7cd1cca51573f42935f3c","modified":1752828272840},{"_id":"node_modules/hexo-theme-butterfly/languages/ja.yml","hash":"bde04a89febd0dbf320eac4da4ecd81624f2f29f","modified":1752828272842},{"_id":"node_modules/hexo-theme-butterfly/languages/ko.yml","hash":"70d6df7cf6472799faf4778405b332101ea822c1","modified":1752828272843},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"3cdeb46ad36f3b76703b4f39c72a8aa1a15425cb","modified":1752828272848},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-HK.yml","hash":"c93e510c7b119173226f3b0afb87c5f553f6eea8","modified":1752828272849},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"b59fedd9e1e65112d6a90dc7f55179085d0f1a6a","modified":1752828272849},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1752828272727},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"a7e9805a781e34e38d27462e6ce2a5821c34bb9f","modified":1752828272742},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"a93004cc8ec8050df603d32a6e6e02cd96fd9875","modified":1752828272764},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"65c4a49c65c3fc4d9dc88b9791a75710c698c3a1","modified":1752828272776},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"ca5333bd262cb58c195c844b593a0eed0c721766","modified":1752828272787},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"10ce05c8dbde09f53bdabe40b5388de9ccc71a31","modified":1752828272838},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"7ce2a49c6c41847de4ccea377ade116339984434","modified":1752828272774},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1752828272838},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1752828272841},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"e1611a30df80cbe7ecf60be2e0cdd816ecabdd03","modified":1752828272722},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"d30413aa2a17bf31e4084f1096523ead7f2a6bf1","modified":1752828272753},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"1d11e334b22dbbedcb0f751f9ee9789d4416605e","modified":1752828272756},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1752828272846},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"e5e6c05a621483b3542f2884e8ba45e84b1e973a","modified":1752828272767},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"062137cb4d078b27680da1ae28d524a9c963eebc","modified":1752828272774},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"3617840416f26078117f760579fb544dce07e1bc","modified":1752828272782},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"3e65b7bf6bccccbba7e15349f0a44f15c64c5b5e","modified":1752828272785},{"_id":"node_modules/hexo-theme-butterfly/scripts/common/postDesc.js","hash":"ba98361b9d469076bfb045e5ff42eaf764a38fb1","modified":1752828272692},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"039fc75f363d79669b0b2177d929cdff6f2ef7a4","modified":1752828272668},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"7b1b16e1e8e08245a345764616956be50487eb53","modified":1752828272675},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1752828272673},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1752828272680},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/merge_config.js","hash":"cead7891fbc0a53ffca4d68124e68efa855354a5","modified":1752828272688},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"bac639c404588ea62e601ef0bcd368c3bd0119af","modified":1752828272700},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1752828272705},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"b23108d29fff3e32384d8689c8bcd2ab306a1ae7","modified":1752828272691},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"20a6ebf63439501a4b3fc81e7a2a2ea5d103bace","modified":1752828272694},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"d2878483c160999240e969a34e3ddc51a780821b","modified":1752828272671},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"0cdf781a8c14d7b50d309e69f282ec7b178804bb","modified":1752828272672},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/getArchiveLength.js","hash":"bf77635e920eaf52bceebc95f87c7c87a7ca8038","modified":1752828272677},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"00c5742ad1c75b3c5684d02ffc6a1921399e5376","modified":1752828272682},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"b9af69d8998d748178348d93a19daccff0550c56","modified":1752828272690},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"950b7d0966429bf0f9e6c5e1161e50e545e320b4","modified":1752828272695},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/series.js","hash":"45367c4ce827329867dbcc750ec125da9ccb2cfd","modified":1752828272696},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"2f44e1b3ccd170b256eae178299d6fa933a8d490","modified":1752828272673},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/chartjs.js","hash":"195ba802d7e8406c155124a9c939a2318f82938b","modified":1752828272674},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"25eefe10189caf3910a0e5d5b2f2043ae9255531","modified":1752828272676},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"fa3d0a64f7fce4aff7928d4ddd95548978ba001c","modified":1752828272676},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"f02fb085a88a2c0c82aeffacc24e1b71c74bd7c0","modified":1752828272679},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"89c6c78d2db43b190055d5690741a79bab4f3e7e","modified":1752828272682},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1752828272690},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"cf0bc17d0180231167cc6aa8a00fc64f198cb9f9","modified":1752828272683},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"50d8d8fac5c5b6e26317028895d7d82a2cf46606","modified":1752828272689},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"f589fb6646bd17cf12d77a9b251dd614e1c8b899","modified":1752828272696},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/series.js","hash":"40bc9a065e3a1423e0e66f4911e00713ca9f5e9e","modified":1752828272697},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"3c486b149e28edd1a06843f05a5c355000991b82","modified":1752828272701},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"176804f07567aa80f1ed95897a968a996b155dec","modified":1752828272702},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1752828272821},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"d1eec577074ab7b262182885576135bf1896e12c","modified":1752828272835},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1752828272667},{"_id":"node_modules/hexo-theme-butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1752828272718},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1752828272665},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1752828272660},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"fdb5482d04a75bd79946ad1ed291d281d0e9362d","modified":1752828272703},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"5a52047b8520f79864d5a4ee2379a29751aead23","modified":1752828272686},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"b2ed9937fd00459c0e569db709a26cf8738ab18d","modified":1752828272704},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"e93a36d3c29b5a02c7f26a23f96e1f84b063cbe8","modified":1752828272772},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"c2156c77a011b20fafd34f03ca073397c21b099f","modified":1752828272726},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"9ea75b06f19bf356f340f4a3fc1bdc0713cfe445","modified":1752828272746},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"56a3c32de1a15627ff38c67f1131cdd6ec5ac924","modified":1752828272745},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1752828272756},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"1e1a69aa2cbda2e621c741b3802093244b3cc04e","modified":1752828272776},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"83ed05ef1e39f2ee70c3fba2cf96e488d8ffec66","modified":1752828272778},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1752828272785},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/structured_data.pug","hash":"8ef72cd688999bf3915be6724c12700a1e2724d9","modified":1752828272786},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"733184f88e3a586a5fcc9d193ad500556b6c8eed","modified":1752828272770},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"44331c9db74b281b5c5c41439d3407a9076df1a1","modified":1752828272757},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"f478a82ba4c15d4f6a5db38eca5c61f7054fa71d","modified":1752828272772},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"7d799c4694adb6e265e3f4b975d7f7f6a7021a17","modified":1752828272776},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"e2d31e0f450ad42c47f7ee96375799342bf2f19b","modified":1752828272786},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"d76ce71ba106e350670c021a3dcae57547d01830","modified":1752828272757},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"a2f7d69ca7ec58f24fe7d4e04ae21d5b62b01567","modified":1752828272754},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"9d2d539555bab495959b9df734ed5c43a9f9e5a9","modified":1752828272773},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"ef7afe0df7a3746744ac8185da7163b7406120ca","modified":1752828272734},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/indexPostUI.pug","hash":"f3389fa9ae4fa32e3c16573286583bc3023e57ad","modified":1752828272765},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/404.pug","hash":"15d32c511e4875066fcbe9cb84c3ada07b5a7c41","modified":1752828272720},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"efb40388e37cca0b5e7c3c66e811a42f8d32c910","modified":1752828272747},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"6b0fa5f048aca8e9cbe56978301af918cf7ac34a","modified":1752828272752},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/shuoshuo.pug","hash":"b2423cfc57a5e3a0e1112ff7c18d5c5c720d89d5","modified":1752828272784},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"79ad31eb72a9e14007770b18a426406a25315b38","modified":1752828272787},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1752828272741},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/outdate-notice.pug","hash":"b7ce9484bc5c97ea6154f0b78fb9b8951fafedbd","modified":1752828272773},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"db92f25ff3fd061882f81bf74ca560ff66983a0c","modified":1752828272781},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"b96c232e5178d927987791d9ae386dd83679535a","modified":1752828272775},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"ed79fef5b5025415ea12eaed970f3fe7f6ef9596","modified":1752828272727},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1752828272751},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"88f979a0b1a19eeb0db229247833bf9c6865c3b9","modified":1752828272778},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"d29ee6a07e6716c0dc1d4533c87b19b6076fefd3","modified":1752828272775},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"236c3ce26dd76e80b04d457789475c42da5ac0c8","modified":1752828272787},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/umami_analytics.pug","hash":"bc35a1552d26ecdeeadbf06300078dbb5128a6e5","modified":1752828272791},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1752828272735},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1752828272735},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1752828272735},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"1aba8aa7cd767dc96879d13a13b4c8ceb9023233","modified":1752828272736},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1752828272737},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1752828272844},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1752828272738},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"d8753772889b5d0f4d15639ed6af5e91e53b1d03","modified":1752828272738},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1752828272739},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"1dd19a564320d248dbcee7f118a5b96c6466da65","modified":1752828272739},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1752828272739},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1752828272740},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1752828272740},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"fcddd80cdeb6aa81f342cd9f0102302f6ba087a8","modified":1752828272741},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"45f620cd87b9ef2aa9d1e024e697ed6b4eecff34","modified":1752828272763},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"d12340a7df4601b9a23f070e16645861aeb3bb0a","modified":1752828272813},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"67062d597408068e4a59e95851e98fed34b745da","modified":1752828272818},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"4fcb8222b9548e22f7b76f12d33e3698240cbae0","modified":1752828272819},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"a51edfd3e499e7d38c32241c40e8e4d371efca73","modified":1752828272833},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"ba174889e770ae9f6683379b9eae9d8c94253080","modified":1752828272803},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"4cc02bcbaa4a1933a82a9ea57a603fe2d059fc77","modified":1752828272804},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1752828272805},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"5692bcf8929f7ef12b10d860da6cb90ca55752c0","modified":1752828272810},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"7536c44e78115559a996d0384adec38b78d8dc25","modified":1752828272814},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1752828272823},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"7d7554573c005399bc8c2264a85896d2d51be1e1","modified":1752828272825},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"543eaf9c7df7e0db841e5946ee5f9082c3c46290","modified":1752828272826},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"d9cdf564a822a585e67fd5bac8573ba87eeb3743","modified":1752828272828},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"ef8e8549fe7ad4b99793844a93b4a89f77f417d5","modified":1752828272827},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"a0f5835f04358122e8b1d38dd3e8da09a1b5b431","modified":1752828272829},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"084dc4dfb41f55e237a9d6cf8c2f5dba729b83be","modified":1752828272831},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"4c9849df9c68d892c7df0ca28123aeb0dc9dc424","modified":1752828272806},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"0af7c8754f04bdd9a02a14d880774753bd2e35ee","modified":1752828272834},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"ad66212554468b7067590308ed4cf40524fea662","modified":1752828272826},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"205ccc7d0ec6ce1193b46bc0c9ce0385594581fb","modified":1752828272799},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"5abe5480d83ff8b452a780a484d50a44091475bf","modified":1752828272801},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"c4cda7b0c99015df29ce00fdfddd2f7679653754","modified":1752828272804},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"dcff804c4c237e1e908481b44c1ac4e39ac0da34","modified":1752828272805},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"1f8d715faf3b91b53426e38195c0920afb3bfa1c","modified":1752828272809},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"fc26e980fedde31644ebf878967f66ef9ba32be2","modified":1752828272818},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/shuoshuo.styl","hash":"79bb1d9a27822ed5675d1e52f5dbd0e2f5d5010a","modified":1752828272831},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"7543bb688876a946538d66b991c71b94b5216277","modified":1752828272833},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"6c4cbdadd9a49029fe0c59e29808d873e5b6b6ee","modified":1752828272820},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"d8a8275a68a1421c4c09b604cf78bea16c1d0463","modified":1752828272800},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"1f2b86df86df81c3a59377b29102314ffc73dfa6","modified":1752828272823},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"de8437a058a315d14d7e7034066f095b7b3ed4b4","modified":1752828272803},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"30d1f809efd252ed0233d96d4374efd2b01d2292","modified":1752828272814},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"3be8d0a75e7cc96548667cae0cb6a474279bd0b5","modified":1752828272821},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"d27dbccaf3de1c9158d19e4fd49a25953cb5778d","modified":1752828272816},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"216f52fefc2274b542b549d8470503e6f1a308fb","modified":1752828272822},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1752828272815},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/series.styl","hash":"0657169849bc4bf4d93b5492ade040c8f58c1901","modified":1752828272830},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"3a88eedcb694da79e92581ce50cb1a430b1fb615","modified":1752828272832},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1752828272824},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"e846ddaef494d46cdfa2379deacfe74fa1cc5264","modified":1752828272834},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1752828272657},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"7119f2f2943de71999d3dd6ba5c60cde846f114b","modified":1752828272670},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"a2b783230a9143de69004cfc914d9f55e6fc1660","modified":1752828272684},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f0a90d8e39915a74b16ef22e851f179415cd7eaa","modified":1752828272758},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"7df4d27cf9e576c6b9c1e4f76a100a41749ca8bb","modified":1752828272721},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1752828272728},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1752828272749},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"cbfbcf34a24d21ba2b21cf9eedb76f4c3c563c5a","modified":1752828272752},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1752828272758},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1752828272779},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"be45b522286bbc64724341f23a5056ad24d3f796","modified":1752828272789},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"7884883ec15792f7e54daacb3c62b851dde2b66a","modified":1752828272793},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1752828272796},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5b29badecbbe828112c001156023fc0566045cf6","modified":1752828272743},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"24d094fd917947c0ca7492fa094328b1a183b873","modified":1752828272747},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"e8438941085def0591a72fc9b0d705dbf107f54f","modified":1752828272759},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"62466b251052cae609b6369d4cb4b6a85320757d","modified":1752828272788},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"89c63a5f0c0ab6314de7158fbc8fcbc84997fc55","modified":1752828272730},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f2ea5249b3e6670f6c8c77868f4f42c502e43830","modified":1752828272749},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"c81fa7d8a5cb96d1ae07bfa8c46b84a58161add1","modified":1752828272750},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"592b2251db6c1abeb8b0eebe3b2e6d9aa0dec445","modified":1752828272754},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"8af585e6d6f73ee57114eefad574dc6e8ea9f570","modified":1752828272751},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"58914c58a190e3bc0aa37cb581e77e442b563501","modified":1752828272755},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"332b532bafbaf369fde840883b77e5a23d050a39","modified":1752828272759},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"9d84a681289175dec75a85f301d2fc9ce1b2bb7a","modified":1752828272768},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1752828272766},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"ea9766439b6b1936306916a8b08d2681afbc8ea9","modified":1752828272780},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"53d99831f29aeb2e336ed1407d79590041f77002","modified":1752828272791},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"30a7d157890de69deab28baa47fb7bb28b040efd","modified":1752828272792},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"24f18b0c67803210d53abbf9c1d454c000b06eee","modified":1752828272793},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"e2bf15357485cd502414b3b20f5b1f762a2fd014","modified":1752828272797},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/chartjs.pug","hash":"732eb1118ea1a73aa5c164d639097c614f8e9953","modified":1752828272742},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"af66d13204030d47537b9e31a6173e63589ce7ff","modified":1752828272760},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"b83db9fa64d42a0bfd97efb660e09be3f166a144","modified":1752828272766},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"db2f4fff80a1166476ea76ae004aa186df11bad3","modified":1752828272769},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"ca2fc5928ca292f29fd8333c73733344994096fb","modified":1752828272771},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"187302dbc916852ff2fdf47061e272c061611dda","modified":1752828272731},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"27fa75affebc6e84a487c62bceff783bde595256","modified":1752828272744},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"fa4b4194749d05f7249f365f2b89c0281057ce54","modified":1752828272748},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"72e2970b23570e308f8af5d8ba8e5e3321d01bbf","modified":1752828272755},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"a7c07dbc1e970a5b247091458e1ee9b144a3366d","modified":1752828272760},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"34edfebf0cace0852806be774910ccb0e0914650","modified":1752828272781},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"d2e12a9fc302a4efe52c90d44896fbd73e193a1f","modified":1752828272789},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d376ec17fb19fcdcf0d2ad71330190146d3af879","modified":1752828272794},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ec6c685080634ac46ffbea1b8f10313388888f43","modified":1752828272797},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"7f0ede1cd3fed2669c94a8e1b21bc0b183f310b8","modified":1752828272724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"013756ff3363344987cc00fc9bd833baf193c341","modified":1752828272750},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"f8557548d2ad8dd149c562193991c6c6cda02415","modified":1752828272761},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"2622b4cf9189fa23e4a422aaf9ef272e4f2c6137","modified":1752828272768},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"f5ee1c9c8ffa4bca972d30f4de69268b8d47f052","modified":1752828272723},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"e51e896ccb13900de38dc81cf44dc789e2418a12","modified":1752828272762},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"efef352c1d122409575386bf3894dce8e87032e2","modified":1752828272783},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"9f02598b5e4296aec6470639d4bac4c9ac46392e","modified":1752828272808},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"ef52ebf1e8e751a412f9456fdaeee7d88afd9a72","modified":1752828272819},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"077ec530831be1d80e93da380406b9f5abd0918a","modified":1752828272809},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"1883c91d43bff10aae55122a21e0b064b6f5c9dd","modified":1752828272820},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"de4bb5fc2dfca368b35e4c1109c92f7abc9e2245","modified":1752828272822},{"_id":"source/images/nvm管理node/nvms2.png","hash":"caa851110bc539dc8ffb7a3543e80f600d4ba8ba","modified":1752740113444},{"_id":"node_modules/hexo-theme-butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1752828272716},{"_id":"source/images/nvm管理node/path2.png","hash":"1fac019c4c8dfa26f0c9709f151f169d93ce9809","modified":1752740113447},{"_id":"source/images/nvm管理node/nvms1.png","hash":"f169117474fb7cd1e4d920463de12d422c2b8515","modified":1752740113442},{"_id":"source/images/nvm管理node/nvms3.png","hash":"0c73472eb0c85930408c73c5d54ad9de26137a6a","modified":1752740113445},{"_id":"source/images/微信小程序实战/准备工作/wxtoolexe.png","hash":"8e3599ef7b7a39a1962667cd5eb0af2b54c7857e","modified":1753943568000},{"_id":"source/images/get-post入参格式/formdata2.png","hash":"4b81f95c2973b0eee32a64b326457941728b0913","modified":1752740113406},{"_id":"source/images/get-post入参格式/json3.png","hash":"a12672497f18d3c885ec49b138baf7a634a67835","modified":1752740113422},{"_id":"source/images/微信小程序实战/准备工作/confirmInfo.png","hash":"e7301fa91592bf32d36efc57093a1dbff0ada1f5","modified":1753934565092},{"_id":"source/images/get-post入参格式/json2.png","hash":"28a202124a408fda87884e3e7d86d04b633cf486","modified":1752740113419},{"_id":"source/images/nvm管理node/node.png","hash":"39591bfcd56fce198d8869950ef82d12059e73a1","modified":1752740113439},{"_id":"source/images/get-post入参格式/get.png","hash":"e80e11cf83ec2d0fd3272a675fd08f80cfae09f7","modified":1752740113413},{"_id":"source/images/get-post入参格式/urlencoded2.png","hash":"d84defda37236e452b69f0a37f12597b8bb205cc","modified":1752740113432},{"_id":"source/images/微信小程序实战/准备工作/updateVersion2.png","hash":"07219e3467808a78bfddb38971afac4fba879292","modified":1753947150008},{"_id":"source/images/微信小程序实战/准备工作/wxtype4.png","hash":"2fe853d008df517502167b0ab109045d6d8f14f1","modified":1753932035514},{"_id":"source/images/微信小程序实战/准备工作/uploadcode.png","hash":"2371f1be95e93a9222d0b09be2b88c3b1364a0f7","modified":1753947072447},{"_id":"source/images/微信小程序实战/准备工作/createProject0.png","hash":"38700902a8c1affdd4d437fd3077b1bd76e70910","modified":1753945794790},{"_id":"source/images/get-post入参格式/bodyData.png","hash":"9b2d1fb6ab98fbd838f92bd80f5a0881272461d1","modified":1752740113399},{"_id":"source/images/get-post入参格式/params.png","hash":"a5f99846ed6b97f347a3d3a06235a9c2c40d2bc2","modified":1752740113425},{"_id":"source/images/get-post入参格式/urlencoded3.png","hash":"39bde66360fd7ea74188183282d1ef101b851a55","modified":1752740113435},{"_id":"source/images/get-post入参格式/formdata1.png","hash":"3a13289c4f5fdd3201be8a958b38a504c2882695","modified":1752740113403},{"_id":"source/images/搭建个人博客/firstBlog.png","hash":"adfc30470aba2d295e495ea1dff37f2059c203ad","modified":1753253142482},{"_id":"source/images/微信小程序实战/准备工作/wxtool.png","hash":"97f955bfd2cd562e88e8a297ae40f887e270b9ec","modified":1753944776275},{"_id":"source/images/get-post入参格式/json1.png","hash":"548c6dd7378c72106e381f4c43c33f5da5831ff8","modified":1752740113417},{"_id":"source/images/get-post入参格式/urlencoded1.png","hash":"394c63d5666b1361998254a248ab155ad7fdaf84","modified":1752740113429},{"_id":"source/images/get-post入参格式/formdata3.png","hash":"5fac213bafaf2106eb4d007c8295b1cee5e91f29","modified":1752740113410},{"_id":"source/images/接入Google地图/latlng.png","hash":"f321e5d88ea40854945d0cb2988c823e6fa63223","modified":1753843390922},{"_id":"source/images/微信小程序实战/准备工作/registerAccount.png","hash":"c92443abcb27369a9e4a48147513e0c152bc31b2","modified":1753934229929},{"_id":"source/images/微信小程序实战/准备工作/preview.png","hash":"8ea320a3ed28fdd1f57ee42a0febf0a25a168c45","modified":1753946358368},{"_id":"source/images/微信小程序实战/准备工作/createProject1.png","hash":"f4297ca4f7011d0b2ea0e6b47bfca828ac88ae4e","modified":1753945597008},{"_id":"source/images/微信小程序实战/准备工作/infoRecord.png","hash":"20c92036e822d8ea0ed6455a9d16b1f561c2866d","modified":1753934415787},{"_id":"source/images/搭建个人博客/gitRuning0.png","hash":"7f84efd204b134fa637d4132482fd7e963bb19ff","modified":1753253630006},{"_id":"source/images/微信小程序实战/准备工作/wxgzpt.png","hash":"fe300d0aeacaddb9320d88637cfd89337e422afe","modified":1753931997174},{"_id":"source/images/搭建个人博客/gitRuning.png","hash":"f58073d7ebc5ae2b336e826ac02c860d0fe03231","modified":1753253433023},{"_id":"source/images/微信小程序实战/准备工作/wxtooldowload.png","hash":"12bb85399c0186a01f5676cdcf2d222e249ee919","modified":1753935915722},{"_id":"source/images/接入Google地图/maps.png","hash":"91f98f8207d8b47cdfc1dbcf2ce5b3a82062ce3a","modified":1753845080027},{"_id":"source/images/微信小程序实战/准备工作/release.png","hash":"f0ecfed270149e053da055c2cce6f2deaa932447","modified":1753947679081},{"_id":"source/images/微信小程序实战/准备工作/accountManage.png","hash":"1b35bb0e945f21eaabc89cd7eddf467e52bd7b4f","modified":1753935136998},{"_id":"source/images/微信小程序实战/准备工作/createProject2.png","hash":"e5d15fd53743f9aab4c57e6fb98b52cd466e3427","modified":1753945586459},{"_id":"source/images/搭建个人博客/hexo_init.png","hash":"1c72175012bb6751b24a98e674a9ff1fdfb2a7bc","modified":1753244342187},{"_id":"source/images/搭建个人博客/hexo_themes.png","hash":"f8a60b8e84f3c41d7ea58c030aa2a11c8ba5f75f","modified":1753254291732},{"_id":"source/theme_images/bg.jpg","hash":"1cca29a70142766ce97b99d6cf25b5a7eac499c2","modified":1753264258011},{"_id":"source/images/微信小程序实战/准备工作/updateVersion.png","hash":"ff1cce5bcd44a84ea4b587c11feadf1e3088bbf2","modified":1753947035236},{"_id":"public/search.xml","hash":"3ad27fadbe30e40d5f9dc94a98e2b14d031df04b","modified":1754020939629},{"_id":"public/css/custom.css","hash":"9eaf7fe6874b4b1a16c58e8ae8a7a2cd143dc711","modified":1754020939629},{"_id":"public/404.html","hash":"cb378477328bf4660b899d8207d4b8a0bca94d90","modified":1754020939629},{"_id":"public/about/index.html","hash":"b77ca9e9792f219ad2ea02c52055b3f5ca3cc16e","modified":1754020939629},{"_id":"public/categories/index.html","hash":"9efed91a96f04e28af4db62614794412a44072e6","modified":1754020939629},{"_id":"public/tags/index.html","hash":"b787e5e559bf884c75f7fe3ed74fae388e6e3038","modified":1754020939629},{"_id":"public/link/index.html","hash":"1097109bf615312451ccf634e928a31cf6b8c5a7","modified":1754020939629},{"_id":"public/2025/07/14/nvm管理node/index.html","hash":"a08d366531ae05a3859e1cfac8e9354c5ec3ebf6","modified":1754020939629},{"_id":"public/2025/07/11/我的第一篇博客/index.html","hash":"10743cfa0e34c25c553c334cf5cf4d5d52f02242","modified":1754020939629},{"_id":"public/2025/07/11/git远程项目迁移/index.html","hash":"2d54c9e60c82efa92c6d37a4e36aa4e3bc8cf83e","modified":1754020939629},{"_id":"public/2025/07/16/get-post入参格式/index.html","hash":"aacf5e67d52dbae240f827c31efc877bdadf8d1b","modified":1754020939629},{"_id":"public/2025/07/14/forEach不能直接支持异步等待/index.html","hash":"cbf33bd267ace3d27f111a13d1a8b22711d468ea","modified":1754020939629},{"_id":"public/2025/07/23/搭建个人博客/index.html","hash":"76c2cf079238c337753cb7155e94f7be9ccc7ab0","modified":1754020939629},{"_id":"public/2025/07/23/js判断数据类型/index.html","hash":"15f4b236b0b66eee1b828639e7bde928de45cfdd","modified":1754020939629},{"_id":"public/2025/07/30/接入Google地图/index.html","hash":"b39c0cf92bcd5169adf94fdc8d53e4e0be3fb976","modified":1754020939629},{"_id":"public/2025/07/28/setTimeout与闭包/index.html","hash":"7fd4ba5cf5cc1891d700767ed8ca970628798340","modified":1754020939629},{"_id":"public/2025/07/29/Event事件循环/index.html","hash":"d00e87159d420d7d18d85c5b6a41fed7f927de6b","modified":1754020939629},{"_id":"public/2025/07/24/compoents下组件自动注册/index.html","hash":"3172228ce6347ed0ada2c182fead9931863baf14","modified":1754020939629},{"_id":"public/2025/07/31/【微信小程序实战】之准备工作详解/index.html","hash":"48e78e8d3d61576f1ee5194fc1b827d18a04bbb2","modified":1754020939629},{"_id":"public/archives/page/2/index.html","hash":"106b60e59d2812bf2a9e032f7db5766f8e8ab286","modified":1754020939629},{"_id":"public/archives/2025/index.html","hash":"204ca80a98033d59f9dd48ed931033b3e9f95b55","modified":1754020939629},{"_id":"public/archives/2025/page/2/index.html","hash":"58434f210c9f9b5a4c2c3ac80d551917673151e0","modified":1754020939629},{"_id":"public/archives/2025/07/index.html","hash":"4a1d49d82db7f2e4ff2cf81c3fb17980839b8157","modified":1754020939629},{"_id":"public/categories/Javascript/index.html","hash":"624b121afe33c3eebd18b3987e9d6f8b8f4292ea","modified":1754020939629},{"_id":"public/categories/axios/index.html","hash":"55516b12f2a3d44293047a0341ed1c9328387ce7","modified":1754020939629},{"_id":"public/archives/2025/07/page/2/index.html","hash":"06d0084660bf9bc049861262b19dfc2aa66388c8","modified":1754020939629},{"_id":"public/categories/Hexo/index.html","hash":"a19f5371ba1ddf0546d6d9ad8c6fd05a60ba43ee","modified":1754020939629},{"_id":"public/categories/Vue/index.html","hash":"8c7d51a785d5b674f2f7418b7e8a3aa8cc7bec0e","modified":1754020939629},{"_id":"public/archives/index.html","hash":"9c55ba88df8110ad38632c8d54b5dd04b28b7dc3","modified":1754020939629},{"_id":"public/categories/小程序/index.html","hash":"0fd16e110f216bc0ed0d772942137549a0cc92c5","modified":1754020939629},{"_id":"public/tags/git/index.html","hash":"8615e9d5d92a999348c9611a88bd9f51ba7f092e","modified":1754020939629},{"_id":"public/tags/forEach/index.html","hash":"92719cb19f9e49d59f8b93562973ab962b46c74c","modified":1754020939629},{"_id":"public/tags/async-await/index.html","hash":"fef69cf9728f59ba1f56bb9e670dc27fa24600d2","modified":1754020939629},{"_id":"public/tags/nvm/index.html","hash":"38cd004748d227e1b49c9a1caad41a8edad929e3","modified":1754020939629},{"_id":"public/tags/nodejs/index.html","hash":"14bb2450f84522e5609a7cf83ef5cad272dd2a9a","modified":1754020939629},{"_id":"public/tags/axios/index.html","hash":"df632ff88876695d98a9568b1dcce741a0cbcb43","modified":1754020939629},{"_id":"public/tags/get/index.html","hash":"5d22b66f3af9eed92a823293d065537b2e79bd13","modified":1754020939629},{"_id":"public/tags/hexo/index.html","hash":"0e992663644149a1d97b7ffdecdb66697095b08e","modified":1754020939629},{"_id":"public/tags/gitlab/index.html","hash":"31e23f6dd34813a5fe61bd8e8dd7fa2e1f5ccacf","modified":1754020939629},{"_id":"public/tags/post/index.html","hash":"9f3970796edd5f7ea7d0921064709b56bb2ae282","modified":1754020939629},{"_id":"public/tags/vite/index.html","hash":"5451ae625a86c3cb7185454a6b38e7062f361c51","modified":1754020939629},{"_id":"public/tags/vue-cli/index.html","hash":"d13716fe86e02459f2396e67ac0c40c10b603423","modified":1754020939629},{"_id":"public/tags/setTimeout/index.html","hash":"76c936efc81e2d503fdc7885226700738d84e2c3","modified":1754020939629},{"_id":"public/tags/Google-Maps/index.html","hash":"24ac985fefe38f41f69769629a186fa36c3da669","modified":1754020939629},{"_id":"public/tags/微信小程序/index.html","hash":"ec7baf335e9a7553dcc3cac8a27e858a093033a9","modified":1754020939629},{"_id":"public/tags/event-loop/index.html","hash":"09edc392aa93a123966c1b6efa5744c54f39cdea","modified":1754020939629},{"_id":"public/index.html","hash":"f44f13d8fe088178e1b806a8527d19dcd0a91e9f","modified":1754020939629},{"_id":"public/page/2/index.html","hash":"5ae8702f6e48de1e7d10ade3f11ad528bac1e8a3","modified":1754020939629},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1754020939629},{"_id":"public/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1754020939629},{"_id":"public/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1754020939629},{"_id":"public/theme_images/archive_top_img.jpg","hash":"95d5f11cc991be77a59aca0a01a67e989e1b7413","modified":1754020939629},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1754020939629},{"_id":"public/images/Event事件循环/cover.jpg","hash":"c40de14fe01eff147bb88bdd7e59ee417d286c38","modified":1754020939629},{"_id":"public/images/compoents下组件自动注册/vite_com.png","hash":"0bfb6a7eb3bc08d5c23bf2be40ddd4f2274275a6","modified":1754020939629},{"_id":"public/images/get-post入参格式/cover.jpg","hash":"db5b4b65aa21b94b17221a0cbe39e6eeacb866f0","modified":1754020939629},{"_id":"public/images/nvm管理node/path1.png","hash":"370c3f1e2b766325349a380eb0a86982d639e710","modified":1754020939629},{"_id":"public/images/setTimeout与闭包/cover.jpg","hash":"e07386cca1c57d264b72238ab93efe831d212f3b","modified":1754020939629},{"_id":"public/images/接入Google地图/cover.jpg","hash":"c684bcdf54625e3cafa39f0154238604fcc69b03","modified":1754020939629},{"_id":"public/images/搭建个人博客/cover.jpg","hash":"ad51e1244168f82abf7dbb9a54d15b3a6217abf9","modified":1754020939629},{"_id":"public/images/搭建个人博客/gitlab-ci-yml.png","hash":"846233b88f3ea5e836a20d58fdfa7c8eb83f3763","modified":1754020939629},{"_id":"public/images/微信小程序实战/准备工作/cover.jpg","hash":"7a1f15b314cc9998b338de9aa035cd33036647ea","modified":1754020939629},{"_id":"public/images/微信小程序实战/准备工作/wxtoolexeinstall.png","hash":"1c59bdf99db0e6785a01a0689e8a35a6ecb63846","modified":1754020939629},{"_id":"public/theme_images/avatar.jpg","hash":"0d1ad2b6763489ffba0ce86c10ca3c94eef4051a","modified":1754020939629},{"_id":"public/theme_images/index_top_img.jpg","hash":"fd37dfb1269e1c7f771c5f7b203194b88be218bd","modified":1754020939629},{"_id":"public/images/git远程项目迁移/cover.jpg","hash":"a27322ef944313c5f1b43c745b4166747c607a94","modified":1754020939629},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1754020939629},{"_id":"public/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1754020939629},{"_id":"public/js/utils.js","hash":"ce898acc9081131cdc3a97baf43cb7b1a25da47f","modified":1754020939629},{"_id":"public/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1754020939629},{"_id":"public/css/index.css","hash":"e84fe5c6fb07e4c226f4654223f4bb0253aa2efc","modified":1754020939629},{"_id":"public/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1754020939629},{"_id":"public/js/main.js","hash":"fb746a3e67d0373deea8481110dd436fea4ca38c","modified":1754020939629},{"_id":"public/theme_images/f.ico","hash":"fdc2c6f9a8a07f9f5f1e009ba389f9436c2f1081","modified":1754020939629},{"_id":"public/theme_images/footer.jpg","hash":"fe19b156f7575fa85f57e2e5504f28a1ed0d332b","modified":1754020939629},{"_id":"public/images/compoents下组件自动注册/cover.jpg","hash":"aa625942db12ad7881670cfda51e76b6aa1178e6","modified":1754020939629},{"_id":"public/images/nvm管理node/cover.jpg","hash":"2270e49eb94f05b86c18fa8055bf0fce4d315399","modified":1754020939629},{"_id":"public/theme_images/default_top_img.jpg","hash":"6d086040d7b10582e2995729e765b4e8f63cc4da","modified":1754020939629},{"_id":"public/images/compoents下组件自动注册/vue_com.png","hash":"6b3ab66352d03d06f5c91aeb155ca5b894f94b20","modified":1754020939629},{"_id":"public/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1754020939629},{"_id":"public/images/nvm管理node/nvms2.png","hash":"caa851110bc539dc8ffb7a3543e80f600d4ba8ba","modified":1754020939629},{"_id":"public/images/nvm管理node/path2.png","hash":"1fac019c4c8dfa26f0c9709f151f169d93ce9809","modified":1754020939629},{"_id":"public/images/nvm管理node/nvms1.png","hash":"f169117474fb7cd1e4d920463de12d422c2b8515","modified":1754020939629},{"_id":"public/images/nvm管理node/nvms3.png","hash":"0c73472eb0c85930408c73c5d54ad9de26137a6a","modified":1754020939629},{"_id":"public/images/微信小程序实战/准备工作/wxtoolexe.png","hash":"8e3599ef7b7a39a1962667cd5eb0af2b54c7857e","modified":1754020939629},{"_id":"public/images/get-post入参格式/formdata2.png","hash":"4b81f95c2973b0eee32a64b326457941728b0913","modified":1754020939629},{"_id":"public/images/get-post入参格式/json3.png","hash":"a12672497f18d3c885ec49b138baf7a634a67835","modified":1754020939629},{"_id":"public/images/微信小程序实战/准备工作/confirmInfo.png","hash":"e7301fa91592bf32d36efc57093a1dbff0ada1f5","modified":1754020939629},{"_id":"public/images/get-post入参格式/json2.png","hash":"28a202124a408fda87884e3e7d86d04b633cf486","modified":1754020939629},{"_id":"public/images/nvm管理node/node.png","hash":"39591bfcd56fce198d8869950ef82d12059e73a1","modified":1754020939629},{"_id":"public/images/get-post入参格式/get.png","hash":"e80e11cf83ec2d0fd3272a675fd08f80cfae09f7","modified":1754020939629},{"_id":"public/images/get-post入参格式/urlencoded2.png","hash":"d84defda37236e452b69f0a37f12597b8bb205cc","modified":1754020939629},{"_id":"public/images/微信小程序实战/准备工作/updateVersion2.png","hash":"07219e3467808a78bfddb38971afac4fba879292","modified":1754020939629},{"_id":"public/images/微信小程序实战/准备工作/wxtype4.png","hash":"2fe853d008df517502167b0ab109045d6d8f14f1","modified":1754020939629},{"_id":"public/images/微信小程序实战/准备工作/uploadcode.png","hash":"2371f1be95e93a9222d0b09be2b88c3b1364a0f7","modified":1754020939629},{"_id":"public/images/微信小程序实战/准备工作/createProject0.png","hash":"38700902a8c1affdd4d437fd3077b1bd76e70910","modified":1754020939629},{"_id":"public/images/get-post入参格式/bodyData.png","hash":"9b2d1fb6ab98fbd838f92bd80f5a0881272461d1","modified":1754020939629},{"_id":"public/images/get-post入参格式/params.png","hash":"a5f99846ed6b97f347a3d3a06235a9c2c40d2bc2","modified":1754020939629},{"_id":"public/images/get-post入参格式/urlencoded3.png","hash":"39bde66360fd7ea74188183282d1ef101b851a55","modified":1754020939629},{"_id":"public/images/get-post入参格式/formdata1.png","hash":"3a13289c4f5fdd3201be8a958b38a504c2882695","modified":1754020939629},{"_id":"public/images/搭建个人博客/firstBlog.png","hash":"adfc30470aba2d295e495ea1dff37f2059c203ad","modified":1754020939629},{"_id":"public/images/微信小程序实战/准备工作/wxtool.png","hash":"97f955bfd2cd562e88e8a297ae40f887e270b9ec","modified":1754020939629},{"_id":"public/images/get-post入参格式/json1.png","hash":"548c6dd7378c72106e381f4c43c33f5da5831ff8","modified":1754020939629},{"_id":"public/images/get-post入参格式/urlencoded1.png","hash":"394c63d5666b1361998254a248ab155ad7fdaf84","modified":1754020939629},{"_id":"public/images/get-post入参格式/formdata3.png","hash":"5fac213bafaf2106eb4d007c8295b1cee5e91f29","modified":1754020939629},{"_id":"public/images/接入Google地图/latlng.png","hash":"f321e5d88ea40854945d0cb2988c823e6fa63223","modified":1754020939629},{"_id":"public/images/微信小程序实战/准备工作/registerAccount.png","hash":"c92443abcb27369a9e4a48147513e0c152bc31b2","modified":1754020939629},{"_id":"public/images/微信小程序实战/准备工作/preview.png","hash":"8ea320a3ed28fdd1f57ee42a0febf0a25a168c45","modified":1754020939629},{"_id":"public/images/微信小程序实战/准备工作/createProject1.png","hash":"f4297ca4f7011d0b2ea0e6b47bfca828ac88ae4e","modified":1754020939629},{"_id":"public/images/微信小程序实战/准备工作/infoRecord.png","hash":"20c92036e822d8ea0ed6455a9d16b1f561c2866d","modified":1754020939629},{"_id":"public/images/搭建个人博客/gitRuning0.png","hash":"7f84efd204b134fa637d4132482fd7e963bb19ff","modified":1754020939629},{"_id":"public/images/微信小程序实战/准备工作/wxgzpt.png","hash":"fe300d0aeacaddb9320d88637cfd89337e422afe","modified":1754020939629},{"_id":"public/images/搭建个人博客/gitRuning.png","hash":"f58073d7ebc5ae2b336e826ac02c860d0fe03231","modified":1754020939629},{"_id":"public/images/微信小程序实战/准备工作/wxtooldowload.png","hash":"12bb85399c0186a01f5676cdcf2d222e249ee919","modified":1754020939629},{"_id":"public/images/接入Google地图/maps.png","hash":"91f98f8207d8b47cdfc1dbcf2ce5b3a82062ce3a","modified":1754020939629},{"_id":"public/images/微信小程序实战/准备工作/release.png","hash":"f0ecfed270149e053da055c2cce6f2deaa932447","modified":1754020939629},{"_id":"public/images/微信小程序实战/准备工作/accountManage.png","hash":"1b35bb0e945f21eaabc89cd7eddf467e52bd7b4f","modified":1754020939629},{"_id":"public/images/微信小程序实战/准备工作/createProject2.png","hash":"e5d15fd53743f9aab4c57e6fb98b52cd466e3427","modified":1754020939629},{"_id":"public/images/搭建个人博客/hexo_init.png","hash":"1c72175012bb6751b24a98e674a9ff1fdfb2a7bc","modified":1754020939629},{"_id":"public/images/搭建个人博客/hexo_themes.png","hash":"f8a60b8e84f3c41d7ea58c030aa2a11c8ba5f75f","modified":1754020939629},{"_id":"public/theme_images/bg.jpg","hash":"1cca29a70142766ce97b99d6cf25b5a7eac499c2","modified":1754020939629},{"_id":"public/images/微信小程序实战/准备工作/updateVersion.png","hash":"ff1cce5bcd44a84ea4b587c11feadf1e3088bbf2","modified":1754020939629}],"Category":[{"name":"Javascript","_id":"cmdsas6mp0007ignc78ac0vdd"},{"name":"axios","_id":"cmdsas6mu000fignc3d0v10f0"},{"name":"Hexo","_id":"cmdsas6mw000lignc5uxv90mm"},{"name":"Vue","_id":"cmdsas6mx000qignca35t15n3"},{"name":"小程序","_id":"cmdsas6n2001jignc5m525jql"}],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"那些人，那些事，那些好用的官网...","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-cn/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简洁且高效的博客框架"},{"name":"Butterfly主题官网","link":"https://butterfly.js.org/posts/21cfbf15/","avatar":"https://butterfly.js.org/img/butterfly-icon.png","descr":"一款专为 Hexo 静态博客引擎设计的高颜值现代化主题"},{"name":"Waline","link":"https://waline.js.org/guide/get-started/","avatar":"https://waline.js.org/logo.png","descr":"一款简洁、安全的评论系统"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"}]}]}],"Page":[{"title":"你好呀","date":"2025-07-28T07:46:58.000Z","type":"about","comments":0,"_content":"\n### ✍️「个人介绍」\n\n👋 大家好，我是 Sara，一名 web 前端开发工程师兼技术博主\n\n本人 00 后，大学本科毕业，平时喜欢追剧、看综艺、打羽毛球，也喜欢学习一些新技术，有好玩的技术可以留言分享\n\n### 📚「这里主要分享」\n\n- 前端开发技巧\n- 效率工具测评\n- 个人成长心得\n\n### 🔄「更新频率」\n\n- 不定期更新\n- 日常碎片思考\n\n### 💬「欢迎评论告诉我」\n\n- 你对哪类内容最感兴趣？\n- 希望看到什么主题的文章？\n- 文章上有什么错处？\n\n### 💻「代码如诗」\n\n- 在 console.log() 里埋下种子，意外长出了整个春天的叙事诗\n- 递归函数像俄罗斯套娃，每个 return 都藏着一个更小的宇宙\n\n### 💫「交换星光」\n\n> \"生活中没有什么可怕的东西，只有需要理解的东西\" ——《居里夫人》\n> \"上善若水，水善利万物而不争\" ——《老子》\n\n欢迎带着你的星轨图  \n来我的小宇宙做客  \n让我们互为对方的诗篇注脚\n","source":"about/index.md","raw":"---\ntitle: 你好呀\ndate: 2025-07-28 15:46:58\ntype: 'about'\ncomments: false\n---\n\n### ✍️「个人介绍」\n\n👋 大家好，我是 Sara，一名 web 前端开发工程师兼技术博主\n\n本人 00 后，大学本科毕业，平时喜欢追剧、看综艺、打羽毛球，也喜欢学习一些新技术，有好玩的技术可以留言分享\n\n### 📚「这里主要分享」\n\n- 前端开发技巧\n- 效率工具测评\n- 个人成长心得\n\n### 🔄「更新频率」\n\n- 不定期更新\n- 日常碎片思考\n\n### 💬「欢迎评论告诉我」\n\n- 你对哪类内容最感兴趣？\n- 希望看到什么主题的文章？\n- 文章上有什么错处？\n\n### 💻「代码如诗」\n\n- 在 console.log() 里埋下种子，意外长出了整个春天的叙事诗\n- 递归函数像俄罗斯套娃，每个 return 都藏着一个更小的宇宙\n\n### 💫「交换星光」\n\n> \"生活中没有什么可怕的东西，只有需要理解的东西\" ——《居里夫人》\n> \"上善若水，水善利万物而不争\" ——《老子》\n\n欢迎带着你的星轨图  \n来我的小宇宙做客  \n让我们互为对方的诗篇注脚\n","updated":"2025-07-29T01:59:45.171Z","path":"about/index.html","layout":"page","_id":"cmdsas6mf0000ignc5m23eh8w","content":"<h3 id=\"✍️「个人介绍」\"><a href=\"#✍️「个人介绍」\" class=\"headerlink\" title=\"✍️「个人介绍」\"></a>✍️「个人介绍」</h3><p>👋 大家好，我是 Sara，一名 web 前端开发工程师兼技术博主</p>\n<p>本人 00 后，大学本科毕业，平时喜欢追剧、看综艺、打羽毛球，也喜欢学习一些新技术，有好玩的技术可以留言分享</p>\n<h3 id=\"📚「这里主要分享」\"><a href=\"#📚「这里主要分享」\" class=\"headerlink\" title=\"📚「这里主要分享」\"></a>📚「这里主要分享」</h3><ul>\n<li>前端开发技巧</li>\n<li>效率工具测评</li>\n<li>个人成长心得</li>\n</ul>\n<h3 id=\"🔄「更新频率」\"><a href=\"#🔄「更新频率」\" class=\"headerlink\" title=\"🔄「更新频率」\"></a>🔄「更新频率」</h3><ul>\n<li>不定期更新</li>\n<li>日常碎片思考</li>\n</ul>\n<h3 id=\"💬「欢迎评论告诉我」\"><a href=\"#💬「欢迎评论告诉我」\" class=\"headerlink\" title=\"💬「欢迎评论告诉我」\"></a>💬「欢迎评论告诉我」</h3><ul>\n<li>你对哪类内容最感兴趣？</li>\n<li>希望看到什么主题的文章？</li>\n<li>文章上有什么错处？</li>\n</ul>\n<h3 id=\"💻「代码如诗」\"><a href=\"#💻「代码如诗」\" class=\"headerlink\" title=\"💻「代码如诗」\"></a>💻「代码如诗」</h3><ul>\n<li>在 console.log() 里埋下种子，意外长出了整个春天的叙事诗</li>\n<li>递归函数像俄罗斯套娃，每个 return 都藏着一个更小的宇宙</li>\n</ul>\n<h3 id=\"💫「交换星光」\"><a href=\"#💫「交换星光」\" class=\"headerlink\" title=\"💫「交换星光」\"></a>💫「交换星光」</h3><blockquote>\n<p>“生活中没有什么可怕的东西，只有需要理解的东西” ——《居里夫人》<br>“上善若水，水善利万物而不争” ——《老子》</p>\n</blockquote>\n<p>欢迎带着你的星轨图<br>来我的小宇宙做客<br>让我们互为对方的诗篇注脚</p>\n","excerpt":"","more":"<h3 id=\"✍️「个人介绍」\"><a href=\"#✍️「个人介绍」\" class=\"headerlink\" title=\"✍️「个人介绍」\"></a>✍️「个人介绍」</h3><p>👋 大家好，我是 Sara，一名 web 前端开发工程师兼技术博主</p>\n<p>本人 00 后，大学本科毕业，平时喜欢追剧、看综艺、打羽毛球，也喜欢学习一些新技术，有好玩的技术可以留言分享</p>\n<h3 id=\"📚「这里主要分享」\"><a href=\"#📚「这里主要分享」\" class=\"headerlink\" title=\"📚「这里主要分享」\"></a>📚「这里主要分享」</h3><ul>\n<li>前端开发技巧</li>\n<li>效率工具测评</li>\n<li>个人成长心得</li>\n</ul>\n<h3 id=\"🔄「更新频率」\"><a href=\"#🔄「更新频率」\" class=\"headerlink\" title=\"🔄「更新频率」\"></a>🔄「更新频率」</h3><ul>\n<li>不定期更新</li>\n<li>日常碎片思考</li>\n</ul>\n<h3 id=\"💬「欢迎评论告诉我」\"><a href=\"#💬「欢迎评论告诉我」\" class=\"headerlink\" title=\"💬「欢迎评论告诉我」\"></a>💬「欢迎评论告诉我」</h3><ul>\n<li>你对哪类内容最感兴趣？</li>\n<li>希望看到什么主题的文章？</li>\n<li>文章上有什么错处？</li>\n</ul>\n<h3 id=\"💻「代码如诗」\"><a href=\"#💻「代码如诗」\" class=\"headerlink\" title=\"💻「代码如诗」\"></a>💻「代码如诗」</h3><ul>\n<li>在 console.log() 里埋下种子，意外长出了整个春天的叙事诗</li>\n<li>递归函数像俄罗斯套娃，每个 return 都藏着一个更小的宇宙</li>\n</ul>\n<h3 id=\"💫「交换星光」\"><a href=\"#💫「交换星光」\" class=\"headerlink\" title=\"💫「交换星光」\"></a>💫「交换星光」</h3><blockquote>\n<p>“生活中没有什么可怕的东西，只有需要理解的东西” ——《居里夫人》<br>“上善若水，水善利万物而不争” ——《老子》</p>\n</blockquote>\n<p>欢迎带着你的星轨图<br>来我的小宇宙做客<br>让我们互为对方的诗篇注脚</p>\n"},{"title":"分类","date":"2025-07-28T02:17:10.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2025-07-28 10:17:10\ntype: 'categories'  # 页面类型，分类页必须是 categories\ncomments: false  # 是否开启评论，默认为true\n---\n","updated":"2025-07-29T02:01:12.930Z","path":"categories/index.html","layout":"page","_id":"cmdsas6mk0002igncc9431u9m","content":"","excerpt":"","more":""},{"title":"标签","date":"2025-07-28T02:13:02.000Z","type":"tags","orderby":"random","order":1,"comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2025-07-28 10:13:02\ntype: 'tags'  # 页面类型，标签页必须是 tags\norderby: random   # 排序方式：random随机/标签名称排序/length标签数量排序\norder: 1   # 排序次序： 1（升序），-1（降序）\ncomments: false  # 是否开启评论，默认为true\n---\n","updated":"2025-07-29T02:01:16.919Z","path":"tags/index.html","layout":"page","_id":"cmdsas6mn0005igncckjh7kqk","content":"","excerpt":"","more":""},{"_content":"/* 自定义样式 */\n#post #article-container img {\n\ttext-align: left;\n    margin: 10px 0;\n    /* transition: transform 0.3s ease; */\n}\n#post #article-container img:hover {\n    /* transform: scale(1.001); */\n}\n.max400 {\n    max-width: 400px !important;\n}\n.max450 {\n    max-width: 450px !important;\n}\n.max500 {\n    max-width: 500px !important;\n}\n.max600 {\n    max-width: 600px !important;\n}","source":"css/custom.css","raw":"/* 自定义样式 */\n#post #article-container img {\n\ttext-align: left;\n    margin: 10px 0;\n    /* transition: transform 0.3s ease; */\n}\n#post #article-container img:hover {\n    /* transform: scale(1.001); */\n}\n.max400 {\n    max-width: 400px !important;\n}\n.max450 {\n    max-width: 450px !important;\n}\n.max500 {\n    max-width: 500px !important;\n}\n.max600 {\n    max-width: 600px !important;\n}","date":"2025-08-01T03:23:12.556Z","updated":"2025-08-01T03:23:12.556Z","path":"css/custom.css","layout":"false","title":"","comments":1,"_id":"cmdsas6mp0008ignc05yr627b","content":"/* 自定义样式 */\n#post #article-container img {\n\ttext-align: left;\n    margin: 10px 0;\n    /* transition: transform 0.3s ease; */\n}\n#post #article-container img:hover {\n    /* transform: scale(1.001); */\n}\n.max400 {\n    max-width: 400px !important;\n}\n.max450 {\n    max-width: 450px !important;\n}\n.max500 {\n    max-width: 500px !important;\n}\n.max600 {\n    max-width: 600px !important;\n}"},{"title":"链接","date":"2025-07-28T07:48:59.000Z","type":"link","comments":0,"_content":"\n<!-- [Hexo 官网](https://hexo.io/ 'Hexo静态博客框架')\n[Butterfly 主题官网](https://butterfly.js.org/posts/21cfbf15/)\n[Waline 三方评论系统](https://waline.js.org/guide/get-started/) -->\n","source":"link/index.md","raw":"---\ntitle: 链接\ndate: 2025-07-28 15:48:59\ntype: 'link'\ncomments: false\n---\n\n<!-- [Hexo 官网](https://hexo.io/ 'Hexo静态博客框架')\n[Butterfly 主题官网](https://butterfly.js.org/posts/21cfbf15/)\n[Waline 三方评论系统](https://waline.js.org/guide/get-started/) -->\n","updated":"2025-07-29T04:05:53.208Z","path":"link/index.html","layout":"page","_id":"cmdsas6mr000aignce3y7273c","content":"<!-- [Hexo 官网](https://hexo.io/ 'Hexo静态博客框架')\n[Butterfly 主题官网](https://butterfly.js.org/posts/21cfbf15/)\n[Waline 三方评论系统](https://waline.js.org/guide/get-started/) -->\n","excerpt":"","more":"<!-- [Hexo 官网](https://hexo.io/ 'Hexo静态博客框架')\n[Butterfly 主题官网](https://butterfly.js.org/posts/21cfbf15/)\n[Waline 三方评论系统](https://waline.js.org/guide/get-started/) -->\n"}],"Post":[{"title":"git远程项目迁移","date":"2025-07-11T10:22:52.000Z","cover":"/images/git远程项目迁移/cover.jpg","_content":"\n#### 1、克隆待迁移的 git 项目到本地\n\n```bash\ngit clone --mirror https://xxx/xxx/oldProject.git\n```\n\n#### 2、进入本地克隆的 git 项目 cd oldProject.git\n\n#### 3、在 gitlib 上创建对应的空项目，https://xxx/xxx/newProject.git\n\n#### 4、在 oldProject.git 命令窗口下\n\n- 执行下方命令修改 git 地址为新项目地址：\n\n```bash\ngit remote set-url origin https://xxx/xxx/newProject.git\n```\n\n- 推送已修改 git 到新地址，完成迁移\n\n```bash\ngit push -f origin --mirror\n```\n\n#### 5、可以删除旧项目和 oldProject.git\n","source":"_posts/2025-07-11-git远程项目迁移.md","raw":"---\ntitle: git远程项目迁移\ndate: 2025-07-11 18:22:52\ntags: git\ncover: /images/git远程项目迁移/cover.jpg # 封面图\n---\n\n#### 1、克隆待迁移的 git 项目到本地\n\n```bash\ngit clone --mirror https://xxx/xxx/oldProject.git\n```\n\n#### 2、进入本地克隆的 git 项目 cd oldProject.git\n\n#### 3、在 gitlib 上创建对应的空项目，https://xxx/xxx/newProject.git\n\n#### 4、在 oldProject.git 命令窗口下\n\n- 执行下方命令修改 git 地址为新项目地址：\n\n```bash\ngit remote set-url origin https://xxx/xxx/newProject.git\n```\n\n- 推送已修改 git 到新地址，完成迁移\n\n```bash\ngit push -f origin --mirror\n```\n\n#### 5、可以删除旧项目和 oldProject.git\n","slug":"git远程项目迁移","published":1,"updated":"2025-07-28T03:38:19.543Z","comments":1,"layout":"post","photos":[],"_id":"cmdsas6mh0001ignc63d805ej","content":"<h4 id=\"1、克隆待迁移的-git-项目到本地\"><a href=\"#1、克隆待迁移的-git-项目到本地\" class=\"headerlink\" title=\"1、克隆待迁移的 git 项目到本地\"></a>1、克隆待迁移的 git 项目到本地</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --mirror https://xxx/xxx/oldProject.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、进入本地克隆的-git-项目-cd-oldProject-git\"><a href=\"#2、进入本地克隆的-git-项目-cd-oldProject-git\" class=\"headerlink\" title=\"2、进入本地克隆的 git 项目 cd oldProject.git\"></a>2、进入本地克隆的 git 项目 cd oldProject.git</h4><h4 id=\"3、在-gitlib-上创建对应的空项目，https-xxx-xxx-newProject-git\"><a href=\"#3、在-gitlib-上创建对应的空项目，https-xxx-xxx-newProject-git\" class=\"headerlink\" title=\"3、在 gitlib 上创建对应的空项目，https://xxx/xxx/newProject.git\"></a>3、在 gitlib 上创建对应的空项目，<a href=\"https://xxx/xxx/newProject.git\">https://xxx/xxx/newProject.git</a></h4><h4 id=\"4、在-oldProject-git-命令窗口下\"><a href=\"#4、在-oldProject-git-命令窗口下\" class=\"headerlink\" title=\"4、在 oldProject.git 命令窗口下\"></a>4、在 oldProject.git 命令窗口下</h4><ul>\n<li>执行下方命令修改 git 地址为新项目地址：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin https://xxx/xxx/newProject.git</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>推送已修改 git 到新地址，完成迁移</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f origin --mirror</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、可以删除旧项目和-oldProject-git\"><a href=\"#5、可以删除旧项目和-oldProject-git\" class=\"headerlink\" title=\"5、可以删除旧项目和 oldProject.git\"></a>5、可以删除旧项目和 oldProject.git</h4>","excerpt":"","more":"<h4 id=\"1、克隆待迁移的-git-项目到本地\"><a href=\"#1、克隆待迁移的-git-项目到本地\" class=\"headerlink\" title=\"1、克隆待迁移的 git 项目到本地\"></a>1、克隆待迁移的 git 项目到本地</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> --mirror https://xxx/xxx/oldProject.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2、进入本地克隆的-git-项目-cd-oldProject-git\"><a href=\"#2、进入本地克隆的-git-项目-cd-oldProject-git\" class=\"headerlink\" title=\"2、进入本地克隆的 git 项目 cd oldProject.git\"></a>2、进入本地克隆的 git 项目 cd oldProject.git</h4><h4 id=\"3、在-gitlib-上创建对应的空项目，https-xxx-xxx-newProject-git\"><a href=\"#3、在-gitlib-上创建对应的空项目，https-xxx-xxx-newProject-git\" class=\"headerlink\" title=\"3、在 gitlib 上创建对应的空项目，https://xxx/xxx/newProject.git\"></a>3、在 gitlib 上创建对应的空项目，<a href=\"https://xxx/xxx/newProject.git\">https://xxx/xxx/newProject.git</a></h4><h4 id=\"4、在-oldProject-git-命令窗口下\"><a href=\"#4、在-oldProject-git-命令窗口下\" class=\"headerlink\" title=\"4、在 oldProject.git 命令窗口下\"></a>4、在 oldProject.git 命令窗口下</h4><ul>\n<li>执行下方命令修改 git 地址为新项目地址：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin https://xxx/xxx/newProject.git</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>推送已修改 git 到新地址，完成迁移</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f origin --mirror</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5、可以删除旧项目和-oldProject-git\"><a href=\"#5、可以删除旧项目和-oldProject-git\" class=\"headerlink\" title=\"5、可以删除旧项目和 oldProject.git\"></a>5、可以删除旧项目和 oldProject.git</h4>"},{"title":"forEach不能直接支持异步等待?","date":"2025-07-14T03:59:44.000Z","_content":"\n#### forEach 的设计是同步执行回调函数：\n\n- 不会等待 Promise 解决\n- 会立即执行所有回调（即使回调中包含异步操作）\n- 没有内置机制来处理异步操作的完成\n\n```javascript\n// delay是返回Promise的延迟函数\nconst delay = (times) => {\n\treturn new Promise((resolve, rejected) => {\n\t\tsetTimeout(() => {\n\t\t\tresolve()\n\t\t}, times)\n\t})\n}\n```\n\n##### 示例对比：\n\n1. 原始异步 forEach（不按顺序）\n\n```javascript\n[1, 2, 3].forEach(async (item) => {\n\tawait delay(1000)\n\tconsole.log(item)\n})\nprocess() // 会几乎同时输出1, 2, 3\n```\n\n2. 修改后的同步执行版本\n\n```javascript\nasync function process() {\n\tfor (const item of [1, 2, 3]) {\n\t\tawait delay(1000)\n\t\tconsole.log(item)\n\t}\n}\nprocess() // 会每隔1秒依次输出1, 2, 3\n```\n\n#### 注意事项\n\n- 顺序执行异步操作会显著增加总执行时间\n- 如果不需要顺序执行，Promise.all 可能是更好的选择\n- 在 Node.js 10+ 中，可以使用 for await...of 语法\n- 选择哪种方法取决于你的具体需求，但通常 for...of 循环是最清晰易读的解决方案\n","source":"_posts/2025-07-14-forEach不能直接支持异步等待.md","raw":"---\ntitle: forEach不能直接支持异步等待?\ndate: 2025-07-14 11:59:44\ntags:\n  - forEach\n  - async/await\ncategories: Javascript\n---\n\n#### forEach 的设计是同步执行回调函数：\n\n- 不会等待 Promise 解决\n- 会立即执行所有回调（即使回调中包含异步操作）\n- 没有内置机制来处理异步操作的完成\n\n```javascript\n// delay是返回Promise的延迟函数\nconst delay = (times) => {\n\treturn new Promise((resolve, rejected) => {\n\t\tsetTimeout(() => {\n\t\t\tresolve()\n\t\t}, times)\n\t})\n}\n```\n\n##### 示例对比：\n\n1. 原始异步 forEach（不按顺序）\n\n```javascript\n[1, 2, 3].forEach(async (item) => {\n\tawait delay(1000)\n\tconsole.log(item)\n})\nprocess() // 会几乎同时输出1, 2, 3\n```\n\n2. 修改后的同步执行版本\n\n```javascript\nasync function process() {\n\tfor (const item of [1, 2, 3]) {\n\t\tawait delay(1000)\n\t\tconsole.log(item)\n\t}\n}\nprocess() // 会每隔1秒依次输出1, 2, 3\n```\n\n#### 注意事项\n\n- 顺序执行异步操作会显著增加总执行时间\n- 如果不需要顺序执行，Promise.all 可能是更好的选择\n- 在 Node.js 10+ 中，可以使用 for await...of 语法\n- 选择哪种方法取决于你的具体需求，但通常 for...of 循环是最清晰易读的解决方案\n","slug":"forEach不能直接支持异步等待","published":1,"updated":"2025-07-28T06:37:30.874Z","comments":1,"layout":"post","photos":[],"_id":"cmdsas6mk0003ignc0myw2sf6","content":"<h4 id=\"forEach-的设计是同步执行回调函数：\"><a href=\"#forEach-的设计是同步执行回调函数：\" class=\"headerlink\" title=\"forEach 的设计是同步执行回调函数：\"></a>forEach 的设计是同步执行回调函数：</h4><ul>\n<li>不会等待 Promise 解决</li>\n<li>会立即执行所有回调（即使回调中包含异步操作）</li>\n<li>没有内置机制来处理异步操作的完成</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// delay是返回Promise的延迟函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">delay</span> = (<span class=\"params\">times</span>) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, rejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">\t\t&#125;, times)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"示例对比：\"><a href=\"#示例对比：\" class=\"headerlink\" title=\"示例对比：\"></a>示例对比：</h5><ol>\n<li>原始异步 forEach（不按顺序）</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].<span class=\"title function_\">forEach</span>(<span class=\"title function_\">async</span> (item) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> <span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>)</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">process</span>() <span class=\"comment\">// 会几乎同时输出1, 2, 3</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改后的同步执行版本</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">process</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">await</span> <span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>)</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">process</span>() <span class=\"comment\">// 会每隔1秒依次输出1, 2, 3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><ul>\n<li>顺序执行异步操作会显著增加总执行时间</li>\n<li>如果不需要顺序执行，Promise.all 可能是更好的选择</li>\n<li>在 Node.js 10+ 中，可以使用 for await…of 语法</li>\n<li>选择哪种方法取决于你的具体需求，但通常 for…of 循环是最清晰易读的解决方案</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"forEach-的设计是同步执行回调函数：\"><a href=\"#forEach-的设计是同步执行回调函数：\" class=\"headerlink\" title=\"forEach 的设计是同步执行回调函数：\"></a>forEach 的设计是同步执行回调函数：</h4><ul>\n<li>不会等待 Promise 解决</li>\n<li>会立即执行所有回调（即使回调中包含异步操作）</li>\n<li>没有内置机制来处理异步操作的完成</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// delay是返回Promise的延迟函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">delay</span> = (<span class=\"params\">times</span>) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, rejected</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">\t\t&#125;, times)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"示例对比：\"><a href=\"#示例对比：\" class=\"headerlink\" title=\"示例对比：\"></a>示例对比：</h5><ol>\n<li>原始异步 forEach（不按顺序）</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].<span class=\"title function_\">forEach</span>(<span class=\"title function_\">async</span> (item) =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">await</span> <span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>)</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"title function_\">process</span>() <span class=\"comment\">// 会几乎同时输出1, 2, 3</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>修改后的同步执行版本</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">process</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">await</span> <span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>)</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">process</span>() <span class=\"comment\">// 会每隔1秒依次输出1, 2, 3</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h4><ul>\n<li>顺序执行异步操作会显著增加总执行时间</li>\n<li>如果不需要顺序执行，Promise.all 可能是更好的选择</li>\n<li>在 Node.js 10+ 中，可以使用 for await…of 语法</li>\n<li>选择哪种方法取决于你的具体需求，但通常 for…of 循环是最清晰易读的解决方案</li>\n</ul>\n"},{"title":"nvm管理node","date":"2025-07-14T02:41:46.000Z","cover":"/images/nvm管理node/cover.jpg","_content":"\n#### 1、安装nvm \n+ https://github.com/coreybutler/nvm-windows/releases\n![](images/nvm管理node/node.png)\n\n+ 点击`.exe`文件 -> `accept` -> nvm的安装路径 (`D:\\NVM\\nvm`) -> 创建nodejs文件放在`D:\\NVM\\nvm`下 -> 一直点击`next`安装完成\n\n#### 2、给该文件添加这两行命令\nnode_mirror: https://npm.taobao.org/mirrors/node/\nnpm_mirror: https://npm.taobao.org/mirrors/npm/\n\n![](images/nvm管理node/nvms1.png)\n![](images/nvm管理node/nvms2.png)\n\n#### 3、配置环境变量\n![](images/nvm管理node/path1.png)\n\n#### 4、测试一下\n```bash\n  nvm -v  // 查看当前版本\n  nvm --config \n  nvm ls // 查看已安装的node版本\n  nvm install 版本号  // 下载对应node版本, nvm install 16.16.0\n  nvm use 版本号 // 切换node版本, nvm use 16.16.0\n  nvm on  // 开启nvm\n  nvm off  // 关闭nvm\n  nvm list available  // 查看node所有可以下载的版本\n  node -v  // 查看node版本\n```\n\n#### Tips: 如果原本电脑已安装某个版本的nodejs\n* 在安装nvm会检测是否安装某个版本的nodejs, 并提示该版本是否需要被nvm管理，如果选择是，该node的安装路径会自动变到对应的nvm安装目录下\n![](images/nvm管理node/nvms3.png)\n* 当 \"`nvm install node版本`\" 时报错，可以改一下node镜像\n![](images/nvm管理node/path2.png)\n\n","source":"_posts/2025-07-14-nvm管理node.md","raw":"---\ntitle: nvm管理node\ndate: 2025-07-14 10:41:46\ntags:\n  - nvm\n  - nodejs\ncover: /images/nvm管理node/cover.jpg\n---\n\n#### 1、安装nvm \n+ https://github.com/coreybutler/nvm-windows/releases\n![](images/nvm管理node/node.png)\n\n+ 点击`.exe`文件 -> `accept` -> nvm的安装路径 (`D:\\NVM\\nvm`) -> 创建nodejs文件放在`D:\\NVM\\nvm`下 -> 一直点击`next`安装完成\n\n#### 2、给该文件添加这两行命令\nnode_mirror: https://npm.taobao.org/mirrors/node/\nnpm_mirror: https://npm.taobao.org/mirrors/npm/\n\n![](images/nvm管理node/nvms1.png)\n![](images/nvm管理node/nvms2.png)\n\n#### 3、配置环境变量\n![](images/nvm管理node/path1.png)\n\n#### 4、测试一下\n```bash\n  nvm -v  // 查看当前版本\n  nvm --config \n  nvm ls // 查看已安装的node版本\n  nvm install 版本号  // 下载对应node版本, nvm install 16.16.0\n  nvm use 版本号 // 切换node版本, nvm use 16.16.0\n  nvm on  // 开启nvm\n  nvm off  // 关闭nvm\n  nvm list available  // 查看node所有可以下载的版本\n  node -v  // 查看node版本\n```\n\n#### Tips: 如果原本电脑已安装某个版本的nodejs\n* 在安装nvm会检测是否安装某个版本的nodejs, 并提示该版本是否需要被nvm管理，如果选择是，该node的安装路径会自动变到对应的nvm安装目录下\n![](images/nvm管理node/nvms3.png)\n* 当 \"`nvm install node版本`\" 时报错，可以改一下node镜像\n![](images/nvm管理node/path2.png)\n\n","slug":"nvm管理node","published":1,"updated":"2025-07-31T09:59:35.012Z","comments":1,"layout":"post","photos":[],"_id":"cmdsas6mo0006ignca1k77mhl","content":"<h4 id=\"1、安装nvm\"><a href=\"#1、安装nvm\" class=\"headerlink\" title=\"1、安装nvm\"></a>1、安装nvm</h4><ul>\n<li><p><a href=\"https://github.com/coreybutler/nvm-windows/releases\">https://github.com/coreybutler/nvm-windows/releases</a><br><img src=\"/images/nvm%E7%AE%A1%E7%90%86node/node.png\"></p>\n</li>\n<li><p>点击<code>.exe</code>文件 -&gt; <code>accept</code> -&gt; nvm的安装路径 (<code>D:\\NVM\\nvm</code>) -&gt; 创建nodejs文件放在<code>D:\\NVM\\nvm</code>下 -&gt; 一直点击<code>next</code>安装完成</p>\n</li>\n</ul>\n<h4 id=\"2、给该文件添加这两行命令\"><a href=\"#2、给该文件添加这两行命令\" class=\"headerlink\" title=\"2、给该文件添加这两行命令\"></a>2、给该文件添加这两行命令</h4><p>node_mirror: <a href=\"https://npm.taobao.org/mirrors/node/\">https://npm.taobao.org/mirrors/node/</a><br>npm_mirror: <a href=\"https://npm.taobao.org/mirrors/npm/\">https://npm.taobao.org/mirrors/npm/</a></p>\n<p><img src=\"/images/nvm%E7%AE%A1%E7%90%86node/nvms1.png\"><br><img src=\"/images/nvm%E7%AE%A1%E7%90%86node/nvms2.png\"></p>\n<h4 id=\"3、配置环境变量\"><a href=\"#3、配置环境变量\" class=\"headerlink\" title=\"3、配置环境变量\"></a>3、配置环境变量</h4><p><img src=\"/images/nvm%E7%AE%A1%E7%90%86node/path1.png\"></p>\n<h4 id=\"4、测试一下\"><a href=\"#4、测试一下\" class=\"headerlink\" title=\"4、测试一下\"></a>4、测试一下</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm -v  // 查看当前版本</span><br><span class=\"line\">nvm --config </span><br><span class=\"line\">nvm <span class=\"built_in\">ls</span> // 查看已安装的node版本</span><br><span class=\"line\">nvm install 版本号  // 下载对应node版本, nvm install 16.16.0</span><br><span class=\"line\">nvm use 版本号 // 切换node版本, nvm use 16.16.0</span><br><span class=\"line\">nvm on  // 开启nvm</span><br><span class=\"line\">nvm off  // 关闭nvm</span><br><span class=\"line\">nvm list available  // 查看node所有可以下载的版本</span><br><span class=\"line\">node -v  // 查看node版本</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Tips-如果原本电脑已安装某个版本的nodejs\"><a href=\"#Tips-如果原本电脑已安装某个版本的nodejs\" class=\"headerlink\" title=\"Tips: 如果原本电脑已安装某个版本的nodejs\"></a>Tips: 如果原本电脑已安装某个版本的nodejs</h4><ul>\n<li>在安装nvm会检测是否安装某个版本的nodejs, 并提示该版本是否需要被nvm管理，如果选择是，该node的安装路径会自动变到对应的nvm安装目录下<br><img src=\"/images/nvm%E7%AE%A1%E7%90%86node/nvms3.png\"></li>\n<li>当 “<code>nvm install node版本</code>“ 时报错，可以改一下node镜像<br><img src=\"/images/nvm%E7%AE%A1%E7%90%86node/path2.png\"></li>\n</ul>\n","excerpt":"","more":"<h4 id=\"1、安装nvm\"><a href=\"#1、安装nvm\" class=\"headerlink\" title=\"1、安装nvm\"></a>1、安装nvm</h4><ul>\n<li><p><a href=\"https://github.com/coreybutler/nvm-windows/releases\">https://github.com/coreybutler/nvm-windows/releases</a><br><img src=\"/images/nvm%E7%AE%A1%E7%90%86node/node.png\"></p>\n</li>\n<li><p>点击<code>.exe</code>文件 -&gt; <code>accept</code> -&gt; nvm的安装路径 (<code>D:\\NVM\\nvm</code>) -&gt; 创建nodejs文件放在<code>D:\\NVM\\nvm</code>下 -&gt; 一直点击<code>next</code>安装完成</p>\n</li>\n</ul>\n<h4 id=\"2、给该文件添加这两行命令\"><a href=\"#2、给该文件添加这两行命令\" class=\"headerlink\" title=\"2、给该文件添加这两行命令\"></a>2、给该文件添加这两行命令</h4><p>node_mirror: <a href=\"https://npm.taobao.org/mirrors/node/\">https://npm.taobao.org/mirrors/node/</a><br>npm_mirror: <a href=\"https://npm.taobao.org/mirrors/npm/\">https://npm.taobao.org/mirrors/npm/</a></p>\n<p><img src=\"/images/nvm%E7%AE%A1%E7%90%86node/nvms1.png\"><br><img src=\"/images/nvm%E7%AE%A1%E7%90%86node/nvms2.png\"></p>\n<h4 id=\"3、配置环境变量\"><a href=\"#3、配置环境变量\" class=\"headerlink\" title=\"3、配置环境变量\"></a>3、配置环境变量</h4><p><img src=\"/images/nvm%E7%AE%A1%E7%90%86node/path1.png\"></p>\n<h4 id=\"4、测试一下\"><a href=\"#4、测试一下\" class=\"headerlink\" title=\"4、测试一下\"></a>4、测试一下</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm -v  // 查看当前版本</span><br><span class=\"line\">nvm --config </span><br><span class=\"line\">nvm <span class=\"built_in\">ls</span> // 查看已安装的node版本</span><br><span class=\"line\">nvm install 版本号  // 下载对应node版本, nvm install 16.16.0</span><br><span class=\"line\">nvm use 版本号 // 切换node版本, nvm use 16.16.0</span><br><span class=\"line\">nvm on  // 开启nvm</span><br><span class=\"line\">nvm off  // 关闭nvm</span><br><span class=\"line\">nvm list available  // 查看node所有可以下载的版本</span><br><span class=\"line\">node -v  // 查看node版本</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Tips-如果原本电脑已安装某个版本的nodejs\"><a href=\"#Tips-如果原本电脑已安装某个版本的nodejs\" class=\"headerlink\" title=\"Tips: 如果原本电脑已安装某个版本的nodejs\"></a>Tips: 如果原本电脑已安装某个版本的nodejs</h4><ul>\n<li>在安装nvm会检测是否安装某个版本的nodejs, 并提示该版本是否需要被nvm管理，如果选择是，该node的安装路径会自动变到对应的nvm安装目录下<br><img src=\"/images/nvm%E7%AE%A1%E7%90%86node/nvms3.png\"></li>\n<li>当 “<code>nvm install node版本</code>“ 时报错，可以改一下node镜像<br><img src=\"/images/nvm%E7%AE%A1%E7%90%86node/path2.png\"></li>\n</ul>\n"},{"title":"我的第一篇博客","date":"2025-07-11T06:55:44.000Z","_content":"\n## 微前端\n微前端：（拆分与整合）将大型前端应用按业务模块（如电商的商品、订单、支付模块）拆分为子应用，每个子应用可使用不同的技术栈（Vue、React 等）独立开发/部署/维护/更新[模块化性/独立性]，最后整合成这个大项目。\n\n## 前端\n独立的一个项目，浏览器端的网页、单页应用（SPA）、移动端 H5 页面等。\n\n## 大前端\n（跨平台开发）大前端是前端技术的扩展与延伸，指通过一套前端技术栈（主要是 JS/TS）覆盖更多平台和场景，打破传统前端仅局限于浏览器的边界，如：uniapp跨平台开发框架。\n","source":"_posts/2025-07-11-我的第一篇博客.md","raw":"---\ntitle: 我的第一篇博客\ndate: 2025-07-11 14:55:44\ntags:\n---\n\n## 微前端\n微前端：（拆分与整合）将大型前端应用按业务模块（如电商的商品、订单、支付模块）拆分为子应用，每个子应用可使用不同的技术栈（Vue、React 等）独立开发/部署/维护/更新[模块化性/独立性]，最后整合成这个大项目。\n\n## 前端\n独立的一个项目，浏览器端的网页、单页应用（SPA）、移动端 H5 页面等。\n\n## 大前端\n（跨平台开发）大前端是前端技术的扩展与延伸，指通过一套前端技术栈（主要是 JS/TS）覆盖更多平台和场景，打破传统前端仅局限于浏览器的边界，如：uniapp跨平台开发框架。\n","slug":"我的第一篇博客","published":1,"updated":"2025-07-23T07:14:48.532Z","comments":1,"layout":"post","photos":[],"_id":"cmdsas6mq0009igncfzljglsl","content":"<h2 id=\"微前端\"><a href=\"#微前端\" class=\"headerlink\" title=\"微前端\"></a>微前端</h2><p>微前端：（拆分与整合）将大型前端应用按业务模块（如电商的商品、订单、支付模块）拆分为子应用，每个子应用可使用不同的技术栈（Vue、React 等）独立开发&#x2F;部署&#x2F;维护&#x2F;更新[模块化性&#x2F;独立性]，最后整合成这个大项目。</p>\n<h2 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h2><p>独立的一个项目，浏览器端的网页、单页应用（SPA）、移动端 H5 页面等。</p>\n<h2 id=\"大前端\"><a href=\"#大前端\" class=\"headerlink\" title=\"大前端\"></a>大前端</h2><p>（跨平台开发）大前端是前端技术的扩展与延伸，指通过一套前端技术栈（主要是 JS&#x2F;TS）覆盖更多平台和场景，打破传统前端仅局限于浏览器的边界，如：uniapp跨平台开发框架。</p>\n","excerpt":"","more":"<h2 id=\"微前端\"><a href=\"#微前端\" class=\"headerlink\" title=\"微前端\"></a>微前端</h2><p>微前端：（拆分与整合）将大型前端应用按业务模块（如电商的商品、订单、支付模块）拆分为子应用，每个子应用可使用不同的技术栈（Vue、React 等）独立开发&#x2F;部署&#x2F;维护&#x2F;更新[模块化性&#x2F;独立性]，最后整合成这个大项目。</p>\n<h2 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h2><p>独立的一个项目，浏览器端的网页、单页应用（SPA）、移动端 H5 页面等。</p>\n<h2 id=\"大前端\"><a href=\"#大前端\" class=\"headerlink\" title=\"大前端\"></a>大前端</h2><p>（跨平台开发）大前端是前端技术的扩展与延伸，指通过一套前端技术栈（主要是 JS&#x2F;TS）覆盖更多平台和场景，打破传统前端仅局限于浏览器的边界，如：uniapp跨平台开发框架。</p>\n"},{"title":"get/post入参格式","date":"2025-07-16T02:47:10.000Z","cover":"/images/get-post入参格式/cover.jpg","_content":"\n#### 1、get 请求：\n\n- 用 params 入参\n\n- 数据传递方式：通过 URL 形式参数传递，拼接在请求地址上\n\n- GET 请求是否可以设置  Content-Type？\n  - 可以设置，但通常没有意义，因为 GET 请求的请求体通常为空。\n  - 如果强行设置  Content-Type，浏览器和服务器可能会忽略它。\n\n    ![](/images/get-post入参格式/get.png)\n\n### 2、post 请求：\n\n（1）用 data 传参，data：普通对象、FormData 表单对象\n\n（2）在前端开发中，发送 POST 请求时，正确设置 Content-Type 是非常重要的，因为它告诉服务器请求体的数据格式。\n\n- `application/json` 发送 JSON 格式的数据\n\n```javascript\nexport function submitCollectRecordDetail() {\n\tconst data = {\n\t\tsessionId: 'xzdfsd',\n\t\tlanguageCode: 'CH',\n\t\titemCode: 'AMC',\n\t}\n\treturn request({\n\t\turl: '/apiGlobal/submitCollectRecordDetail',\n\t\tmethod: 'post',\n\t\tdata: data,\n\t\theaders: {\n\t\t\t'Content-Type': 'application/josn;charset=UTF-8',\n\t\t},\n\t})\n}\n```\n\n![](/images/get-post入参格式/json1.png)\n![](/images/get-post入参格式/json2.png)\n![](/images/get-post入参格式/json3.png)\n\n- `application/x-www-form-urlencoded` 发送表单数据，键值对格式【`URLSearchParams`】 key1=value1&key2=value2\n\n```javascript\nexport function submitCollectRecordDetail(data) {\n\tdata = {\n\t\tsessionId: store.state.MyToken,\n\t\tlanguageCode: store.state.lKey,\n\t\titemCode: store.state.itemCode,\n\t\t...data,\n\t}\n\tdata = new URLSearchParams(data).toString()\n\treturn request({\n\t\turl: '/apiGlobal/submitCollectRecordDetail',\n\t\tmethod: 'post',\n\t\tdata: data,\n\t\theaders: {\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\n\t\t},\n\t})\n}\n```\n\n![](/images/get-post入参格式/urlencoded1.png)\n![](/images/get-post入参格式/urlencoded2.png)\n![](/images/get-post入参格式/urlencoded3.png)\n\n- `multipart/form-data` 发送表单数据，支持文件上传\n\n```javascript\nexport function submitCollectRecordDetail(data) {\n\tdata = {\n\t\tsessionId: store.state.MyToken,\n\t\tlanguageCode: store.state.lKey,\n\t\titemCode: store.state.itemCode,\n\t\t...data,\n\t}\n\tlet obj = new FormData()\n\tObject.keys(data).forEach((key) => {\n\t\tobj.append(key, data[key])\n\t})\n\treturn request({\n\t\turl: '/apiGlobal/submitCollectRecordDetail',\n\t\tmethod: 'post',\n\t\tdata: obj,\n\t\theaders: {\n\t\t\t'Content-Type': 'multipart/form-data',\n\t\t},\n\t})\n}\n```\n\n![](/images/get-post入参格式/formdata1.png)\n![](/images/get-post入参格式/formdata2.png)\n![](/images/get-post入参格式/formdata3.png)\n\n#### 注意事项：\n\n- `multipart/form-data`  的  Content-Type：\n  使用  FormData  时，不要手动设置  Content-Type，浏览器会自动添加正确的  Content-Type  和边界（boundary）。\n\n- 字符编码：如果需要指定字符编码，可以在  Content-Type  中添加  charset\n  例如：`Content-Type: application/json;charset=UTF-8`\n\n- CORS 请求：\n  如果跨域请求，确保服务器支持  Content-Type，并在响应头中设置  `Access-Control-Allow-Headers`\n\n- Postman 中看数据：\n  Get 请求，params 入参，在 params 中查看数据\n  ![](/images/get-post入参格式/params.png)\n  Post 请求，data 入参，在 body 中查看数据，还有数据格式(Content-Type 决定数据格式)\n  ![](/images/get-post入参格式/bodyData.png)\n","source":"_posts/2025-07-16-get-post入参格式.md","raw":"---\ntitle: get/post入参格式\ndate: 2025-07-16 10:47:10\ntags:\n  - axios\n  - get\n  - post\ncover: /images/get-post入参格式/cover.jpg\ncategories: axios\n---\n\n#### 1、get 请求：\n\n- 用 params 入参\n\n- 数据传递方式：通过 URL 形式参数传递，拼接在请求地址上\n\n- GET 请求是否可以设置  Content-Type？\n  - 可以设置，但通常没有意义，因为 GET 请求的请求体通常为空。\n  - 如果强行设置  Content-Type，浏览器和服务器可能会忽略它。\n\n    ![](/images/get-post入参格式/get.png)\n\n### 2、post 请求：\n\n（1）用 data 传参，data：普通对象、FormData 表单对象\n\n（2）在前端开发中，发送 POST 请求时，正确设置 Content-Type 是非常重要的，因为它告诉服务器请求体的数据格式。\n\n- `application/json` 发送 JSON 格式的数据\n\n```javascript\nexport function submitCollectRecordDetail() {\n\tconst data = {\n\t\tsessionId: 'xzdfsd',\n\t\tlanguageCode: 'CH',\n\t\titemCode: 'AMC',\n\t}\n\treturn request({\n\t\turl: '/apiGlobal/submitCollectRecordDetail',\n\t\tmethod: 'post',\n\t\tdata: data,\n\t\theaders: {\n\t\t\t'Content-Type': 'application/josn;charset=UTF-8',\n\t\t},\n\t})\n}\n```\n\n![](/images/get-post入参格式/json1.png)\n![](/images/get-post入参格式/json2.png)\n![](/images/get-post入参格式/json3.png)\n\n- `application/x-www-form-urlencoded` 发送表单数据，键值对格式【`URLSearchParams`】 key1=value1&key2=value2\n\n```javascript\nexport function submitCollectRecordDetail(data) {\n\tdata = {\n\t\tsessionId: store.state.MyToken,\n\t\tlanguageCode: store.state.lKey,\n\t\titemCode: store.state.itemCode,\n\t\t...data,\n\t}\n\tdata = new URLSearchParams(data).toString()\n\treturn request({\n\t\turl: '/apiGlobal/submitCollectRecordDetail',\n\t\tmethod: 'post',\n\t\tdata: data,\n\t\theaders: {\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\n\t\t},\n\t})\n}\n```\n\n![](/images/get-post入参格式/urlencoded1.png)\n![](/images/get-post入参格式/urlencoded2.png)\n![](/images/get-post入参格式/urlencoded3.png)\n\n- `multipart/form-data` 发送表单数据，支持文件上传\n\n```javascript\nexport function submitCollectRecordDetail(data) {\n\tdata = {\n\t\tsessionId: store.state.MyToken,\n\t\tlanguageCode: store.state.lKey,\n\t\titemCode: store.state.itemCode,\n\t\t...data,\n\t}\n\tlet obj = new FormData()\n\tObject.keys(data).forEach((key) => {\n\t\tobj.append(key, data[key])\n\t})\n\treturn request({\n\t\turl: '/apiGlobal/submitCollectRecordDetail',\n\t\tmethod: 'post',\n\t\tdata: obj,\n\t\theaders: {\n\t\t\t'Content-Type': 'multipart/form-data',\n\t\t},\n\t})\n}\n```\n\n![](/images/get-post入参格式/formdata1.png)\n![](/images/get-post入参格式/formdata2.png)\n![](/images/get-post入参格式/formdata3.png)\n\n#### 注意事项：\n\n- `multipart/form-data`  的  Content-Type：\n  使用  FormData  时，不要手动设置  Content-Type，浏览器会自动添加正确的  Content-Type  和边界（boundary）。\n\n- 字符编码：如果需要指定字符编码，可以在  Content-Type  中添加  charset\n  例如：`Content-Type: application/json;charset=UTF-8`\n\n- CORS 请求：\n  如果跨域请求，确保服务器支持  Content-Type，并在响应头中设置  `Access-Control-Allow-Headers`\n\n- Postman 中看数据：\n  Get 请求，params 入参，在 params 中查看数据\n  ![](/images/get-post入参格式/params.png)\n  Post 请求，data 入参，在 body 中查看数据，还有数据格式(Content-Type 决定数据格式)\n  ![](/images/get-post入参格式/bodyData.png)\n","slug":"get-post入参格式","published":1,"updated":"2025-07-31T09:59:35.014Z","comments":1,"layout":"post","photos":[],"_id":"cmdsas6mr000bignc1shgahmf","content":"<h4 id=\"1、get-请求：\"><a href=\"#1、get-请求：\" class=\"headerlink\" title=\"1、get 请求：\"></a>1、get 请求：</h4><ul>\n<li><p>用 params 入参</p>\n</li>\n<li><p>数据传递方式：通过 URL 形式参数传递，拼接在请求地址上</p>\n</li>\n<li><p>GET 请求是否可以设置  Content-Type？</p>\n<ul>\n<li><p>可以设置，但通常没有意义，因为 GET 请求的请求体通常为空。</p>\n</li>\n<li><p>如果强行设置  Content-Type，浏览器和服务器可能会忽略它。</p>\n<p><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/get.png\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2、post-请求：\"><a href=\"#2、post-请求：\" class=\"headerlink\" title=\"2、post 请求：\"></a>2、post 请求：</h3><p>（1）用 data 传参，data：普通对象、FormData 表单对象</p>\n<p>（2）在前端开发中，发送 POST 请求时，正确设置 Content-Type 是非常重要的，因为它告诉服务器请求体的数据格式。</p>\n<ul>\n<li><code>application/json</code> 发送 JSON 格式的数据</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">submitCollectRecordDetail</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">sessionId</span>: <span class=\"string\">&#x27;xzdfsd&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">languageCode</span>: <span class=\"string\">&#x27;CH&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">itemCode</span>: <span class=\"string\">&#x27;AMC&#x27;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">url</span>: <span class=\"string\">&#x27;/apiGlobal/submitCollectRecordDetail&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">data</span>: data,</span><br><span class=\"line\">\t\t<span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/josn;charset=UTF-8&#x27;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/json1.png\"><br><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/json2.png\"><br><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/json3.png\"></p>\n<ul>\n<li><code>application/x-www-form-urlencoded</code> 发送表单数据，键值对格式【<code>URLSearchParams</code>】 key1&#x3D;value1&amp;key2&#x3D;value2</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">submitCollectRecordDetail</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">\tdata = &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">sessionId</span>: store.<span class=\"property\">state</span>.<span class=\"property\">MyToken</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">languageCode</span>: store.<span class=\"property\">state</span>.<span class=\"property\">lKey</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">itemCode</span>: store.<span class=\"property\">state</span>.<span class=\"property\">itemCode</span>,</span><br><span class=\"line\">\t\t...data,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdata = <span class=\"keyword\">new</span> <span class=\"title class_\">URLSearchParams</span>(data).<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">url</span>: <span class=\"string\">&#x27;/apiGlobal/submitCollectRecordDetail&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">data</span>: data,</span><br><span class=\"line\">\t\t<span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/urlencoded1.png\"><br><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/urlencoded2.png\"><br><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/urlencoded3.png\"></p>\n<ul>\n<li><code>multipart/form-data</code> 发送表单数据，支持文件上传</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">submitCollectRecordDetail</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">\tdata = &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">sessionId</span>: store.<span class=\"property\">state</span>.<span class=\"property\">MyToken</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">languageCode</span>: store.<span class=\"property\">state</span>.<span class=\"property\">lKey</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">itemCode</span>: store.<span class=\"property\">state</span>.<span class=\"property\">itemCode</span>,</span><br><span class=\"line\">\t\t...data,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>()</span><br><span class=\"line\">\t<span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(data).<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\tobj.<span class=\"title function_\">append</span>(key, data[key])</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">url</span>: <span class=\"string\">&#x27;/apiGlobal/submitCollectRecordDetail&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">data</span>: obj,</span><br><span class=\"line\">\t\t<span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;multipart/form-data&#x27;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/formdata1.png\"><br><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/formdata2.png\"><br><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/formdata3.png\"></p>\n<h4 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h4><ul>\n<li><p><code>multipart/form-data</code>  的  Content-Type：<br>使用  FormData  时，不要手动设置  Content-Type，浏览器会自动添加正确的  Content-Type  和边界（boundary）。</p>\n</li>\n<li><p>字符编码：如果需要指定字符编码，可以在  Content-Type  中添加  charset<br>例如：<code>Content-Type: application/json;charset=UTF-8</code></p>\n</li>\n<li><p>CORS 请求：<br>如果跨域请求，确保服务器支持  Content-Type，并在响应头中设置  <code>Access-Control-Allow-Headers</code></p>\n</li>\n<li><p>Postman 中看数据：<br>Get 请求，params 入参，在 params 中查看数据<br><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/params.png\"><br>Post 请求，data 入参，在 body 中查看数据，还有数据格式(Content-Type 决定数据格式)<br><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/bodyData.png\"></p>\n</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"1、get-请求：\"><a href=\"#1、get-请求：\" class=\"headerlink\" title=\"1、get 请求：\"></a>1、get 请求：</h4><ul>\n<li><p>用 params 入参</p>\n</li>\n<li><p>数据传递方式：通过 URL 形式参数传递，拼接在请求地址上</p>\n</li>\n<li><p>GET 请求是否可以设置  Content-Type？</p>\n<ul>\n<li><p>可以设置，但通常没有意义，因为 GET 请求的请求体通常为空。</p>\n</li>\n<li><p>如果强行设置  Content-Type，浏览器和服务器可能会忽略它。</p>\n<p><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/get.png\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2、post-请求：\"><a href=\"#2、post-请求：\" class=\"headerlink\" title=\"2、post 请求：\"></a>2、post 请求：</h3><p>（1）用 data 传参，data：普通对象、FormData 表单对象</p>\n<p>（2）在前端开发中，发送 POST 请求时，正确设置 Content-Type 是非常重要的，因为它告诉服务器请求体的数据格式。</p>\n<ul>\n<li><code>application/json</code> 发送 JSON 格式的数据</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">submitCollectRecordDetail</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">sessionId</span>: <span class=\"string\">&#x27;xzdfsd&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">languageCode</span>: <span class=\"string\">&#x27;CH&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">itemCode</span>: <span class=\"string\">&#x27;AMC&#x27;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">url</span>: <span class=\"string\">&#x27;/apiGlobal/submitCollectRecordDetail&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">data</span>: data,</span><br><span class=\"line\">\t\t<span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/josn;charset=UTF-8&#x27;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/json1.png\"><br><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/json2.png\"><br><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/json3.png\"></p>\n<ul>\n<li><code>application/x-www-form-urlencoded</code> 发送表单数据，键值对格式【<code>URLSearchParams</code>】 key1&#x3D;value1&amp;key2&#x3D;value2</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">submitCollectRecordDetail</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">\tdata = &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">sessionId</span>: store.<span class=\"property\">state</span>.<span class=\"property\">MyToken</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">languageCode</span>: store.<span class=\"property\">state</span>.<span class=\"property\">lKey</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">itemCode</span>: store.<span class=\"property\">state</span>.<span class=\"property\">itemCode</span>,</span><br><span class=\"line\">\t\t...data,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdata = <span class=\"keyword\">new</span> <span class=\"title class_\">URLSearchParams</span>(data).<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">url</span>: <span class=\"string\">&#x27;/apiGlobal/submitCollectRecordDetail&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">data</span>: data,</span><br><span class=\"line\">\t\t<span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/urlencoded1.png\"><br><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/urlencoded2.png\"><br><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/urlencoded3.png\"></p>\n<ul>\n<li><code>multipart/form-data</code> 发送表单数据，支持文件上传</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">submitCollectRecordDetail</span>(<span class=\"params\">data</span>) &#123;</span><br><span class=\"line\">\tdata = &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">sessionId</span>: store.<span class=\"property\">state</span>.<span class=\"property\">MyToken</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">languageCode</span>: store.<span class=\"property\">state</span>.<span class=\"property\">lKey</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">itemCode</span>: store.<span class=\"property\">state</span>.<span class=\"property\">itemCode</span>,</span><br><span class=\"line\">\t\t...data,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">FormData</span>()</span><br><span class=\"line\">\t<span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(data).<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\tobj.<span class=\"title function_\">append</span>(key, data[key])</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">url</span>: <span class=\"string\">&#x27;/apiGlobal/submitCollectRecordDetail&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">method</span>: <span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"attr\">data</span>: obj,</span><br><span class=\"line\">\t\t<span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;multipart/form-data&#x27;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/formdata1.png\"><br><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/formdata2.png\"><br><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/formdata3.png\"></p>\n<h4 id=\"注意事项：\"><a href=\"#注意事项：\" class=\"headerlink\" title=\"注意事项：\"></a>注意事项：</h4><ul>\n<li><p><code>multipart/form-data</code>  的  Content-Type：<br>使用  FormData  时，不要手动设置  Content-Type，浏览器会自动添加正确的  Content-Type  和边界（boundary）。</p>\n</li>\n<li><p>字符编码：如果需要指定字符编码，可以在  Content-Type  中添加  charset<br>例如：<code>Content-Type: application/json;charset=UTF-8</code></p>\n</li>\n<li><p>CORS 请求：<br>如果跨域请求，确保服务器支持  Content-Type，并在响应头中设置  <code>Access-Control-Allow-Headers</code></p>\n</li>\n<li><p>Postman 中看数据：<br>Get 请求，params 入参，在 params 中查看数据<br><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/params.png\"><br>Post 请求，data 入参，在 body 中查看数据，还有数据格式(Content-Type 决定数据格式)<br><img src=\"/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/bodyData.png\"></p>\n</li>\n</ul>\n"},{"title":"js判断数据类型","date":"2025-07-23T07:20:50.000Z","_content":"\n### typeof A 判断数据类型\n\n```javascript\n// 数字\nconsole.log(typeof 42) // \"number\"\n// 字符串\nconsole.log(typeof 'Hello, world!') // \"string\"\n// 布尔值\nconsole.log(typeof true) // \"boolean\"\n// 未定义\nconsole.log(typeof undefined) // \"undefined\"\n// 空值\nconsole.log(typeof null) // \"object\" (这是一个历史遗留问题)\n// 对象\nconsole.log(typeof { name: 'Alice', age: 25 }) // \"object\"\n// 数组\nconsole.log(typeof [1, 2, 3]) // \"object\" (数组也是对象)\n// 函数\nconsole.log(typeof function () {}) // \"function\"\n// Symbol\nconsole.log(typeof Symbol('symbol')) // \"symbol\"\n// BigInt\nconsole.log(typeof 123n) // \"bigint\"\n```\n\n【注意】\n（1）typeof null  返回  \"object\"  是一个 JavaScript 的历史遗留问题\n（2）数组也是对象，所以  typeof []  也会返回  \"object\"\n\n### A instanceof B 判断数据类型\n\n- instanceof  用于判断一个对象是否是另一个对象的实例\n- instanceof  对于内置对象类型和自定义类都有效\n- instanceof  对于原始类型无效，但可以通过构造函数包装对象进行判断\n\n```javascript\n// 创建一个构造函数\nfunction Person(name) {\n\tthis.name = name\n}\n// 创建一个实例\nconst alice = new Person('Alice')\n// 判断实例与构造函数的关系\nconsole.log(alice instanceof Person) // true\n\n// 判断内置对象类型\nconsole.log([] instanceof Array) // true\nconsole.log({} instanceof Object) // true\nconsole.log(new Date() instanceof Date) // true\nconsole.log(/regex/ instanceof RegExp) // true\n// 自定义类\nclass Animal {}\nclass Dog extends Animal {}\nconst myDog = new Dog()\nconsole.log(myDog instanceof Dog) // true\nconsole.log(myDog instanceof Animal) // true\nconsole.log(myDog instanceof Object) // true\n\n// 注意 `instanceof` 只对对象有效，对原始类型无效\nconsole.log(42 instanceof Number) // false\nconsole.log('Hello' instanceof String) // false\nconsole.log(true instanceof Boolean) // false\n\n// 对于原始类型，可以使用构造函数包装对象进行判断\nconsole.log(new Number(42) instanceof Number) // true\nconsole.log(new String('Hello') instanceof String) // true\nconsole.log(new Boolean(true) instanceof Boolean) // true\nnull instanceof null // 控制台报错：右侧不是对象\n```\n\n### Array.isArray(value)：专门用于判断一个值是否为数组\n\n```javascript\n// 数组\nconsole.log(Array.isArray([1, 2, 3])) // true\n// 对象\nconsole.log(Array.isArray({ name: 'Alice', age: 25 })) // false\n// 字符串\nconsole.log(Array.isArray('Hello, world!')) // false\n// 数字\nconsole.log(Array.isArray(42)) // false\n// 布尔值\nconsole.log(Array.isArray(true)) // false\n// null\nconsole.log(Array.isArray(null)) // false\n// undefined\nconsole.log(Array.isArray(undefined)) // false\n// 函数\nconsole.log(Array.isArray(function () {})) // false\n// Date 对象\nconsole.log(Array.isArray(new Date())) // false\n// 正则表达式\nconsole.log(Array.isArray(/regex/)) // false\n```\n\n### 判断是否为数组的方法\n\n- 推荐使用 Array.isArray(arr)方法，它是最简洁和可靠的，Es6 专门为此设计的方法\n- A instanceof B\n  const value = [1, 2, 3];\n  console.log(value instanceof Array); // true\n- Object.prototype.toString，是一种老方法，通常不再推荐使用\n  const value = [1, 2, 3];\n  console.log(Object.prototype.toString.call(value) === '[object Array]'); // true\n\n### Object.is(a,b)\n\n- 在 JavaScript 中用于判断两个值是否严格相等。它与===（严格相等）有一些细微的区别\n\n```javascript\n// 数字\nconsole.log(Object.is(42, 42)) // true\nconsole.log(Object.is(0, -0)) // false\nconsole.log(Object.is(NaN, NaN)) // true\n// 字符串\nconsole.log(Object.is('hello', 'hello')) // true\nconsole.log(Object.is('hello', 'world')) // false\n// 布尔值\nconsole.log(Object.is(true, true)) // true\nconsole.log(Object.is(true, false)) // false\n// 对象\nconst obj1 = { a: 1 }\nconst obj2 = { a: 1 }\nconsole.log(Object.is(obj1, obj1)) // true\nconsole.log(Object.is(obj1, obj2)) // false\n// 数组\nconst arr1 = [1, 2, 3]\nconst arr2 = [1, 2, 3]\nconsole.log(Object.is(arr1, arr1)) // true\nconsole.log(Object.is(arr1, arr2)) // false\n// undefined 和 null\nconsole.log(Object.is(undefined, undefined)) // true\nconsole.log(Object.is(null, null)) // true\nconsole.log(Object.is(undefined, null)) // false\n// 不同类型\nconsole.log(Object.is(42, '42')) // false\nconsole.log(Object.is(true, 1)) // false\nconsole.log(Object.is({}, [])) // false\n```\n\n总结：\n\n- Object.is  方法用于判断两个值是否严格相等\n- 与  ===  的主要区别是：Object.is  认为  +0  和  -0  不相等，而认为  NaN  和  NaN  相等\n","source":"_posts/2025-07-23-js判断数据类型.md","raw":"---\ntitle: js判断数据类型\ndate: 2025-07-23 15:20:50\ntags:\ncategories: Javascript\n---\n\n### typeof A 判断数据类型\n\n```javascript\n// 数字\nconsole.log(typeof 42) // \"number\"\n// 字符串\nconsole.log(typeof 'Hello, world!') // \"string\"\n// 布尔值\nconsole.log(typeof true) // \"boolean\"\n// 未定义\nconsole.log(typeof undefined) // \"undefined\"\n// 空值\nconsole.log(typeof null) // \"object\" (这是一个历史遗留问题)\n// 对象\nconsole.log(typeof { name: 'Alice', age: 25 }) // \"object\"\n// 数组\nconsole.log(typeof [1, 2, 3]) // \"object\" (数组也是对象)\n// 函数\nconsole.log(typeof function () {}) // \"function\"\n// Symbol\nconsole.log(typeof Symbol('symbol')) // \"symbol\"\n// BigInt\nconsole.log(typeof 123n) // \"bigint\"\n```\n\n【注意】\n（1）typeof null  返回  \"object\"  是一个 JavaScript 的历史遗留问题\n（2）数组也是对象，所以  typeof []  也会返回  \"object\"\n\n### A instanceof B 判断数据类型\n\n- instanceof  用于判断一个对象是否是另一个对象的实例\n- instanceof  对于内置对象类型和自定义类都有效\n- instanceof  对于原始类型无效，但可以通过构造函数包装对象进行判断\n\n```javascript\n// 创建一个构造函数\nfunction Person(name) {\n\tthis.name = name\n}\n// 创建一个实例\nconst alice = new Person('Alice')\n// 判断实例与构造函数的关系\nconsole.log(alice instanceof Person) // true\n\n// 判断内置对象类型\nconsole.log([] instanceof Array) // true\nconsole.log({} instanceof Object) // true\nconsole.log(new Date() instanceof Date) // true\nconsole.log(/regex/ instanceof RegExp) // true\n// 自定义类\nclass Animal {}\nclass Dog extends Animal {}\nconst myDog = new Dog()\nconsole.log(myDog instanceof Dog) // true\nconsole.log(myDog instanceof Animal) // true\nconsole.log(myDog instanceof Object) // true\n\n// 注意 `instanceof` 只对对象有效，对原始类型无效\nconsole.log(42 instanceof Number) // false\nconsole.log('Hello' instanceof String) // false\nconsole.log(true instanceof Boolean) // false\n\n// 对于原始类型，可以使用构造函数包装对象进行判断\nconsole.log(new Number(42) instanceof Number) // true\nconsole.log(new String('Hello') instanceof String) // true\nconsole.log(new Boolean(true) instanceof Boolean) // true\nnull instanceof null // 控制台报错：右侧不是对象\n```\n\n### Array.isArray(value)：专门用于判断一个值是否为数组\n\n```javascript\n// 数组\nconsole.log(Array.isArray([1, 2, 3])) // true\n// 对象\nconsole.log(Array.isArray({ name: 'Alice', age: 25 })) // false\n// 字符串\nconsole.log(Array.isArray('Hello, world!')) // false\n// 数字\nconsole.log(Array.isArray(42)) // false\n// 布尔值\nconsole.log(Array.isArray(true)) // false\n// null\nconsole.log(Array.isArray(null)) // false\n// undefined\nconsole.log(Array.isArray(undefined)) // false\n// 函数\nconsole.log(Array.isArray(function () {})) // false\n// Date 对象\nconsole.log(Array.isArray(new Date())) // false\n// 正则表达式\nconsole.log(Array.isArray(/regex/)) // false\n```\n\n### 判断是否为数组的方法\n\n- 推荐使用 Array.isArray(arr)方法，它是最简洁和可靠的，Es6 专门为此设计的方法\n- A instanceof B\n  const value = [1, 2, 3];\n  console.log(value instanceof Array); // true\n- Object.prototype.toString，是一种老方法，通常不再推荐使用\n  const value = [1, 2, 3];\n  console.log(Object.prototype.toString.call(value) === '[object Array]'); // true\n\n### Object.is(a,b)\n\n- 在 JavaScript 中用于判断两个值是否严格相等。它与===（严格相等）有一些细微的区别\n\n```javascript\n// 数字\nconsole.log(Object.is(42, 42)) // true\nconsole.log(Object.is(0, -0)) // false\nconsole.log(Object.is(NaN, NaN)) // true\n// 字符串\nconsole.log(Object.is('hello', 'hello')) // true\nconsole.log(Object.is('hello', 'world')) // false\n// 布尔值\nconsole.log(Object.is(true, true)) // true\nconsole.log(Object.is(true, false)) // false\n// 对象\nconst obj1 = { a: 1 }\nconst obj2 = { a: 1 }\nconsole.log(Object.is(obj1, obj1)) // true\nconsole.log(Object.is(obj1, obj2)) // false\n// 数组\nconst arr1 = [1, 2, 3]\nconst arr2 = [1, 2, 3]\nconsole.log(Object.is(arr1, arr1)) // true\nconsole.log(Object.is(arr1, arr2)) // false\n// undefined 和 null\nconsole.log(Object.is(undefined, undefined)) // true\nconsole.log(Object.is(null, null)) // true\nconsole.log(Object.is(undefined, null)) // false\n// 不同类型\nconsole.log(Object.is(42, '42')) // false\nconsole.log(Object.is(true, 1)) // false\nconsole.log(Object.is({}, [])) // false\n```\n\n总结：\n\n- Object.is  方法用于判断两个值是否严格相等\n- 与  ===  的主要区别是：Object.is  认为  +0  和  -0  不相等，而认为  NaN  和  NaN  相等\n","slug":"js判断数据类型","published":1,"updated":"2025-07-24T02:54:21.104Z","comments":1,"layout":"post","photos":[],"_id":"cmdsas6mt000eigncdfswbh7d","content":"<h3 id=\"typeof-A-判断数据类型\"><a href=\"#typeof-A-判断数据类型\" class=\"headerlink\" title=\"typeof A 判断数据类型\"></a>typeof A 判断数据类型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数字</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"number\">42</span>) <span class=\"comment\">// &quot;number&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 字符串</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;Hello, world!&#x27;</span>) <span class=\"comment\">// &quot;string&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 布尔值</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>) <span class=\"comment\">// &quot;boolean&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 未定义</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>) <span class=\"comment\">// &quot;undefined&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 空值</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>) <span class=\"comment\">// &quot;object&quot; (这是一个历史遗留问题)</span></span><br><span class=\"line\"><span class=\"comment\">// 对象</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> &#125;) <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 数组</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) <span class=\"comment\">// &quot;object&quot; (数组也是对象)</span></span><br><span class=\"line\"><span class=\"comment\">// 函数</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;) <span class=\"comment\">// &quot;function&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// Symbol</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;symbol&#x27;</span>)) <span class=\"comment\">// &quot;symbol&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// BigInt</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"number\">123n</span>) <span class=\"comment\">// &quot;bigint&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>【注意】<br>（1）typeof null  返回  “object”  是一个 JavaScript 的历史遗留问题<br>（2）数组也是对象，所以  typeof []  也会返回  “object”</p>\n<h3 id=\"A-instanceof-B-判断数据类型\"><a href=\"#A-instanceof-B-判断数据类型\" class=\"headerlink\" title=\"A instanceof B 判断数据类型\"></a>A instanceof B 判断数据类型</h3><ul>\n<li>instanceof  用于判断一个对象是否是另一个对象的实例</li>\n<li>instanceof  对于内置对象类型和自定义类都有效</li>\n<li>instanceof  对于原始类型无效，但可以通过构造函数包装对象进行判断</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 创建一个实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> alice = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;Alice&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 判断实例与构造函数的关系</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(alice <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Person</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断内置对象类型</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>() <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Date</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"regexp\">/regex/</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">RegExp</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 自定义类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myDog = <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDog <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Dog</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDog <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Animal</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDog <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意 `instanceof` 只对对象有效，对原始类型无效</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">42</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Number</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello&#x27;</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">String</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">true</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Boolean</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对于原始类型，可以使用构造函数包装对象进行判断</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>(<span class=\"number\">42</span>) <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Number</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&#x27;Hello&#x27;</span>) <span class=\"keyword\">instanceof</span> <span class=\"title class_\">String</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"literal\">true</span>) <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Boolean</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">null</span> <span class=\"keyword\">instanceof</span> <span class=\"literal\">null</span> <span class=\"comment\">// 控制台报错：右侧不是对象</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-isArray-value-：专门用于判断一个值是否为数组\"><a href=\"#Array-isArray-value-：专门用于判断一个值是否为数组\" class=\"headerlink\" title=\"Array.isArray(value)：专门用于判断一个值是否为数组\"></a>Array.isArray(value)：专门用于判断一个值是否为数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 对象</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> &#125;)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 字符串</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"string\">&#x27;Hello, world!&#x27;</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 数字</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"number\">42</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 布尔值</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"literal\">true</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// null</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"literal\">null</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"literal\">undefined</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 函数</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// Date 对象</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>())) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 正则表达式</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"regexp\">/regex/</span>)) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判断是否为数组的方法\"><a href=\"#判断是否为数组的方法\" class=\"headerlink\" title=\"判断是否为数组的方法\"></a>判断是否为数组的方法</h3><ul>\n<li>推荐使用 Array.isArray(arr)方法，它是最简洁和可靠的，Es6 专门为此设计的方法</li>\n<li>A instanceof B<br>const value &#x3D; [1, 2, 3];<br>console.log(value instanceof Array); &#x2F;&#x2F; true</li>\n<li>Object.prototype.toString，是一种老方法，通常不再推荐使用<br>const value &#x3D; [1, 2, 3];<br>console.log(Object.prototype.toString.call(value) &#x3D;&#x3D;&#x3D; ‘[object Array]’); &#x2F;&#x2F; true</li>\n</ul>\n<h3 id=\"Object-is-a-b\"><a href=\"#Object-is-a-b\" class=\"headerlink\" title=\"Object.is(a,b)\"></a>Object.is(a,b)</h3><ul>\n<li>在 JavaScript 中用于判断两个值是否严格相等。它与&#x3D;&#x3D;&#x3D;（严格相等）有一些细微的区别</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数字</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"number\">42</span>, <span class=\"number\">42</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"number\">0</span>, -<span class=\"number\">0</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"title class_\">NaN</span>, <span class=\"title class_\">NaN</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 字符串</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"string\">&#x27;hello&#x27;</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"string\">&#x27;world&#x27;</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 布尔值</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"literal\">true</span>, <span class=\"literal\">true</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"literal\">true</span>, <span class=\"literal\">false</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(obj1, obj1)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(obj1, obj2)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(arr1, arr1)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(arr1, arr2)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// undefined 和 null</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"literal\">undefined</span>, <span class=\"literal\">null</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 不同类型</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"number\">42</span>, <span class=\"string\">&#x27;42&#x27;</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"literal\">true</span>, <span class=\"number\">1</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(&#123;&#125;, [])) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>Object.is  方法用于判断两个值是否严格相等</li>\n<li>与  &#x3D;&#x3D;&#x3D;  的主要区别是：Object.is  认为  +0  和  -0  不相等，而认为  NaN  和  NaN  相等</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"typeof-A-判断数据类型\"><a href=\"#typeof-A-判断数据类型\" class=\"headerlink\" title=\"typeof A 判断数据类型\"></a>typeof A 判断数据类型</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数字</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"number\">42</span>) <span class=\"comment\">// &quot;number&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 字符串</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"string\">&#x27;Hello, world!&#x27;</span>) <span class=\"comment\">// &quot;string&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 布尔值</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>) <span class=\"comment\">// &quot;boolean&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 未定义</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>) <span class=\"comment\">// &quot;undefined&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 空值</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>) <span class=\"comment\">// &quot;object&quot; (这是一个历史遗留问题)</span></span><br><span class=\"line\"><span class=\"comment\">// 对象</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> &#125;) <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 数组</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) <span class=\"comment\">// &quot;object&quot; (数组也是对象)</span></span><br><span class=\"line\"><span class=\"comment\">// 函数</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;) <span class=\"comment\">// &quot;function&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// Symbol</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"title class_\">Symbol</span>(<span class=\"string\">&#x27;symbol&#x27;</span>)) <span class=\"comment\">// &quot;symbol&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// BigInt</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">typeof</span> <span class=\"number\">123n</span>) <span class=\"comment\">// &quot;bigint&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>【注意】<br>（1）typeof null  返回  “object”  是一个 JavaScript 的历史遗留问题<br>（2）数组也是对象，所以  typeof []  也会返回  “object”</p>\n<h3 id=\"A-instanceof-B-判断数据类型\"><a href=\"#A-instanceof-B-判断数据类型\" class=\"headerlink\" title=\"A instanceof B 判断数据类型\"></a>A instanceof B 判断数据类型</h3><ul>\n<li>instanceof  用于判断一个对象是否是另一个对象的实例</li>\n<li>instanceof  对于内置对象类型和自定义类都有效</li>\n<li>instanceof  对于原始类型无效，但可以通过构造函数包装对象进行判断</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 创建一个实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> alice = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;Alice&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 判断实例与构造函数的关系</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(alice <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Person</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断内置对象类型</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>([] <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(&#123;&#125; <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>() <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Date</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"regexp\">/regex/</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">RegExp</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 自定义类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Animal</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Animal</span> &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myDog = <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDog <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Dog</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDog <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Animal</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myDog <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意 `instanceof` 只对对象有效，对原始类型无效</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">42</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Number</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Hello&#x27;</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">String</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"literal\">true</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Boolean</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对于原始类型，可以使用构造函数包装对象进行判断</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Number</span>(<span class=\"number\">42</span>) <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Number</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&#x27;Hello&#x27;</span>) <span class=\"keyword\">instanceof</span> <span class=\"title class_\">String</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"literal\">true</span>) <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Boolean</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"literal\">null</span> <span class=\"keyword\">instanceof</span> <span class=\"literal\">null</span> <span class=\"comment\">// 控制台报错：右侧不是对象</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-isArray-value-：专门用于判断一个值是否为数组\"><a href=\"#Array-isArray-value-：专门用于判断一个值是否为数组\" class=\"headerlink\" title=\"Array.isArray(value)：专门用于判断一个值是否为数组\"></a>Array.isArray(value)：专门用于判断一个值是否为数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 对象</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> &#125;)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 字符串</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"string\">&#x27;Hello, world!&#x27;</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 数字</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"number\">42</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 布尔值</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"literal\">true</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// null</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"literal\">null</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"literal\">undefined</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 函数</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// Date 对象</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>())) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 正则表达式</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"regexp\">/regex/</span>)) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"判断是否为数组的方法\"><a href=\"#判断是否为数组的方法\" class=\"headerlink\" title=\"判断是否为数组的方法\"></a>判断是否为数组的方法</h3><ul>\n<li>推荐使用 Array.isArray(arr)方法，它是最简洁和可靠的，Es6 专门为此设计的方法</li>\n<li>A instanceof B<br>const value &#x3D; [1, 2, 3];<br>console.log(value instanceof Array); &#x2F;&#x2F; true</li>\n<li>Object.prototype.toString，是一种老方法，通常不再推荐使用<br>const value &#x3D; [1, 2, 3];<br>console.log(Object.prototype.toString.call(value) &#x3D;&#x3D;&#x3D; ‘[object Array]’); &#x2F;&#x2F; true</li>\n</ul>\n<h3 id=\"Object-is-a-b\"><a href=\"#Object-is-a-b\" class=\"headerlink\" title=\"Object.is(a,b)\"></a>Object.is(a,b)</h3><ul>\n<li>在 JavaScript 中用于判断两个值是否严格相等。它与&#x3D;&#x3D;&#x3D;（严格相等）有一些细微的区别</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数字</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"number\">42</span>, <span class=\"number\">42</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"number\">0</span>, -<span class=\"number\">0</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"title class_\">NaN</span>, <span class=\"title class_\">NaN</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"comment\">// 字符串</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"string\">&#x27;hello&#x27;</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"string\">&#x27;hello&#x27;</span>, <span class=\"string\">&#x27;world&#x27;</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 布尔值</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"literal\">true</span>, <span class=\"literal\">true</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"literal\">true</span>, <span class=\"literal\">false</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj2 = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(obj1, obj1)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(obj1, obj2)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 数组</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(arr1, arr1)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(arr1, arr2)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// undefined 和 null</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>)) <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"literal\">undefined</span>, <span class=\"literal\">null</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// 不同类型</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"number\">42</span>, <span class=\"string\">&#x27;42&#x27;</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(<span class=\"literal\">true</span>, <span class=\"number\">1</span>)) <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"title function_\">is</span>(&#123;&#125;, [])) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>总结：</p>\n<ul>\n<li>Object.is  方法用于判断两个值是否严格相等</li>\n<li>与  &#x3D;&#x3D;&#x3D;  的主要区别是：Object.is  认为  +0  和  -0  不相等，而认为  NaN  和  NaN  相等</li>\n</ul>\n"},{"title":"搭建个人博客","date":"2025-07-23T04:07:48.000Z","cover":"/images/搭建个人博客/cover.jpg","_content":"\n### ***搭建开发环境(安装 node.js)\n\n```bash\nnpm - v\nnode - v // 检查是否安装完成\n```\n\n### ***安装博客框架 hexo 脚手架\n\n```bash\nnpm install -g hexo-cli\n```\n\n### ***切换到国内镜像源\n\n```bash\nnpm config set https://registry.npmmirror.com  // 淘宝镜像源(安装更快)\n```\n\n### ***搭建博客项目\n\n```bash\nhexo init my-blog\ncd my-blog\nnpm i\nhexo server   // 本地预览博客，简写 hexo s\n```\n\n![](/images/搭建个人博客/hexo_init.png)\n\n### ***代码托管到 gitlab 或 github\n\n- 新建一个 gitlab 仓库，仓库名是 xxx.gitlab.io，xxx 是你的 gitlab 用户名\n- 与本地仓库 my-blog 建立连接\n\n  ```bash\n  git init   // 初始化.git\n  git remote add origin https://gitlab.com/xxx.gitlab.io.git  // 建立连接\n  git branch -M main  // 修改分支名称\n  ```\n\n- 配置 Hexo 部署\n\n  - 安装 Gitlab Pages 部署插件 npm install hexo-deployer-git -D (hexo deploy 命令用到该插件)\n  - 修改  _config.yml  文件中的部署配置\n\n  ```yaml\n  deploy:\n    type: git\n    repository: git@gitlab.com:xxx.gitlab.io.gi\n    branch: main\n  ```\n\n- 创建 .gitlab-ci.yml （GitLab 内置功能 CI/CD 的配置文件：代码部署上线全自动化）\n  ![](/images/搭建个人博客/gitlab-ci-yml.png)\n\n- 推送本地代码到远程\n  - 可以新增 .gitignore 文件，忽略 node_modules 等代码提交\n  - 取消仓库 main 分支保护 Settings -> Repository -> Protected branches (如果代码推送失败，取消分支保护重新推送)\n  - 生成静态文件并部署代码到仓库：hexo clean; hexo generate; hexo deploy\n  - 推送到远程仓库 【每次推送代码会自动触发管道 CI/CD】\n  ```bash\n  git add .\n  git commit -m \"first commit\"\n  git push -u origin main\n  ```\n- 访问博客链接：Deploy -> Pages -> 可以找到博客链接 https://xxx.gitlab.io/ (等待 1-5 分钟就可以打开了)\n\n### ***扩展\n\n- 如果在 Gitlab 没有找到 Pages，检查一下`仓库`以及`仓库所在项目组`的权限是否是最高权限且公开(Public)的\n\n- 第一次推送代码到远程，我构建失败了(在 Build->Pipelines 下可以查看构建状态)\n  - 找到构建失败的原因(我是因为需要进行账号或者身份认证认证)，解决之后重新推送代码即可\n    ![](/images/搭建个人博客/gitRuning0.png)\n- 新增一篇博客内容\n  - 执行 \"hexo new post 文章标题 xxx\" 创建一篇新博客\n    ![](/images/搭建个人博客/firstBlog.png)\n  - 本地预览效果：hexo clean; hexo g; hexo d; hexo s\n  - 推送到远程【每次推送代码会自动触发管道 CI/CI】\n    - 当状态 Runing -> Passed，即构建成功，刷新线上博客即可看到\n      ![](/images/搭建个人博客/gitRuning.png)\n- 更换博客主题，hexo 有很多开源免费的主题：https://hexo.io/themes\n  - 使用 npm 方式下载主题依赖，如 butterfly 主题官网 https://butterfly.js.org/\n    - 在 Hexo 项目根目录下执行： npm install hexo-theme-butterfly -D\n    - 安装这个主题需要的插件：npm install hexo-renderer-pug hexo-renderer-stylus -D\n    - 修改 Hexo 根目录下的  _config.yml  文件 theme: butterfly\n    - 创建主题配置文件 \\_config.butterfly.yml，从 node_modules/hexo-theme-butterfly/\\_config.yml 复制默认配置到 \\_config.butterfly.yml 文件\n    - 重启查看效果：hexo clean; hexo g; hexo s (如下：主题修改成功)\n      ![](/images/搭建个人博客/hexo_themes.png)\n    - 将代码推送到远程，等构建完成(1-5 分钟)，线上博客链接的主题也完成了更换\n","source":"_posts/2025-07-23-搭建个人博客.md","raw":"---\ntitle: 搭建个人博客\ndate: 2025-07-23 12:07:48\ntags:\n  - hexo\n  - gitlab\ncover: /images/搭建个人博客/cover.jpg  # 封面图\ncategories: Hexo   # 分类\n---\n\n### ***搭建开发环境(安装 node.js)\n\n```bash\nnpm - v\nnode - v // 检查是否安装完成\n```\n\n### ***安装博客框架 hexo 脚手架\n\n```bash\nnpm install -g hexo-cli\n```\n\n### ***切换到国内镜像源\n\n```bash\nnpm config set https://registry.npmmirror.com  // 淘宝镜像源(安装更快)\n```\n\n### ***搭建博客项目\n\n```bash\nhexo init my-blog\ncd my-blog\nnpm i\nhexo server   // 本地预览博客，简写 hexo s\n```\n\n![](/images/搭建个人博客/hexo_init.png)\n\n### ***代码托管到 gitlab 或 github\n\n- 新建一个 gitlab 仓库，仓库名是 xxx.gitlab.io，xxx 是你的 gitlab 用户名\n- 与本地仓库 my-blog 建立连接\n\n  ```bash\n  git init   // 初始化.git\n  git remote add origin https://gitlab.com/xxx.gitlab.io.git  // 建立连接\n  git branch -M main  // 修改分支名称\n  ```\n\n- 配置 Hexo 部署\n\n  - 安装 Gitlab Pages 部署插件 npm install hexo-deployer-git -D (hexo deploy 命令用到该插件)\n  - 修改  _config.yml  文件中的部署配置\n\n  ```yaml\n  deploy:\n    type: git\n    repository: git@gitlab.com:xxx.gitlab.io.gi\n    branch: main\n  ```\n\n- 创建 .gitlab-ci.yml （GitLab 内置功能 CI/CD 的配置文件：代码部署上线全自动化）\n  ![](/images/搭建个人博客/gitlab-ci-yml.png)\n\n- 推送本地代码到远程\n  - 可以新增 .gitignore 文件，忽略 node_modules 等代码提交\n  - 取消仓库 main 分支保护 Settings -> Repository -> Protected branches (如果代码推送失败，取消分支保护重新推送)\n  - 生成静态文件并部署代码到仓库：hexo clean; hexo generate; hexo deploy\n  - 推送到远程仓库 【每次推送代码会自动触发管道 CI/CD】\n  ```bash\n  git add .\n  git commit -m \"first commit\"\n  git push -u origin main\n  ```\n- 访问博客链接：Deploy -> Pages -> 可以找到博客链接 https://xxx.gitlab.io/ (等待 1-5 分钟就可以打开了)\n\n### ***扩展\n\n- 如果在 Gitlab 没有找到 Pages，检查一下`仓库`以及`仓库所在项目组`的权限是否是最高权限且公开(Public)的\n\n- 第一次推送代码到远程，我构建失败了(在 Build->Pipelines 下可以查看构建状态)\n  - 找到构建失败的原因(我是因为需要进行账号或者身份认证认证)，解决之后重新推送代码即可\n    ![](/images/搭建个人博客/gitRuning0.png)\n- 新增一篇博客内容\n  - 执行 \"hexo new post 文章标题 xxx\" 创建一篇新博客\n    ![](/images/搭建个人博客/firstBlog.png)\n  - 本地预览效果：hexo clean; hexo g; hexo d; hexo s\n  - 推送到远程【每次推送代码会自动触发管道 CI/CI】\n    - 当状态 Runing -> Passed，即构建成功，刷新线上博客即可看到\n      ![](/images/搭建个人博客/gitRuning.png)\n- 更换博客主题，hexo 有很多开源免费的主题：https://hexo.io/themes\n  - 使用 npm 方式下载主题依赖，如 butterfly 主题官网 https://butterfly.js.org/\n    - 在 Hexo 项目根目录下执行： npm install hexo-theme-butterfly -D\n    - 安装这个主题需要的插件：npm install hexo-renderer-pug hexo-renderer-stylus -D\n    - 修改 Hexo 根目录下的  _config.yml  文件 theme: butterfly\n    - 创建主题配置文件 \\_config.butterfly.yml，从 node_modules/hexo-theme-butterfly/\\_config.yml 复制默认配置到 \\_config.butterfly.yml 文件\n    - 重启查看效果：hexo clean; hexo g; hexo s (如下：主题修改成功)\n      ![](/images/搭建个人博客/hexo_themes.png)\n    - 将代码推送到远程，等构建完成(1-5 分钟)，线上博客链接的主题也完成了更换\n","slug":"搭建个人博客","published":1,"updated":"2025-07-31T09:59:35.014Z","comments":1,"layout":"post","photos":[],"_id":"cmdsas6mu000gignchfx587t1","content":"<h3 id=\"搭建开发环境-安装-node-js\"><a href=\"#搭建开发环境-安装-node-js\" class=\"headerlink\" title=\"***搭建开发环境(安装 node.js)\"></a>***搭建开发环境(安装 node.js)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm - v</span><br><span class=\"line\">node - v // 检查是否安装完成</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装博客框架-hexo-脚手架\"><a href=\"#安装博客框架-hexo-脚手架\" class=\"headerlink\" title=\"***安装博客框架 hexo 脚手架\"></a>***安装博客框架 hexo 脚手架</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切换到国内镜像源\"><a href=\"#切换到国内镜像源\" class=\"headerlink\" title=\"***切换到国内镜像源\"></a>***切换到国内镜像源</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> https://registry.npmmirror.com  // 淘宝镜像源(安装更快)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"搭建博客项目\"><a href=\"#搭建博客项目\" class=\"headerlink\" title=\"***搭建博客项目\"></a>***搭建博客项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init my-blog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> my-blog</span><br><span class=\"line\">npm i</span><br><span class=\"line\">hexo server   // 本地预览博客，简写 hexo s</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo_init.png\"></p>\n<h3 id=\"代码托管到-gitlab-或-github\"><a href=\"#代码托管到-gitlab-或-github\" class=\"headerlink\" title=\"***代码托管到 gitlab 或 github\"></a>***代码托管到 gitlab 或 github</h3><ul>\n<li><p>新建一个 gitlab 仓库，仓库名是 xxx.gitlab.io，xxx 是你的 gitlab 用户名</p>\n</li>\n<li><p>与本地仓库 my-blog 建立连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init   // 初始化.git</span><br><span class=\"line\">git remote add origin https://gitlab.com/xxx.gitlab.io.git  // 建立连接</span><br><span class=\"line\">git branch -M main  // 修改分支名称</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 Hexo 部署</p>\n<ul>\n<li>安装 Gitlab Pages 部署插件 npm install hexo-deployer-git -D (hexo deploy 命令用到该插件)</li>\n<li>修改  _config.yml  文件中的部署配置</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">git@gitlab.com:xxx.gitlab.io.gi</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">main</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建 .gitlab-ci.yml （GitLab 内置功能 CI&#x2F;CD 的配置文件：代码部署上线全自动化）<br><img src=\"/images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/gitlab-ci-yml.png\"></p>\n</li>\n<li><p>推送本地代码到远程</p>\n<ul>\n<li>可以新增 .gitignore 文件，忽略 node_modules 等代码提交</li>\n<li>取消仓库 main 分支保护 Settings -&gt; Repository -&gt; Protected branches (如果代码推送失败，取消分支保护重新推送)</li>\n<li>生成静态文件并部署代码到仓库：hexo clean; hexo generate; hexo deploy</li>\n<li>推送到远程仓库 【每次推送代码会自动触发管道 CI&#x2F;CD】</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;first commit&quot;</span></span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure></li>\n<li><p>访问博客链接：Deploy -&gt; Pages -&gt; 可以找到博客链接 <a href=\"https://xxx.gitlab.io/\">https://xxx.gitlab.io/</a> (等待 1-5 分钟就可以打开了)</p>\n</li>\n</ul>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"***扩展\"></a>***扩展</h3><ul>\n<li><p>如果在 Gitlab 没有找到 Pages，检查一下<code>仓库</code>以及<code>仓库所在项目组</code>的权限是否是最高权限且公开(Public)的</p>\n</li>\n<li><p>第一次推送代码到远程，我构建失败了(在 Build-&gt;Pipelines 下可以查看构建状态)</p>\n<ul>\n<li>找到构建失败的原因(我是因为需要进行账号或者身份认证认证)，解决之后重新推送代码即可<br><img src=\"/images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/gitRuning0.png\"></li>\n</ul>\n</li>\n<li><p>新增一篇博客内容</p>\n<ul>\n<li>执行 “hexo new post 文章标题 xxx” 创建一篇新博客<br><img src=\"/images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/firstBlog.png\"></li>\n<li>本地预览效果：hexo clean; hexo g; hexo d; hexo s</li>\n<li>推送到远程【每次推送代码会自动触发管道 CI&#x2F;CI】<ul>\n<li>当状态 Runing -&gt; Passed，即构建成功，刷新线上博客即可看到<br><img src=\"/images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/gitRuning.png\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>更换博客主题，hexo 有很多开源免费的主题：<a href=\"https://hexo.io/themes\">https://hexo.io/themes</a></p>\n<ul>\n<li>使用 npm 方式下载主题依赖，如 butterfly 主题官网 <a href=\"https://butterfly.js.org/\">https://butterfly.js.org/</a><ul>\n<li>在 Hexo 项目根目录下执行： npm install hexo-theme-butterfly -D</li>\n<li>安装这个主题需要的插件：npm install hexo-renderer-pug hexo-renderer-stylus -D</li>\n<li>修改 Hexo 根目录下的  _config.yml  文件 theme: butterfly</li>\n<li>创建主题配置文件 _config.butterfly.yml，从 node_modules&#x2F;hexo-theme-butterfly&#x2F;_config.yml 复制默认配置到 _config.butterfly.yml 文件</li>\n<li>重启查看效果：hexo clean; hexo g; hexo s (如下：主题修改成功)<br><img src=\"/images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo_themes.png\"></li>\n<li>将代码推送到远程，等构建完成(1-5 分钟)，线上博客链接的主题也完成了更换</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"搭建开发环境-安装-node-js\"><a href=\"#搭建开发环境-安装-node-js\" class=\"headerlink\" title=\"***搭建开发环境(安装 node.js)\"></a>***搭建开发环境(安装 node.js)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm - v</span><br><span class=\"line\">node - v // 检查是否安装完成</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装博客框架-hexo-脚手架\"><a href=\"#安装博客框架-hexo-脚手架\" class=\"headerlink\" title=\"***安装博客框架 hexo 脚手架\"></a>***安装博客框架 hexo 脚手架</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"切换到国内镜像源\"><a href=\"#切换到国内镜像源\" class=\"headerlink\" title=\"***切换到国内镜像源\"></a>***切换到国内镜像源</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config <span class=\"built_in\">set</span> https://registry.npmmirror.com  // 淘宝镜像源(安装更快)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"搭建博客项目\"><a href=\"#搭建博客项目\" class=\"headerlink\" title=\"***搭建博客项目\"></a>***搭建博客项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init my-blog</span><br><span class=\"line\"><span class=\"built_in\">cd</span> my-blog</span><br><span class=\"line\">npm i</span><br><span class=\"line\">hexo server   // 本地预览博客，简写 hexo s</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo_init.png\"></p>\n<h3 id=\"代码托管到-gitlab-或-github\"><a href=\"#代码托管到-gitlab-或-github\" class=\"headerlink\" title=\"***代码托管到 gitlab 或 github\"></a>***代码托管到 gitlab 或 github</h3><ul>\n<li><p>新建一个 gitlab 仓库，仓库名是 xxx.gitlab.io，xxx 是你的 gitlab 用户名</p>\n</li>\n<li><p>与本地仓库 my-blog 建立连接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init   // 初始化.git</span><br><span class=\"line\">git remote add origin https://gitlab.com/xxx.gitlab.io.git  // 建立连接</span><br><span class=\"line\">git branch -M main  // 修改分支名称</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置 Hexo 部署</p>\n<ul>\n<li>安装 Gitlab Pages 部署插件 npm install hexo-deployer-git -D (hexo deploy 命令用到该插件)</li>\n<li>修改  _config.yml  文件中的部署配置</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repository:</span> <span class=\"string\">git@gitlab.com:xxx.gitlab.io.gi</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">main</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建 .gitlab-ci.yml （GitLab 内置功能 CI&#x2F;CD 的配置文件：代码部署上线全自动化）<br><img src=\"/images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/gitlab-ci-yml.png\"></p>\n</li>\n<li><p>推送本地代码到远程</p>\n<ul>\n<li>可以新增 .gitignore 文件，忽略 node_modules 等代码提交</li>\n<li>取消仓库 main 分支保护 Settings -&gt; Repository -&gt; Protected branches (如果代码推送失败，取消分支保护重新推送)</li>\n<li>生成静态文件并部署代码到仓库：hexo clean; hexo generate; hexo deploy</li>\n<li>推送到远程仓库 【每次推送代码会自动触发管道 CI&#x2F;CD】</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;first commit&quot;</span></span><br><span class=\"line\">git push -u origin main</span><br></pre></td></tr></table></figure></li>\n<li><p>访问博客链接：Deploy -&gt; Pages -&gt; 可以找到博客链接 <a href=\"https://xxx.gitlab.io/\">https://xxx.gitlab.io/</a> (等待 1-5 分钟就可以打开了)</p>\n</li>\n</ul>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"***扩展\"></a>***扩展</h3><ul>\n<li><p>如果在 Gitlab 没有找到 Pages，检查一下<code>仓库</code>以及<code>仓库所在项目组</code>的权限是否是最高权限且公开(Public)的</p>\n</li>\n<li><p>第一次推送代码到远程，我构建失败了(在 Build-&gt;Pipelines 下可以查看构建状态)</p>\n<ul>\n<li>找到构建失败的原因(我是因为需要进行账号或者身份认证认证)，解决之后重新推送代码即可<br><img src=\"/images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/gitRuning0.png\"></li>\n</ul>\n</li>\n<li><p>新增一篇博客内容</p>\n<ul>\n<li>执行 “hexo new post 文章标题 xxx” 创建一篇新博客<br><img src=\"/images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/firstBlog.png\"></li>\n<li>本地预览效果：hexo clean; hexo g; hexo d; hexo s</li>\n<li>推送到远程【每次推送代码会自动触发管道 CI&#x2F;CI】<ul>\n<li>当状态 Runing -&gt; Passed，即构建成功，刷新线上博客即可看到<br><img src=\"/images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/gitRuning.png\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>更换博客主题，hexo 有很多开源免费的主题：<a href=\"https://hexo.io/themes\">https://hexo.io/themes</a></p>\n<ul>\n<li>使用 npm 方式下载主题依赖，如 butterfly 主题官网 <a href=\"https://butterfly.js.org/\">https://butterfly.js.org/</a><ul>\n<li>在 Hexo 项目根目录下执行： npm install hexo-theme-butterfly -D</li>\n<li>安装这个主题需要的插件：npm install hexo-renderer-pug hexo-renderer-stylus -D</li>\n<li>修改 Hexo 根目录下的  _config.yml  文件 theme: butterfly</li>\n<li>创建主题配置文件 _config.butterfly.yml，从 node_modules&#x2F;hexo-theme-butterfly&#x2F;_config.yml 复制默认配置到 _config.butterfly.yml 文件</li>\n<li>重启查看效果：hexo clean; hexo g; hexo s (如下：主题修改成功)<br><img src=\"/images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo_themes.png\"></li>\n<li>将代码推送到远程，等构建完成(1-5 分钟)，线上博客链接的主题也完成了更换</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"compoents下组件自动注册","date":"2025-07-24T06:32:22.000Z","cover":"/images/compoents下组件自动注册/cover.jpg","_content":"\n**Vue 项目常用的构建工具：Vue-cli、Webpack、Vite**\n\n### **** 构建工具是 vite ****\n\n- 新建目录\n\n![](/images/compoents下组件自动注册/vite_com.png)\n\n- index.js\n\n```javascript\n// 自动注册全局组件components\nimport { defineAsyncComponent } from 'vue'\n/**\n * @description 在src/components目录下创建文件，即 src/components/xxx.vue\n * @description 在src/components目录下创建目录及文件，即 src/components/xxx文件夹/xxx.vue\n */\nconst components = import.meta.glob('./**/**.vue')\nexport default function install(app) {\n\tfor (const [key, value] of Object.entries(components)) {\n\t\tconst name = key.slice(key.lastIndexOf('/') + 1, key.lastIndexOf('.'))\n\t\tapp.component(name, defineAsyncComponent(value))\n\t}\n}\n```\n\n- main.js\n\n```javascript\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport router from '@/router'\nimport autoRegCom from '@/components/index.js'\nconst app = createApp(App)\napp.use(router).use(autoRegCom).mount('#app')\n```\n\n- 直接使用\n\n```html\n<Header></Header>\n<Footer></Footer>\n```\n\n### **** 构建工具不是 vite ****\n\n- 新建目录\n\n![](/images/compoents下组件自动注册/vue_com.png)\n\n- index.js\n\n```javascript\n// 全局组件自动注册\nexport default {\n\tinstallCom(app) {\n\t\t// ('components文件夹下', '是否取子集', '正则匹配.vue结尾的的文件')\n\t\tconst ctx = require.context('../components', true, /\\.vue$/)\n\t\t// console.log('ctx:', ctx)\n\t\tif (ctx && ctx.keys()) {\n\t\t\tctx.keys()?.forEach((item) => {\n\t\t\t\tconst component = ctx(item).default\n\t\t\t\tlet path = (item || component.__file)?.split('/')\n\t\t\t\tconst componentName =\n\t\t\t\t\tpath && path.length && path[path.length - 1].split('.')[0]\n\t\t\t\t// console.log(componentName, component)\n\t\t\t\tapp.component(componentName, component)\n\t\t\t})\n\t\t}\n\t},\n}\n```\n\n- main.js\n\n```javascript\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport autoRegCom from '@/components/index.js'\nconst app = createApp(App)\nautoRegCom.installCom(app)\n```\n\n- 直接使用\n\n```html\n<Header></Header>\n<Footer></Footer>\n```\n","source":"_posts/2025-07-24-compoents下组件自动注册.md","raw":"---\ntitle: compoents下组件自动注册\ndate: 2025-07-24 14:32:22\ntags:\n  - vite\n  - vue-cli\ncategories: Vue # 分类\ncover: /images/compoents下组件自动注册/cover.jpg # 封面图\n---\n\n**Vue 项目常用的构建工具：Vue-cli、Webpack、Vite**\n\n### **** 构建工具是 vite ****\n\n- 新建目录\n\n![](/images/compoents下组件自动注册/vite_com.png)\n\n- index.js\n\n```javascript\n// 自动注册全局组件components\nimport { defineAsyncComponent } from 'vue'\n/**\n * @description 在src/components目录下创建文件，即 src/components/xxx.vue\n * @description 在src/components目录下创建目录及文件，即 src/components/xxx文件夹/xxx.vue\n */\nconst components = import.meta.glob('./**/**.vue')\nexport default function install(app) {\n\tfor (const [key, value] of Object.entries(components)) {\n\t\tconst name = key.slice(key.lastIndexOf('/') + 1, key.lastIndexOf('.'))\n\t\tapp.component(name, defineAsyncComponent(value))\n\t}\n}\n```\n\n- main.js\n\n```javascript\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport router from '@/router'\nimport autoRegCom from '@/components/index.js'\nconst app = createApp(App)\napp.use(router).use(autoRegCom).mount('#app')\n```\n\n- 直接使用\n\n```html\n<Header></Header>\n<Footer></Footer>\n```\n\n### **** 构建工具不是 vite ****\n\n- 新建目录\n\n![](/images/compoents下组件自动注册/vue_com.png)\n\n- index.js\n\n```javascript\n// 全局组件自动注册\nexport default {\n\tinstallCom(app) {\n\t\t// ('components文件夹下', '是否取子集', '正则匹配.vue结尾的的文件')\n\t\tconst ctx = require.context('../components', true, /\\.vue$/)\n\t\t// console.log('ctx:', ctx)\n\t\tif (ctx && ctx.keys()) {\n\t\t\tctx.keys()?.forEach((item) => {\n\t\t\t\tconst component = ctx(item).default\n\t\t\t\tlet path = (item || component.__file)?.split('/')\n\t\t\t\tconst componentName =\n\t\t\t\t\tpath && path.length && path[path.length - 1].split('.')[0]\n\t\t\t\t// console.log(componentName, component)\n\t\t\t\tapp.component(componentName, component)\n\t\t\t})\n\t\t}\n\t},\n}\n```\n\n- main.js\n\n```javascript\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport autoRegCom from '@/components/index.js'\nconst app = createApp(App)\nautoRegCom.installCom(app)\n```\n\n- 直接使用\n\n```html\n<Header></Header>\n<Footer></Footer>\n```\n","slug":"compoents下组件自动注册","published":1,"updated":"2025-07-31T09:59:35.014Z","comments":1,"layout":"post","photos":[],"_id":"cmdsas6mv000iignc1dfg0z24","content":"<p><strong>Vue 项目常用的构建工具：Vue-cli、Webpack、Vite</strong></p>\n<h3 id=\"构建工具是-vite\"><a href=\"#构建工具是-vite\" class=\"headerlink\" title=\"**** 构建工具是 vite ****\"></a>**** 构建工具是 vite ****</h3><ul>\n<li>新建目录</li>\n</ul>\n<p><img src=\"/images/compoents%E4%B8%8B%E7%BB%84%E4%BB%B6%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%86%8C/vite_com.png\"></p>\n<ul>\n<li>index.js</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自动注册全局组件components</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineAsyncComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 在src/components目录下创建文件，即 src/components/xxx.vue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 在src/components目录下创建目录及文件，即 src/components/xxx文件夹/xxx.vue</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> components = <span class=\"keyword\">import</span>.<span class=\"property\">meta</span>.<span class=\"title function_\">glob</span>(<span class=\"string\">&#x27;./**/**.vue&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">install</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key, value] <span class=\"keyword\">of</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">entries</span>(components)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> name = key.<span class=\"title function_\">slice</span>(key.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&#x27;/&#x27;</span>) + <span class=\"number\">1</span>, key.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&#x27;.&#x27;</span>))</span><br><span class=\"line\">\t\tapp.<span class=\"title function_\">component</span>(name, <span class=\"title function_\">defineAsyncComponent</span>(value))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>main.js</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> autoRegCom <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/components/index.js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>)</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(router).<span class=\"title function_\">use</span>(autoRegCom).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>直接使用</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构建工具不是-vite\"><a href=\"#构建工具不是-vite\" class=\"headerlink\" title=\"**** 构建工具不是 vite ****\"></a>**** 构建工具不是 vite ****</h3><ul>\n<li>新建目录</li>\n</ul>\n<p><img src=\"/images/compoents%E4%B8%8B%E7%BB%84%E4%BB%B6%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%86%8C/vue_com.png\"></p>\n<ul>\n<li>index.js</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局组件自动注册</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">installCom</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// (&#x27;components文件夹下&#x27;, &#x27;是否取子集&#x27;, &#x27;正则匹配.vue结尾的的文件&#x27;)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> ctx = <span class=\"built_in\">require</span>.<span class=\"title function_\">context</span>(<span class=\"string\">&#x27;../components&#x27;</span>, <span class=\"literal\">true</span>, <span class=\"regexp\">/\\.vue$/</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">// console.log(&#x27;ctx:&#x27;, ctx)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ctx &amp;&amp; ctx.<span class=\"title function_\">keys</span>()) &#123;</span><br><span class=\"line\">\t\t\tctx.<span class=\"title function_\">keys</span>()?.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> component = <span class=\"title function_\">ctx</span>(item).<span class=\"property\">default</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> path = (item || component.<span class=\"property\">__file</span>)?.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> componentName =</span><br><span class=\"line\">\t\t\t\t\tpath &amp;&amp; path.<span class=\"property\">length</span> &amp;&amp; path[path.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// console.log(componentName, component)</span></span><br><span class=\"line\">\t\t\t\tapp.<span class=\"title function_\">component</span>(componentName, component)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>main.js</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> autoRegCom <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/components/index.js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>)</span><br><span class=\"line\">autoRegCom.<span class=\"title function_\">installCom</span>(app)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>直接使用</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p><strong>Vue 项目常用的构建工具：Vue-cli、Webpack、Vite</strong></p>\n<h3 id=\"构建工具是-vite\"><a href=\"#构建工具是-vite\" class=\"headerlink\" title=\"**** 构建工具是 vite ****\"></a>**** 构建工具是 vite ****</h3><ul>\n<li>新建目录</li>\n</ul>\n<p><img src=\"/images/compoents%E4%B8%8B%E7%BB%84%E4%BB%B6%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%86%8C/vite_com.png\"></p>\n<ul>\n<li>index.js</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自动注册全局组件components</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineAsyncComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 在src/components目录下创建文件，即 src/components/xxx.vue</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> 在src/components目录下创建目录及文件，即 src/components/xxx文件夹/xxx.vue</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> components = <span class=\"keyword\">import</span>.<span class=\"property\">meta</span>.<span class=\"title function_\">glob</span>(<span class=\"string\">&#x27;./**/**.vue&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">install</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [key, value] <span class=\"keyword\">of</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">entries</span>(components)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> name = key.<span class=\"title function_\">slice</span>(key.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&#x27;/&#x27;</span>) + <span class=\"number\">1</span>, key.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&#x27;.&#x27;</span>))</span><br><span class=\"line\">\t\tapp.<span class=\"title function_\">component</span>(name, <span class=\"title function_\">defineAsyncComponent</span>(value))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>main.js</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> autoRegCom <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/components/index.js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>)</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(router).<span class=\"title function_\">use</span>(autoRegCom).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>直接使用</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构建工具不是-vite\"><a href=\"#构建工具不是-vite\" class=\"headerlink\" title=\"**** 构建工具不是 vite ****\"></a>**** 构建工具不是 vite ****</h3><ul>\n<li>新建目录</li>\n</ul>\n<p><img src=\"/images/compoents%E4%B8%8B%E7%BB%84%E4%BB%B6%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%86%8C/vue_com.png\"></p>\n<ul>\n<li>index.js</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全局组件自动注册</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">\t<span class=\"title function_\">installCom</span>(<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// (&#x27;components文件夹下&#x27;, &#x27;是否取子集&#x27;, &#x27;正则匹配.vue结尾的的文件&#x27;)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">const</span> ctx = <span class=\"built_in\">require</span>.<span class=\"title function_\">context</span>(<span class=\"string\">&#x27;../components&#x27;</span>, <span class=\"literal\">true</span>, <span class=\"regexp\">/\\.vue$/</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\">// console.log(&#x27;ctx:&#x27;, ctx)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ctx &amp;&amp; ctx.<span class=\"title function_\">keys</span>()) &#123;</span><br><span class=\"line\">\t\t\tctx.<span class=\"title function_\">keys</span>()?.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> component = <span class=\"title function_\">ctx</span>(item).<span class=\"property\">default</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> path = (item || component.<span class=\"property\">__file</span>)?.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">const</span> componentName =</span><br><span class=\"line\">\t\t\t\t\tpath &amp;&amp; path.<span class=\"property\">length</span> &amp;&amp; path[path.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// console.log(componentName, component)</span></span><br><span class=\"line\">\t\t\t\tapp.<span class=\"title function_\">component</span>(componentName, component)</span><br><span class=\"line\">\t\t\t&#125;)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>main.js</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> autoRegCom <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/components/index.js&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>)</span><br><span class=\"line\">autoRegCom.<span class=\"title function_\">installCom</span>(app)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>直接使用</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Header</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Footer</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"setTimeout与闭包","date":"2025-07-28T03:10:21.000Z","cover":"/images/setTimeout与闭包/cover.jpg","_content":"\n```javascript\nfor (var i = 0; i < 5; i++) {\n\tsetTimeout(function () {\n\t\tconsole.log(i)\n\t}, i * 1000)\n}\n```\n\n- 问题：上述代码的输出结果是什么？如何修改代码使其按预期输出 0 到 4？\n\n---\n\n- 答案：输出结果是连续输出 5 个 5\n\n- 原因：var 声明的变量没有块级作用域，setTimeout 中的回调函数会在循环结束(同步代码执行完成，异步队列开始轮训 setTimeout)后才执行，此时 i 的值已经变为 5\n\n- 修改方案 1：可以使用 let 声明变量来解决这个问题，因为 let 有块级作用域，每个回调函数都会捕获到不同的 i 值\n\n```javascript\n// 修改后的代码\nfor (let i = 0; i < 5; i++) {\n\tsetTimeout(function () {\n\t\tconsole.log(i)\n\t}, i * 1000)\n}\n```\n\n- 修改方案 2：使用 setTimeout 的第三个参数，作为回调函数的参数传递进去，可以将当前 i 值传递给回调函数\n\n```javascript\n// 修改后的代码\nfor (var i = 0; i < 5; i++) {\n\tsetTimeout(function (index) {\n\t\tconsole.log(index)\n\t}, i * 1000, i)\n}\n```\n\n","source":"_posts/2025-07-28-setTimeout与闭包.md","raw":"---\ntitle: setTimeout与闭包\ndate: 2025-07-28 11:10:21\ntags: setTimeout\ncategories: Javascript\ncover: /images/setTimeout与闭包/cover.jpg # 封面图\n---\n\n```javascript\nfor (var i = 0; i < 5; i++) {\n\tsetTimeout(function () {\n\t\tconsole.log(i)\n\t}, i * 1000)\n}\n```\n\n- 问题：上述代码的输出结果是什么？如何修改代码使其按预期输出 0 到 4？\n\n---\n\n- 答案：输出结果是连续输出 5 个 5\n\n- 原因：var 声明的变量没有块级作用域，setTimeout 中的回调函数会在循环结束(同步代码执行完成，异步队列开始轮训 setTimeout)后才执行，此时 i 的值已经变为 5\n\n- 修改方案 1：可以使用 let 声明变量来解决这个问题，因为 let 有块级作用域，每个回调函数都会捕获到不同的 i 值\n\n```javascript\n// 修改后的代码\nfor (let i = 0; i < 5; i++) {\n\tsetTimeout(function () {\n\t\tconsole.log(i)\n\t}, i * 1000)\n}\n```\n\n- 修改方案 2：使用 setTimeout 的第三个参数，作为回调函数的参数传递进去，可以将当前 i 值传递给回调函数\n\n```javascript\n// 修改后的代码\nfor (var i = 0; i < 5; i++) {\n\tsetTimeout(function (index) {\n\t\tconsole.log(index)\n\t}, i * 1000, i)\n}\n```\n\n","slug":"setTimeout与闭包","published":1,"updated":"2025-07-28T07:22:05.400Z","comments":1,"layout":"post","photos":[],"_id":"cmdsas6mv000kignc0q5r2vg6","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">\t&#125;, i * <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>问题：上述代码的输出结果是什么？如何修改代码使其按预期输出 0 到 4？</li>\n</ul>\n<hr>\n<ul>\n<li><p>答案：输出结果是连续输出 5 个 5</p>\n</li>\n<li><p>原因：var 声明的变量没有块级作用域，setTimeout 中的回调函数会在循环结束(同步代码执行完成，异步队列开始轮训 setTimeout)后才执行，此时 i 的值已经变为 5</p>\n</li>\n<li><p>修改方案 1：可以使用 let 声明变量来解决这个问题，因为 let 有块级作用域，每个回调函数都会捕获到不同的 i 值</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改后的代码</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">\t&#125;, i * <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改方案 2：使用 setTimeout 的第三个参数，作为回调函数的参数传递进去，可以将当前 i 值传递给回调函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改后的代码</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(index)</span><br><span class=\"line\">\t&#125;, i * <span class=\"number\">1000</span>, i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">\t&#125;, i * <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>问题：上述代码的输出结果是什么？如何修改代码使其按预期输出 0 到 4？</li>\n</ul>\n<hr>\n<ul>\n<li><p>答案：输出结果是连续输出 5 个 5</p>\n</li>\n<li><p>原因：var 声明的变量没有块级作用域，setTimeout 中的回调函数会在循环结束(同步代码执行完成，异步队列开始轮训 setTimeout)后才执行，此时 i 的值已经变为 5</p>\n</li>\n<li><p>修改方案 1：可以使用 let 声明变量来解决这个问题，因为 let 有块级作用域，每个回调函数都会捕获到不同的 i 值</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改后的代码</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">\t&#125;, i * <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改方案 2：使用 setTimeout 的第三个参数，作为回调函数的参数传递进去，可以将当前 i 值传递给回调函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 修改后的代码</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span> (<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(index)</span><br><span class=\"line\">\t&#125;, i * <span class=\"number\">1000</span>, i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Event事件循环","date":"2025-07-29T02:51:52.000Z","cover":"/images/Event事件循环/cover.jpg","_content":"\n```javascript\nconsole.log('Start')\nsetTimeout(() => {\n\tconsole.log('Timeout1')\n}, 10000)\nPromise.resolve().then(() => {\n\tconsole.log('Promise1')\n})\nsetTimeout(() => {\n\tconsole.log('Timeout2')\n}, 0)\nconst timmer = setInterval(() => {\n\tconsole.log('Interval')\n}, 3000)\nPromise.resolve().then(() => {\n\tconsole.log('Promise2')\n})\nconsole.log('End')\nclearInterval()\n```\n\n- 问题：请解释上述代码的执行顺序，为什么会按照这样的顺序输出结果？\n\n---\n\n- Event Loop：在事件循环机制中，任务分为 微任务(Promise 回调、DOM 变化监听等) 和 宏任务(setTimeout/setInterval、DOM 事件回调 click/scroll 等)\n\n- 解答：\n  - 代码开始执行，首先输出 `Start`\n  - 遇到  `setTimeout(() => { console.log('Timeout1'); }, 10000)`，它会在 10 秒后将回调函数  () => { console.log('Timeout1'); }  放入宏任务队列\n  - 接着  `Promise.resolve().then(() => { console.log('Promise1'); })`，Promise.resolve()  会返回一个已解决的  Promise  对象，其  then  方法里的回调函数  () => { console.log('Promise1'); }  会被添加到微任务队列\n  - 再碰到 `setTimeout(() => { console.log('Timeout2'); }, 0)`，尽管延迟时间设为 0 毫秒，在 0 秒把回调函数  () => { console.log('Timeout2'); }  放入宏任务队列\n  - 之后是 `setInterval(() => { console.log('Interval'); }, 3000)`，它会在 3 秒后将回调函数  () => { console.log('Interval'); }  放入宏任务队列，并且之后每隔 3 秒放入一次\n  - 又遇到 `Promise.resolve().then(() => { console.log('Promise2'); })`，then  方法的回调函数  () => { console.log('Promise2'); }  会被加入微任务队列\n  - 接着输出 `End`\n  - 接着执行 `clearInterval()` (clearInterval 是同步)，无任何入参，所以它不会清除任何定时器，也不会抛出错误\n  - **当主线程的同步代码执行完后，事件循环会优先处理微任务队列**，会输出  Promise1、接着输出 Promise2\n  - **微任务队列处理完毕后，事件循环会从宏任务队列中取出任务执行**，所以最后输出 Timeout2、3 次 Interval、Timeout1、n 次 Interval\n  - 综上所述，代码的输出顺序为 `Start、End、Promise1、Promise2、Timeout2、Interval、Interval、Interval、Timeout1、Interval、Interval、Interval...`\n","source":"_posts/2025-07-29-Event事件循环.md","raw":"---\ntitle: Event事件循环\ndate: 2025-07-29 10:51:52\ntags: event loop\ncategories: Javascript\ncover: /images/Event事件循环/cover.jpg # 封面图\n---\n\n```javascript\nconsole.log('Start')\nsetTimeout(() => {\n\tconsole.log('Timeout1')\n}, 10000)\nPromise.resolve().then(() => {\n\tconsole.log('Promise1')\n})\nsetTimeout(() => {\n\tconsole.log('Timeout2')\n}, 0)\nconst timmer = setInterval(() => {\n\tconsole.log('Interval')\n}, 3000)\nPromise.resolve().then(() => {\n\tconsole.log('Promise2')\n})\nconsole.log('End')\nclearInterval()\n```\n\n- 问题：请解释上述代码的执行顺序，为什么会按照这样的顺序输出结果？\n\n---\n\n- Event Loop：在事件循环机制中，任务分为 微任务(Promise 回调、DOM 变化监听等) 和 宏任务(setTimeout/setInterval、DOM 事件回调 click/scroll 等)\n\n- 解答：\n  - 代码开始执行，首先输出 `Start`\n  - 遇到  `setTimeout(() => { console.log('Timeout1'); }, 10000)`，它会在 10 秒后将回调函数  () => { console.log('Timeout1'); }  放入宏任务队列\n  - 接着  `Promise.resolve().then(() => { console.log('Promise1'); })`，Promise.resolve()  会返回一个已解决的  Promise  对象，其  then  方法里的回调函数  () => { console.log('Promise1'); }  会被添加到微任务队列\n  - 再碰到 `setTimeout(() => { console.log('Timeout2'); }, 0)`，尽管延迟时间设为 0 毫秒，在 0 秒把回调函数  () => { console.log('Timeout2'); }  放入宏任务队列\n  - 之后是 `setInterval(() => { console.log('Interval'); }, 3000)`，它会在 3 秒后将回调函数  () => { console.log('Interval'); }  放入宏任务队列，并且之后每隔 3 秒放入一次\n  - 又遇到 `Promise.resolve().then(() => { console.log('Promise2'); })`，then  方法的回调函数  () => { console.log('Promise2'); }  会被加入微任务队列\n  - 接着输出 `End`\n  - 接着执行 `clearInterval()` (clearInterval 是同步)，无任何入参，所以它不会清除任何定时器，也不会抛出错误\n  - **当主线程的同步代码执行完后，事件循环会优先处理微任务队列**，会输出  Promise1、接着输出 Promise2\n  - **微任务队列处理完毕后，事件循环会从宏任务队列中取出任务执行**，所以最后输出 Timeout2、3 次 Interval、Timeout1、n 次 Interval\n  - 综上所述，代码的输出顺序为 `Start、End、Promise1、Promise2、Timeout2、Interval、Interval、Interval、Timeout1、Interval、Interval、Interval...`\n","slug":"Event事件循环","published":1,"updated":"2025-07-29T03:17:15.222Z","comments":1,"layout":"post","photos":[],"_id":"cmdsas6n1001eignc79ps62bo","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Start&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Timeout1&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">10000</span>)</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Promise1&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Timeout2&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> timmer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Interval&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Promise2&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;End&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">clearInterval</span>()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>问题：请解释上述代码的执行顺序，为什么会按照这样的顺序输出结果？</li>\n</ul>\n<hr>\n<ul>\n<li><p>Event Loop：在事件循环机制中，任务分为 微任务(Promise 回调、DOM 变化监听等) 和 宏任务(setTimeout&#x2F;setInterval、DOM 事件回调 click&#x2F;scroll 等)</p>\n</li>\n<li><p>解答：</p>\n<ul>\n<li>代码开始执行，首先输出 <code>Start</code></li>\n<li>遇到  <code>setTimeout(() =&gt; &#123; console.log(&#39;Timeout1&#39;); &#125;, 10000)</code>，它会在 10 秒后将回调函数  () &#x3D;&gt; { console.log(‘Timeout1’); }  放入宏任务队列</li>\n<li>接着  <code>Promise.resolve().then(() =&gt; &#123; console.log(&#39;Promise1&#39;); &#125;)</code>，Promise.resolve()  会返回一个已解决的  Promise  对象，其  then  方法里的回调函数  () &#x3D;&gt; { console.log(‘Promise1’); }  会被添加到微任务队列</li>\n<li>再碰到 <code>setTimeout(() =&gt; &#123; console.log(&#39;Timeout2&#39;); &#125;, 0)</code>，尽管延迟时间设为 0 毫秒，在 0 秒把回调函数  () &#x3D;&gt; { console.log(‘Timeout2’); }  放入宏任务队列</li>\n<li>之后是 <code>setInterval(() =&gt; &#123; console.log(&#39;Interval&#39;); &#125;, 3000)</code>，它会在 3 秒后将回调函数  () &#x3D;&gt; { console.log(‘Interval’); }  放入宏任务队列，并且之后每隔 3 秒放入一次</li>\n<li>又遇到 <code>Promise.resolve().then(() =&gt; &#123; console.log(&#39;Promise2&#39;); &#125;)</code>，then  方法的回调函数  () &#x3D;&gt; { console.log(‘Promise2’); }  会被加入微任务队列</li>\n<li>接着输出 <code>End</code></li>\n<li>接着执行 <code>clearInterval()</code> (clearInterval 是同步)，无任何入参，所以它不会清除任何定时器，也不会抛出错误</li>\n<li><strong>当主线程的同步代码执行完后，事件循环会优先处理微任务队列</strong>，会输出  Promise1、接着输出 Promise2</li>\n<li><strong>微任务队列处理完毕后，事件循环会从宏任务队列中取出任务执行</strong>，所以最后输出 Timeout2、3 次 Interval、Timeout1、n 次 Interval</li>\n<li>综上所述，代码的输出顺序为 <code>Start、End、Promise1、Promise2、Timeout2、Interval、Interval、Interval、Timeout1、Interval、Interval、Interval...</code></li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Start&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Timeout1&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">10000</span>)</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Promise1&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Timeout2&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> timmer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Interval&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">3000</span>)</span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>().<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Promise2&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;End&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">clearInterval</span>()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>问题：请解释上述代码的执行顺序，为什么会按照这样的顺序输出结果？</li>\n</ul>\n<hr>\n<ul>\n<li><p>Event Loop：在事件循环机制中，任务分为 微任务(Promise 回调、DOM 变化监听等) 和 宏任务(setTimeout&#x2F;setInterval、DOM 事件回调 click&#x2F;scroll 等)</p>\n</li>\n<li><p>解答：</p>\n<ul>\n<li>代码开始执行，首先输出 <code>Start</code></li>\n<li>遇到  <code>setTimeout(() =&gt; &#123; console.log(&#39;Timeout1&#39;); &#125;, 10000)</code>，它会在 10 秒后将回调函数  () &#x3D;&gt; { console.log(‘Timeout1’); }  放入宏任务队列</li>\n<li>接着  <code>Promise.resolve().then(() =&gt; &#123; console.log(&#39;Promise1&#39;); &#125;)</code>，Promise.resolve()  会返回一个已解决的  Promise  对象，其  then  方法里的回调函数  () &#x3D;&gt; { console.log(‘Promise1’); }  会被添加到微任务队列</li>\n<li>再碰到 <code>setTimeout(() =&gt; &#123; console.log(&#39;Timeout2&#39;); &#125;, 0)</code>，尽管延迟时间设为 0 毫秒，在 0 秒把回调函数  () &#x3D;&gt; { console.log(‘Timeout2’); }  放入宏任务队列</li>\n<li>之后是 <code>setInterval(() =&gt; &#123; console.log(&#39;Interval&#39;); &#125;, 3000)</code>，它会在 3 秒后将回调函数  () &#x3D;&gt; { console.log(‘Interval’); }  放入宏任务队列，并且之后每隔 3 秒放入一次</li>\n<li>又遇到 <code>Promise.resolve().then(() =&gt; &#123; console.log(&#39;Promise2&#39;); &#125;)</code>，then  方法的回调函数  () &#x3D;&gt; { console.log(‘Promise2’); }  会被加入微任务队列</li>\n<li>接着输出 <code>End</code></li>\n<li>接着执行 <code>clearInterval()</code> (clearInterval 是同步)，无任何入参，所以它不会清除任何定时器，也不会抛出错误</li>\n<li><strong>当主线程的同步代码执行完后，事件循环会优先处理微任务队列</strong>，会输出  Promise1、接着输出 Promise2</li>\n<li><strong>微任务队列处理完毕后，事件循环会从宏任务队列中取出任务执行</strong>，所以最后输出 Timeout2、3 次 Interval、Timeout1、n 次 Interval</li>\n<li>综上所述，代码的输出顺序为 <code>Start、End、Promise1、Promise2、Timeout2、Interval、Interval、Interval、Timeout1、Interval、Interval、Interval...</code></li>\n</ul>\n</li>\n</ul>\n"},{"title":"接入Google地图","date":"2025-07-30T03:25:50.000Z","cover":"/images/接入Google地图/cover.jpg","_content":"\n### 准备工作\n\n- Google API 秘钥\n\n- 地址信息：经纬度、地点名称等\n\n### [获取 Google API 密钥](https://developers.google.com/maps/documentation/javascript/add-google-map-wc-tut?hl=zh-cn#key)\n\n- 前往 [Google Cloud 控制台](https://console.cloud.google.com/projectselector2/google/maps-apis/overview)。\n\n- 创建或选择一个项目。\n\n- 点击继续，启用 API 和任何相关服务。\n\n- 在凭据页面上，获取 API 密钥（并设置 API 密钥限制）。注意：如果您已有不受限的 API 密钥或存在浏览器限制的密钥，可以使用相应密钥。\n\n- 如需防止配额盗用并保护 API 密钥，请参阅[使用 API 密钥](https://cloud.google.com/docs/authentication/api-keys?hl=zh-cn)。\n\n- 启用结算功能。如需了解详情，请参阅[用量和结算](https://developers.google.com/maps/documentation/javascript/usage-and-billing?hl=zh-cn&utm_source=devtools&utm_campaign=stable)。\n\n- 现在，您可以使用 API 密钥了。\n\n### 接入 Google 地图\n\n- [获取经纬度](https://www.google.com.hk/maps)\n\n  - 在地图上搜索地名，导航栏上会出现地名所在的经纬度\n    ![](/images/接入Google地图/latlng.png)\n\n- vue 项目接入 Google 地图\n\n  - 下载依赖：\n\n  ```bash\n    npm install @googlemaps/js-api-loader\n  ```\n\n  - 新建 GoogleMaps.vue 文件\n\n  ```html\n  <template>\n  \t<div id=\"myMap\" class=\"bg-#ccc w-full h-full\"></div>\n  </template>\n\n  <script setup>\n  \timport { onMounted, ref } from 'vue'\n  \timport { Loader } from '@googlemaps/js-api-loader'\n\n  \tonMounted(async () => {\n  \t\tconst loader = new Loader({\n  \t\t\tapiKey: 'AIzaSyDGp6YYslhnooIC1iEoVC0_QBmlJIxS2OQ', // Google Maps API 密钥\n  \t\t\tversion: 'weekly',\n  \t\t\tlibraries: [],\n  \t\t})\n\n  \t\ttry {\n  \t\t\tawait loader.load()\n  \t\t\tconst title = '清华大学'\n  \t\t\t// 位置坐标\n  \t\t\tconst myLatLng = { lat: 39.9389436, lng: 116.0678214 }\n  \t\t\t// 1、创建地图\n  \t\t\tconst theMap = await new google.maps.Map(\n  \t\t\t\tdocument.getElementById('myMap'),\n  \t\t\t\t{\n  \t\t\t\t\tzoom: 10, // 缩放级别，0全球视野—21建筑物级别\n  \t\t\t\t\tcenter: myLatLng, // 地图中心点的经纬度\n  \t\t\t\t\tmapId: 'XXXX_MAP_ID',\n  \t\t\t\t\tmaptype: 'satellite', // 地图类型: roadmap 标准道路地图、satellite 卫星图、terrain 地形图、hybrid混合图(卫星图像+道路标签)\n  \t\t\t\t}\n  \t\t\t)\n  \t\t\t// 2、添加地点标记\n  \t\t\tconst marker = await new google.maps.Marker({\n  \t\t\t\tmap: theMap,\n  \t\t\t\tposition: myLatLng,\n  \t\t\t\ttitle: title, // icon: \"path/to/custom-icon.png\", // 可选自定义图标\n  \t\t\t})\n  \t\t\t// 3、添加信息窗口\n  \t\t\tconst infoBox = await new google.maps.InfoWindow({\n  \t\t\t\tcontent: `\n                      <h3 style=\"line-height: 1;margin: 0 0 10px;padding: 0;\">清华大学</h3>\n                      <p>北京市海淀区清华园</p>\n                      <p>中华人民共和国教育部直属的全国重点大学，中央直管高校</p>\n                      <p>\"自强不息、厚德载物\"</p>\n                  `,\n  \t\t\t\tmaxWidth: 400,\n  \t\t\t})\n  \t\t\tmarker.addListener('click', () => {\n  \t\t\t\tinfoBox.open(theMap, marker)\n  \t\t\t})\n  \t\t} catch (error) {\n  \t\t\tconsole.error('加载Google地图 API 时出错:', error)\n  \t\t}\n  \t})\n  </script>\n  ```\n\n  - 使用：\n\n  ```html\n  <div class=\"w-full h-50vh max-h-500px\">\n  \t<GoogleMaps />\n  </div>\n  ```\n\n  - 效果图：\n\n    ![](/images/接入Google地图/maps.png)\n\n  - 【Tips】如上效果图有水印，其实 Google 地图已经使用成功了，只是 Google API 秘钥未正确使用(需要结算付款的...)\n","source":"_posts/2025-07-30-接入Google地图.md","raw":"---\ntitle: 接入Google地图\ndate: 2025-07-30 11:25:50\ntags: Google Maps\ncover: /images/接入Google地图/cover.jpg # 封面图\n---\n\n### 准备工作\n\n- Google API 秘钥\n\n- 地址信息：经纬度、地点名称等\n\n### [获取 Google API 密钥](https://developers.google.com/maps/documentation/javascript/add-google-map-wc-tut?hl=zh-cn#key)\n\n- 前往 [Google Cloud 控制台](https://console.cloud.google.com/projectselector2/google/maps-apis/overview)。\n\n- 创建或选择一个项目。\n\n- 点击继续，启用 API 和任何相关服务。\n\n- 在凭据页面上，获取 API 密钥（并设置 API 密钥限制）。注意：如果您已有不受限的 API 密钥或存在浏览器限制的密钥，可以使用相应密钥。\n\n- 如需防止配额盗用并保护 API 密钥，请参阅[使用 API 密钥](https://cloud.google.com/docs/authentication/api-keys?hl=zh-cn)。\n\n- 启用结算功能。如需了解详情，请参阅[用量和结算](https://developers.google.com/maps/documentation/javascript/usage-and-billing?hl=zh-cn&utm_source=devtools&utm_campaign=stable)。\n\n- 现在，您可以使用 API 密钥了。\n\n### 接入 Google 地图\n\n- [获取经纬度](https://www.google.com.hk/maps)\n\n  - 在地图上搜索地名，导航栏上会出现地名所在的经纬度\n    ![](/images/接入Google地图/latlng.png)\n\n- vue 项目接入 Google 地图\n\n  - 下载依赖：\n\n  ```bash\n    npm install @googlemaps/js-api-loader\n  ```\n\n  - 新建 GoogleMaps.vue 文件\n\n  ```html\n  <template>\n  \t<div id=\"myMap\" class=\"bg-#ccc w-full h-full\"></div>\n  </template>\n\n  <script setup>\n  \timport { onMounted, ref } from 'vue'\n  \timport { Loader } from '@googlemaps/js-api-loader'\n\n  \tonMounted(async () => {\n  \t\tconst loader = new Loader({\n  \t\t\tapiKey: 'AIzaSyDGp6YYslhnooIC1iEoVC0_QBmlJIxS2OQ', // Google Maps API 密钥\n  \t\t\tversion: 'weekly',\n  \t\t\tlibraries: [],\n  \t\t})\n\n  \t\ttry {\n  \t\t\tawait loader.load()\n  \t\t\tconst title = '清华大学'\n  \t\t\t// 位置坐标\n  \t\t\tconst myLatLng = { lat: 39.9389436, lng: 116.0678214 }\n  \t\t\t// 1、创建地图\n  \t\t\tconst theMap = await new google.maps.Map(\n  \t\t\t\tdocument.getElementById('myMap'),\n  \t\t\t\t{\n  \t\t\t\t\tzoom: 10, // 缩放级别，0全球视野—21建筑物级别\n  \t\t\t\t\tcenter: myLatLng, // 地图中心点的经纬度\n  \t\t\t\t\tmapId: 'XXXX_MAP_ID',\n  \t\t\t\t\tmaptype: 'satellite', // 地图类型: roadmap 标准道路地图、satellite 卫星图、terrain 地形图、hybrid混合图(卫星图像+道路标签)\n  \t\t\t\t}\n  \t\t\t)\n  \t\t\t// 2、添加地点标记\n  \t\t\tconst marker = await new google.maps.Marker({\n  \t\t\t\tmap: theMap,\n  \t\t\t\tposition: myLatLng,\n  \t\t\t\ttitle: title, // icon: \"path/to/custom-icon.png\", // 可选自定义图标\n  \t\t\t})\n  \t\t\t// 3、添加信息窗口\n  \t\t\tconst infoBox = await new google.maps.InfoWindow({\n  \t\t\t\tcontent: `\n                      <h3 style=\"line-height: 1;margin: 0 0 10px;padding: 0;\">清华大学</h3>\n                      <p>北京市海淀区清华园</p>\n                      <p>中华人民共和国教育部直属的全国重点大学，中央直管高校</p>\n                      <p>\"自强不息、厚德载物\"</p>\n                  `,\n  \t\t\t\tmaxWidth: 400,\n  \t\t\t})\n  \t\t\tmarker.addListener('click', () => {\n  \t\t\t\tinfoBox.open(theMap, marker)\n  \t\t\t})\n  \t\t} catch (error) {\n  \t\t\tconsole.error('加载Google地图 API 时出错:', error)\n  \t\t}\n  \t})\n  </script>\n  ```\n\n  - 使用：\n\n  ```html\n  <div class=\"w-full h-50vh max-h-500px\">\n  \t<GoogleMaps />\n  </div>\n  ```\n\n  - 效果图：\n\n    ![](/images/接入Google地图/maps.png)\n\n  - 【Tips】如上效果图有水印，其实 Google 地图已经使用成功了，只是 Google API 秘钥未正确使用(需要结算付款的...)\n","slug":"接入Google地图","published":1,"updated":"2025-07-31T09:59:35.014Z","comments":1,"layout":"post","photos":[],"_id":"cmdsas6n1001figncadfc6z7l","content":"<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li><p>Google API 秘钥</p>\n</li>\n<li><p>地址信息：经纬度、地点名称等</p>\n</li>\n</ul>\n<h3 id=\"获取-Google-API-密钥\"><a href=\"#获取-Google-API-密钥\" class=\"headerlink\" title=\"获取 Google API 密钥\"></a><a href=\"https://developers.google.com/maps/documentation/javascript/add-google-map-wc-tut?hl=zh-cn#key\">获取 Google API 密钥</a></h3><ul>\n<li><p>前往 <a href=\"https://console.cloud.google.com/projectselector2/google/maps-apis/overview\">Google Cloud 控制台</a>。</p>\n</li>\n<li><p>创建或选择一个项目。</p>\n</li>\n<li><p>点击继续，启用 API 和任何相关服务。</p>\n</li>\n<li><p>在凭据页面上，获取 API 密钥（并设置 API 密钥限制）。注意：如果您已有不受限的 API 密钥或存在浏览器限制的密钥，可以使用相应密钥。</p>\n</li>\n<li><p>如需防止配额盗用并保护 API 密钥，请参阅<a href=\"https://cloud.google.com/docs/authentication/api-keys?hl=zh-cn\">使用 API 密钥</a>。</p>\n</li>\n<li><p>启用结算功能。如需了解详情，请参阅<a href=\"https://developers.google.com/maps/documentation/javascript/usage-and-billing?hl=zh-cn&utm_source=devtools&utm_campaign=stable\">用量和结算</a>。</p>\n</li>\n<li><p>现在，您可以使用 API 密钥了。</p>\n</li>\n</ul>\n<h3 id=\"接入-Google-地图\"><a href=\"#接入-Google-地图\" class=\"headerlink\" title=\"接入 Google 地图\"></a>接入 Google 地图</h3><ul>\n<li><p><a href=\"https://www.google.com.hk/maps\">获取经纬度</a></p>\n<ul>\n<li>在地图上搜索地名，导航栏上会出现地名所在的经纬度<br><img src=\"/images/%E6%8E%A5%E5%85%A5Google%E5%9C%B0%E5%9B%BE/latlng.png\"></li>\n</ul>\n</li>\n<li><p>vue 项目接入 Google 地图</p>\n<ul>\n<li>下载依赖：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @googlemaps/js-api-loader</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>新建 GoogleMaps.vue 文件</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myMap&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bg-#ccc w-full h-full&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"keyword\">import</span> &#123; onMounted, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Loader</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@googlemaps/js-api-loader&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"title function_\">onMounted</span>(<span class=\"title function_\">async</span> () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"keyword\">const</span> loader = <span class=\"keyword\">new</span> <span class=\"title class_\">Loader</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"attr\">apiKey</span>: <span class=\"string\">&#x27;AIzaSyDGp6YYslhnooIC1iEoVC0_QBmlJIxS2OQ&#x27;</span>, <span class=\"comment\">// Google Maps API 密钥</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"attr\">version</span>: <span class=\"string\">&#x27;weekly&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"attr\">libraries</span>: [],</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"keyword\">try</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">await</span> loader.<span class=\"title function_\">load</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">const</span> title = <span class=\"string\">&#x27;清华大学&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"comment\">// 位置坐标</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">const</span> myLatLng = &#123; <span class=\"attr\">lat</span>: <span class=\"number\">39.9389436</span>, <span class=\"attr\">lng</span>: <span class=\"number\">116.0678214</span> &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"comment\">// 1、创建地图</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">const</span> theMap = <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> google.<span class=\"property\">maps</span>.<span class=\"title class_\">Map</span>(</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;myMap&#x27;</span>),</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t\t<span class=\"attr\">zoom</span>: <span class=\"number\">10</span>, <span class=\"comment\">// 缩放级别，0全球视野—21建筑物级别</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t\t<span class=\"attr\">center</span>: myLatLng, <span class=\"comment\">// 地图中心点的经纬度</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t\t<span class=\"attr\">mapId</span>: <span class=\"string\">&#x27;XXXX_MAP_ID&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t\t<span class=\"attr\">maptype</span>: <span class=\"string\">&#x27;satellite&#x27;</span>, <span class=\"comment\">// 地图类型: roadmap 标准道路地图、satellite 卫星图、terrain 地形图、hybrid混合图(卫星图像+道路标签)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t)</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"comment\">// 2、添加地点标记</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">const</span> marker = <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> google.<span class=\"property\">maps</span>.<span class=\"title class_\">Marker</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t<span class=\"attr\">map</span>: theMap,</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t<span class=\"attr\">position</span>: myLatLng,</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t<span class=\"attr\">title</span>: title, <span class=\"comment\">// icon: &quot;path/to/custom-icon.png&quot;, // 可选自定义图标</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"comment\">// 3、添加信息窗口</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">const</span> infoBox = <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> google.<span class=\"property\">maps</span>.<span class=\"title class_\">InfoWindow</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t<span class=\"attr\">content</span>: <span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                    &lt;h3 style=&quot;line-height: 1;margin: 0 0 10px;padding: 0;&quot;&gt;清华大学&lt;/h3&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                    &lt;p&gt;北京市海淀区清华园&lt;/p&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                    &lt;p&gt;中华人民共和国教育部直属的全国重点大学，中央直管高校&lt;/p&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                    &lt;p&gt;&quot;自强不息、厚德载物&quot;&lt;/p&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                `</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t<span class=\"attr\">maxWidth</span>: <span class=\"number\">400</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\tmarker.<span class=\"title function_\">addListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\tinfoBox.<span class=\"title function_\">open</span>(theMap, marker)</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t&#125; <span class=\"keyword\">catch</span> (error) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;加载Google地图 API 时出错:&#x27;</span>, error)</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;w-full h-50vh max-h-500px&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">GoogleMaps</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>效果图：</p>\n<p><img src=\"/images/%E6%8E%A5%E5%85%A5Google%E5%9C%B0%E5%9B%BE/maps.png\"></p>\n</li>\n<li><p>【Tips】如上效果图有水印，其实 Google 地图已经使用成功了，只是 Google API 秘钥未正确使用(需要结算付款的…)</p>\n</li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><ul>\n<li><p>Google API 秘钥</p>\n</li>\n<li><p>地址信息：经纬度、地点名称等</p>\n</li>\n</ul>\n<h3 id=\"获取-Google-API-密钥\"><a href=\"#获取-Google-API-密钥\" class=\"headerlink\" title=\"获取 Google API 密钥\"></a><a href=\"https://developers.google.com/maps/documentation/javascript/add-google-map-wc-tut?hl=zh-cn#key\">获取 Google API 密钥</a></h3><ul>\n<li><p>前往 <a href=\"https://console.cloud.google.com/projectselector2/google/maps-apis/overview\">Google Cloud 控制台</a>。</p>\n</li>\n<li><p>创建或选择一个项目。</p>\n</li>\n<li><p>点击继续，启用 API 和任何相关服务。</p>\n</li>\n<li><p>在凭据页面上，获取 API 密钥（并设置 API 密钥限制）。注意：如果您已有不受限的 API 密钥或存在浏览器限制的密钥，可以使用相应密钥。</p>\n</li>\n<li><p>如需防止配额盗用并保护 API 密钥，请参阅<a href=\"https://cloud.google.com/docs/authentication/api-keys?hl=zh-cn\">使用 API 密钥</a>。</p>\n</li>\n<li><p>启用结算功能。如需了解详情，请参阅<a href=\"https://developers.google.com/maps/documentation/javascript/usage-and-billing?hl=zh-cn&utm_source=devtools&utm_campaign=stable\">用量和结算</a>。</p>\n</li>\n<li><p>现在，您可以使用 API 密钥了。</p>\n</li>\n</ul>\n<h3 id=\"接入-Google-地图\"><a href=\"#接入-Google-地图\" class=\"headerlink\" title=\"接入 Google 地图\"></a>接入 Google 地图</h3><ul>\n<li><p><a href=\"https://www.google.com.hk/maps\">获取经纬度</a></p>\n<ul>\n<li>在地图上搜索地名，导航栏上会出现地名所在的经纬度<br><img src=\"/images/%E6%8E%A5%E5%85%A5Google%E5%9C%B0%E5%9B%BE/latlng.png\"></li>\n</ul>\n</li>\n<li><p>vue 项目接入 Google 地图</p>\n<ul>\n<li>下载依赖：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @googlemaps/js-api-loader</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>新建 GoogleMaps.vue 文件</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myMap&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bg-#ccc w-full h-full&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"keyword\">import</span> &#123; onMounted, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"keyword\">import</span> &#123; <span class=\"title class_\">Loader</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@googlemaps/js-api-loader&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t<span class=\"title function_\">onMounted</span>(<span class=\"title function_\">async</span> () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"keyword\">const</span> loader = <span class=\"keyword\">new</span> <span class=\"title class_\">Loader</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"attr\">apiKey</span>: <span class=\"string\">&#x27;AIzaSyDGp6YYslhnooIC1iEoVC0_QBmlJIxS2OQ&#x27;</span>, <span class=\"comment\">// Google Maps API 密钥</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"attr\">version</span>: <span class=\"string\">&#x27;weekly&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"attr\">libraries</span>: [],</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t<span class=\"keyword\">try</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">await</span> loader.<span class=\"title function_\">load</span>()</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">const</span> title = <span class=\"string\">&#x27;清华大学&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"comment\">// 位置坐标</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">const</span> myLatLng = &#123; <span class=\"attr\">lat</span>: <span class=\"number\">39.9389436</span>, <span class=\"attr\">lng</span>: <span class=\"number\">116.0678214</span> &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"comment\">// 1、创建地图</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">const</span> theMap = <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> google.<span class=\"property\">maps</span>.<span class=\"title class_\">Map</span>(</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;myMap&#x27;</span>),</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t\t<span class=\"attr\">zoom</span>: <span class=\"number\">10</span>, <span class=\"comment\">// 缩放级别，0全球视野—21建筑物级别</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t\t<span class=\"attr\">center</span>: myLatLng, <span class=\"comment\">// 地图中心点的经纬度</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t\t<span class=\"attr\">mapId</span>: <span class=\"string\">&#x27;XXXX_MAP_ID&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t\t<span class=\"attr\">maptype</span>: <span class=\"string\">&#x27;satellite&#x27;</span>, <span class=\"comment\">// 地图类型: roadmap 标准道路地图、satellite 卫星图、terrain 地形图、hybrid混合图(卫星图像+道路标签)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t)</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"comment\">// 2、添加地点标记</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">const</span> marker = <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> google.<span class=\"property\">maps</span>.<span class=\"title class_\">Marker</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t<span class=\"attr\">map</span>: theMap,</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t<span class=\"attr\">position</span>: myLatLng,</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t<span class=\"attr\">title</span>: title, <span class=\"comment\">// icon: &quot;path/to/custom-icon.png&quot;, // 可选自定义图标</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"comment\">// 3、添加信息窗口</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"keyword\">const</span> infoBox = <span class=\"keyword\">await</span> <span class=\"keyword\">new</span> google.<span class=\"property\">maps</span>.<span class=\"title class_\">InfoWindow</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t<span class=\"attr\">content</span>: <span class=\"string\">`</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                    &lt;h3 style=&quot;line-height: 1;margin: 0 0 10px;padding: 0;&quot;&gt;清华大学&lt;/h3&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                    &lt;p&gt;北京市海淀区清华园&lt;/p&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                    &lt;p&gt;中华人民共和国教育部直属的全国重点大学，中央直管高校&lt;/p&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                    &lt;p&gt;&quot;自强不息、厚德载物&quot;&lt;/p&gt;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"language-javascript\">                `</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\t<span class=\"attr\">maxWidth</span>: <span class=\"number\">400</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\tmarker.<span class=\"title function_\">addListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t\tinfoBox.<span class=\"title function_\">open</span>(theMap, marker)</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t&#125; <span class=\"keyword\">catch</span> (error) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&#x27;加载Google地图 API 时出错:&#x27;</span>, error)</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">\t&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用：</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;w-full h-50vh max-h-500px&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">GoogleMaps</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>效果图：</p>\n<p><img src=\"/images/%E6%8E%A5%E5%85%A5Google%E5%9C%B0%E5%9B%BE/maps.png\"></p>\n</li>\n<li><p>【Tips】如上效果图有水印，其实 Google 地图已经使用成功了，只是 Google API 秘钥未正确使用(需要结算付款的…)</p>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"【微信小程序实程】之准备工作详解","date":"2025-07-31T03:03:53.000Z","cover":"/images//微信小程序实战/准备工作/cover.jpg","_content":"\n### ✍️ 小程序和普通网页的区别\n\n- 运行环境不同\n  - 网页运行在浏览器环境中\n  - 小程序运行在微信小程序中\n- API 不同\n  - 小程序：由于运行环境不同，所以在小程序中无法调用 DOM 和 BOM 的 API\n  - 但是，小程序可以调用微信环境提供的各种 API\n    - 地理定位\n    - 扫码\n    - 支付\n    - ...\n- 开发模式不同\n  - 网页开发模式：浏览器+代码编辑器(Vscode、Cursor...)\n  - 小程序有自己的一套标准开发模式：\n    - 申请小程序开发账号\n    - 安装小程序开发者工具\n    - 创建和配置小程序项目\n\n### ✍️ 申请小程序账号\n\n- 开发微信小程序的第一步，是需要在[微信公众平台](https://mp.weixin.qq.com/)先申请一个小程序的账号，通过这个账号可以管理自己的小程序\n  ![](/images/微信小程序实战/准备工作/wxgzpt.png)\n\n- 点击“立即注册” -> 选择注册账号类型，微信公众平台提供了四种类型的账号注册，分别为：订阅号、服务号、小程序、企业微信\n  {% raw %}\n  <!-- ![](/images/微信小程序实战/准备工作/wxtype4.png) -->\n  {% endraw %}\n  <img src=\"/images/微信小程序实战/准备工作/wxtype4.png\" alt=\"image\" class=\"max600\"/>\n\n  - 订阅号，对所有主体开放，包括政府、企事业单位、非盈利性机构、社会组织、媒体、个人等，推送消息在用户消息盒子中显示，每天可以推送一次，对开发者提供的开放能力有限\n  - 服务号，不对个人主体开放，只对组织主体开放注册，包括政府、企事业单位、非盈利性机构、社会组织、媒体，推送消息在用户的消息列表中显示，对开发者提供更全面的开放能力\n  - 小程序，一种全新的连接用户与服务的方式，具有更加出色的交互体验，小程序内具有调用手机硬件能力，适合所有主体注册，为了保护用户隐私，尽量减少对用户的打扰，小程序不支持信息推送\n  - 企业微信，为企业提供更高效的协同办公体验，只对企业及组织开发注册权限\n\n- 注册小程序\n\n  - 小程序注册规则：\n\n    - 小程序的注册上限：\n      - 1）同一个邮箱只能申请 1 个小程序\n      - 2）同一个手机号码可绑定 5 个小程序\n      - 3）同一身份证注册个人类型小程序数量上限为 5 个\n      - 4）同一企业、政府、媒体、其他组织资料注册小程序数量上限为 50 个\n      - 5）同一个体工商户注册小程序数量上限为 5 个\n    - 小程序的绑定上限：\n      - 1）同一身份证可绑定 5 个小程序\n      - 2）同一手机号可绑定 5 个小程序\n      - 3）同一微信号可绑定 5 个小程序\n\n  - 账号信息：填写邮箱/验证码/密码 -> 注册\n    ![](/images/微信小程序实战/准备工作/registerAccount.png)\n\n  - 信息登记：选择主体类型\"个人\" -> 填写姓名/身份证号/手机号/短信验证 -> 扫码(扫码的微信号成为小程序账号的管理员) -> 继续\n    ![](/images/微信小程序实战/准备工作/infoRecord.png)\n\n  - 主体一旦提交并认证成功之后，被认证的主体信息不可变更\n    <img src=\"/images/微信小程序实战/准备工作/confirmInfo.png\" alt=\"image\" class=\"max450\"/>\n\n  - 提交后，等待官方对注册主体的认证结果，认证成功后，注册过程就结束了，就有了自己的小程序账号\n    ![](/images/微信小程序实战/准备工作/accountManage.png)\n\n- [微信公众平台](https://mp.weixin.qq.com/)\n  - 两种登录方式：邮箱+密码登录 、 微信扫码登录\n\n### ✍️ 微信开发者工具下载与安装\n\n- [微信开发者工具](https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html)下载\n  ![](/images/微信小程序实战/准备工作/wxtooldowload.png)\n\n- 安装步骤很简单：选择安装路径，一直下一步就好了\n  ![](/images/微信小程序实战/准备工作/wxtoolexe.png)\n\n- 微信扫码登录开发工具(游客模式功能受限)\n  ![](/images/微信小程序实战/准备工作/wxtool.png)\n\n### ✍️ 编写第一个小程序\n\n- 点击\"+\"创建小程序，填入项目名称和 appId\n  ![](/images/微信小程序实战/准备工作/createProject1.png)\n  ![](/images/微信小程序实战/准备工作/createProject0.png)\n\n- 默认项目效果如图：\n  ![](/images/微信小程序实战/准备工作/createProject2.png)\n\n- 熟悉：微信开发者工具的使用\n\n- 预览：微信开发者工具提供了两种在真机中预览小程序的方式\n\n  - 扫描二维码预览\n  - 自动预览，免去了每次看效果时都要扫码的步骤，点击工具栏中的“预览”按钮，然后在手机中保持微信的前台运行状态既可以自动唤出小程序\n    ![](/images/微信小程序实战/准备工作/preview.png)\n\n- 上传代码\n\n  - 填写版本号和 commit 备注信息\n    ![](/images/微信小程序实战/准备工作/uploadcode.png)\n\n  - 上传成功之后，需要管理员在小程序管理后台将本次上传设置为体验版本\n    ![](/images/微信小程序实战/准备工作/updateVersion.png)\n\n  - 体验版本，有一个二维码，扫码即可体验小程序\n    ![](/images/微信小程序实战/准备工作/updateVersion2.png)\n\n- 在后台中提交审核，待审核通过后即实现小程序的发布上线\n  - 【注】提交审核前，小程序还需备案，填写小程序的基本设置、第三方设置、关联设置等等\n    ![](/images/微信小程序实战/准备工作/release.png)\n\n### ✍️ 项目代码管理\n\n- [微信开发者·代码管理](https://developers.weixin.qq.com/miniprogram/dev/devtools/wechatvcs.html)\n\n- 或者使用自己熟悉的仓库存储源代码，比如 gitlab\n\n{% raw %}\n<!-- 防止 Hexo 标签冲突：Hexo 使用 {% %} 作为标签语法 -->\n<div id=\"box\">🔒点击一下我</div><span id=\"tips\"></span>\n<script>\n  document.getElementById('box').onclick = function(event) {\n    var tips = document.getElementById('tips')\n    if(!tips.innerText) {\n      tips.innerText = '🔑看到这里，你真是太棒了👍┗(•̀ᴗ•́)┛👍'\n    }\n    else {\n      tips.innerText = ''\n    }\n  }\n</script>\n<style>\n  #box {\n    display: inline-block;\n    border: 1px solid #666;\n    border-radius: 5px;\n    padding: 4px 12px;\n    margin-top: 20px;\n    cursor: pointer;\n  }\n  #tips {\n    margin: 0 0 0 15px;\n  }\n</style>\n{% endraw %}\n","source":"_posts/2025-07-31-【微信小程序实战】之准备工作详解.md","raw":"---\ntitle: 【微信小程序实程】之准备工作详解\ndate: 2025-07-31 11:03:53\ntags: 微信小程序\ncategories: 小程序\ncover: /images//微信小程序实战/准备工作/cover.jpg # 封面图\n---\n\n### ✍️ 小程序和普通网页的区别\n\n- 运行环境不同\n  - 网页运行在浏览器环境中\n  - 小程序运行在微信小程序中\n- API 不同\n  - 小程序：由于运行环境不同，所以在小程序中无法调用 DOM 和 BOM 的 API\n  - 但是，小程序可以调用微信环境提供的各种 API\n    - 地理定位\n    - 扫码\n    - 支付\n    - ...\n- 开发模式不同\n  - 网页开发模式：浏览器+代码编辑器(Vscode、Cursor...)\n  - 小程序有自己的一套标准开发模式：\n    - 申请小程序开发账号\n    - 安装小程序开发者工具\n    - 创建和配置小程序项目\n\n### ✍️ 申请小程序账号\n\n- 开发微信小程序的第一步，是需要在[微信公众平台](https://mp.weixin.qq.com/)先申请一个小程序的账号，通过这个账号可以管理自己的小程序\n  ![](/images/微信小程序实战/准备工作/wxgzpt.png)\n\n- 点击“立即注册” -> 选择注册账号类型，微信公众平台提供了四种类型的账号注册，分别为：订阅号、服务号、小程序、企业微信\n  {% raw %}\n  <!-- ![](/images/微信小程序实战/准备工作/wxtype4.png) -->\n  {% endraw %}\n  <img src=\"/images/微信小程序实战/准备工作/wxtype4.png\" alt=\"image\" class=\"max600\"/>\n\n  - 订阅号，对所有主体开放，包括政府、企事业单位、非盈利性机构、社会组织、媒体、个人等，推送消息在用户消息盒子中显示，每天可以推送一次，对开发者提供的开放能力有限\n  - 服务号，不对个人主体开放，只对组织主体开放注册，包括政府、企事业单位、非盈利性机构、社会组织、媒体，推送消息在用户的消息列表中显示，对开发者提供更全面的开放能力\n  - 小程序，一种全新的连接用户与服务的方式，具有更加出色的交互体验，小程序内具有调用手机硬件能力，适合所有主体注册，为了保护用户隐私，尽量减少对用户的打扰，小程序不支持信息推送\n  - 企业微信，为企业提供更高效的协同办公体验，只对企业及组织开发注册权限\n\n- 注册小程序\n\n  - 小程序注册规则：\n\n    - 小程序的注册上限：\n      - 1）同一个邮箱只能申请 1 个小程序\n      - 2）同一个手机号码可绑定 5 个小程序\n      - 3）同一身份证注册个人类型小程序数量上限为 5 个\n      - 4）同一企业、政府、媒体、其他组织资料注册小程序数量上限为 50 个\n      - 5）同一个体工商户注册小程序数量上限为 5 个\n    - 小程序的绑定上限：\n      - 1）同一身份证可绑定 5 个小程序\n      - 2）同一手机号可绑定 5 个小程序\n      - 3）同一微信号可绑定 5 个小程序\n\n  - 账号信息：填写邮箱/验证码/密码 -> 注册\n    ![](/images/微信小程序实战/准备工作/registerAccount.png)\n\n  - 信息登记：选择主体类型\"个人\" -> 填写姓名/身份证号/手机号/短信验证 -> 扫码(扫码的微信号成为小程序账号的管理员) -> 继续\n    ![](/images/微信小程序实战/准备工作/infoRecord.png)\n\n  - 主体一旦提交并认证成功之后，被认证的主体信息不可变更\n    <img src=\"/images/微信小程序实战/准备工作/confirmInfo.png\" alt=\"image\" class=\"max450\"/>\n\n  - 提交后，等待官方对注册主体的认证结果，认证成功后，注册过程就结束了，就有了自己的小程序账号\n    ![](/images/微信小程序实战/准备工作/accountManage.png)\n\n- [微信公众平台](https://mp.weixin.qq.com/)\n  - 两种登录方式：邮箱+密码登录 、 微信扫码登录\n\n### ✍️ 微信开发者工具下载与安装\n\n- [微信开发者工具](https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html)下载\n  ![](/images/微信小程序实战/准备工作/wxtooldowload.png)\n\n- 安装步骤很简单：选择安装路径，一直下一步就好了\n  ![](/images/微信小程序实战/准备工作/wxtoolexe.png)\n\n- 微信扫码登录开发工具(游客模式功能受限)\n  ![](/images/微信小程序实战/准备工作/wxtool.png)\n\n### ✍️ 编写第一个小程序\n\n- 点击\"+\"创建小程序，填入项目名称和 appId\n  ![](/images/微信小程序实战/准备工作/createProject1.png)\n  ![](/images/微信小程序实战/准备工作/createProject0.png)\n\n- 默认项目效果如图：\n  ![](/images/微信小程序实战/准备工作/createProject2.png)\n\n- 熟悉：微信开发者工具的使用\n\n- 预览：微信开发者工具提供了两种在真机中预览小程序的方式\n\n  - 扫描二维码预览\n  - 自动预览，免去了每次看效果时都要扫码的步骤，点击工具栏中的“预览”按钮，然后在手机中保持微信的前台运行状态既可以自动唤出小程序\n    ![](/images/微信小程序实战/准备工作/preview.png)\n\n- 上传代码\n\n  - 填写版本号和 commit 备注信息\n    ![](/images/微信小程序实战/准备工作/uploadcode.png)\n\n  - 上传成功之后，需要管理员在小程序管理后台将本次上传设置为体验版本\n    ![](/images/微信小程序实战/准备工作/updateVersion.png)\n\n  - 体验版本，有一个二维码，扫码即可体验小程序\n    ![](/images/微信小程序实战/准备工作/updateVersion2.png)\n\n- 在后台中提交审核，待审核通过后即实现小程序的发布上线\n  - 【注】提交审核前，小程序还需备案，填写小程序的基本设置、第三方设置、关联设置等等\n    ![](/images/微信小程序实战/准备工作/release.png)\n\n### ✍️ 项目代码管理\n\n- [微信开发者·代码管理](https://developers.weixin.qq.com/miniprogram/dev/devtools/wechatvcs.html)\n\n- 或者使用自己熟悉的仓库存储源代码，比如 gitlab\n\n{% raw %}\n<!-- 防止 Hexo 标签冲突：Hexo 使用 {% %} 作为标签语法 -->\n<div id=\"box\">🔒点击一下我</div><span id=\"tips\"></span>\n<script>\n  document.getElementById('box').onclick = function(event) {\n    var tips = document.getElementById('tips')\n    if(!tips.innerText) {\n      tips.innerText = '🔑看到这里，你真是太棒了👍┗(•̀ᴗ•́)┛👍'\n    }\n    else {\n      tips.innerText = ''\n    }\n  }\n</script>\n<style>\n  #box {\n    display: inline-block;\n    border: 1px solid #666;\n    border-radius: 5px;\n    padding: 4px 12px;\n    margin-top: 20px;\n    cursor: pointer;\n  }\n  #tips {\n    margin: 0 0 0 15px;\n  }\n</style>\n{% endraw %}\n","slug":"【微信小程序实战】之准备工作详解","published":1,"updated":"2025-08-01T04:01:54.063Z","comments":1,"layout":"post","photos":[],"_id":"cmdsas6n1001hignc75rp941o","content":"<h3 id=\"✍️-小程序和普通网页的区别\"><a href=\"#✍️-小程序和普通网页的区别\" class=\"headerlink\" title=\"✍️ 小程序和普通网页的区别\"></a>✍️ 小程序和普通网页的区别</h3><ul>\n<li>运行环境不同<ul>\n<li>网页运行在浏览器环境中</li>\n<li>小程序运行在微信小程序中</li>\n</ul>\n</li>\n<li>API 不同<ul>\n<li>小程序：由于运行环境不同，所以在小程序中无法调用 DOM 和 BOM 的 API</li>\n<li>但是，小程序可以调用微信环境提供的各种 API<ul>\n<li>地理定位</li>\n<li>扫码</li>\n<li>支付</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>开发模式不同<ul>\n<li>网页开发模式：浏览器+代码编辑器(Vscode、Cursor…)</li>\n<li>小程序有自己的一套标准开发模式：<ul>\n<li>申请小程序开发账号</li>\n<li>安装小程序开发者工具</li>\n<li>创建和配置小程序项目</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"✍️-申请小程序账号\"><a href=\"#✍️-申请小程序账号\" class=\"headerlink\" title=\"✍️ 申请小程序账号\"></a>✍️ 申请小程序账号</h3><ul>\n<li><p>开发微信小程序的第一步，是需要在<a href=\"https://mp.weixin.qq.com/\">微信公众平台</a>先申请一个小程序的账号，通过这个账号可以管理自己的小程序<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/wxgzpt.png\"></p>\n</li>\n<li><p>点击“立即注册” -&gt; 选择注册账号类型，微信公众平台提供了四种类型的账号注册，分别为：订阅号、服务号、小程序、企业微信</p>\n\n  <!-- ![](/images/微信小程序实战/准备工作/wxtype4.png) -->\n  \n<img src=\"/images/微信小程序实战/准备工作/wxtype4.png\" alt=\"image\" class=\"max600\"/>\n\n<ul>\n<li>订阅号，对所有主体开放，包括政府、企事业单位、非盈利性机构、社会组织、媒体、个人等，推送消息在用户消息盒子中显示，每天可以推送一次，对开发者提供的开放能力有限</li>\n<li>服务号，不对个人主体开放，只对组织主体开放注册，包括政府、企事业单位、非盈利性机构、社会组织、媒体，推送消息在用户的消息列表中显示，对开发者提供更全面的开放能力</li>\n<li>小程序，一种全新的连接用户与服务的方式，具有更加出色的交互体验，小程序内具有调用手机硬件能力，适合所有主体注册，为了保护用户隐私，尽量减少对用户的打扰，小程序不支持信息推送</li>\n<li>企业微信，为企业提供更高效的协同办公体验，只对企业及组织开发注册权限</li>\n</ul>\n</li>\n<li><p>注册小程序</p>\n<ul>\n<li><p>小程序注册规则：</p>\n<ul>\n<li>小程序的注册上限：<ul>\n<li>1）同一个邮箱只能申请 1 个小程序</li>\n<li>2）同一个手机号码可绑定 5 个小程序</li>\n<li>3）同一身份证注册个人类型小程序数量上限为 5 个</li>\n<li>4）同一企业、政府、媒体、其他组织资料注册小程序数量上限为 50 个</li>\n<li>5）同一个体工商户注册小程序数量上限为 5 个</li>\n</ul>\n</li>\n<li>小程序的绑定上限：<ul>\n<li>1）同一身份证可绑定 5 个小程序</li>\n<li>2）同一手机号可绑定 5 个小程序</li>\n<li>3）同一微信号可绑定 5 个小程序</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>账号信息：填写邮箱&#x2F;验证码&#x2F;密码 -&gt; 注册<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/registerAccount.png\"></p>\n</li>\n<li><p>信息登记：选择主体类型”个人” -&gt; 填写姓名&#x2F;身份证号&#x2F;手机号&#x2F;短信验证 -&gt; 扫码(扫码的微信号成为小程序账号的管理员) -&gt; 继续<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/infoRecord.png\"></p>\n</li>\n<li><p>主体一旦提交并认证成功之后，被认证的主体信息不可变更</p>\n<img src=\"/images/微信小程序实战/准备工作/confirmInfo.png\" alt=\"image\" class=\"max450\"/>\n</li>\n<li><p>提交后，等待官方对注册主体的认证结果，认证成功后，注册过程就结束了，就有了自己的小程序账号<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/accountManage.png\"></p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"https://mp.weixin.qq.com/\">微信公众平台</a></p>\n<ul>\n<li>两种登录方式：邮箱+密码登录 、 微信扫码登录</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"✍️-微信开发者工具下载与安装\"><a href=\"#✍️-微信开发者工具下载与安装\" class=\"headerlink\" title=\"✍️ 微信开发者工具下载与安装\"></a>✍️ 微信开发者工具下载与安装</h3><ul>\n<li><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html\">微信开发者工具</a>下载<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/wxtooldowload.png\"></p>\n</li>\n<li><p>安装步骤很简单：选择安装路径，一直下一步就好了<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/wxtoolexe.png\"></p>\n</li>\n<li><p>微信扫码登录开发工具(游客模式功能受限)<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/wxtool.png\"></p>\n</li>\n</ul>\n<h3 id=\"✍️-编写第一个小程序\"><a href=\"#✍️-编写第一个小程序\" class=\"headerlink\" title=\"✍️ 编写第一个小程序\"></a>✍️ 编写第一个小程序</h3><ul>\n<li><p>点击”+”创建小程序，填入项目名称和 appId<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/createProject1.png\"><br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/createProject0.png\"></p>\n</li>\n<li><p>默认项目效果如图：<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/createProject2.png\"></p>\n</li>\n<li><p>熟悉：微信开发者工具的使用</p>\n</li>\n<li><p>预览：微信开发者工具提供了两种在真机中预览小程序的方式</p>\n<ul>\n<li>扫描二维码预览</li>\n<li>自动预览，免去了每次看效果时都要扫码的步骤，点击工具栏中的“预览”按钮，然后在手机中保持微信的前台运行状态既可以自动唤出小程序<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/preview.png\"></li>\n</ul>\n</li>\n<li><p>上传代码</p>\n<ul>\n<li><p>填写版本号和 commit 备注信息<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/uploadcode.png\"></p>\n</li>\n<li><p>上传成功之后，需要管理员在小程序管理后台将本次上传设置为体验版本<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/updateVersion.png\"></p>\n</li>\n<li><p>体验版本，有一个二维码，扫码即可体验小程序<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/updateVersion2.png\"></p>\n</li>\n</ul>\n</li>\n<li><p>在后台中提交审核，待审核通过后即实现小程序的发布上线</p>\n<ul>\n<li>【注】提交审核前，小程序还需备案，填写小程序的基本设置、第三方设置、关联设置等等<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/release.png\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"✍️-项目代码管理\"><a href=\"#✍️-项目代码管理\" class=\"headerlink\" title=\"✍️ 项目代码管理\"></a>✍️ 项目代码管理</h3><ul>\n<li><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/wechatvcs.html\">微信开发者·代码管理</a></p>\n</li>\n<li><p>或者使用自己熟悉的仓库存储源代码，比如 gitlab</p>\n</li>\n</ul>\n\n<!-- 防止 Hexo 标签冲突：Hexo 使用 {% %} 作为标签语法 -->\n<div id=\"box\">🔒点击一下我</div><span id=\"tips\"></span>\n<script>\n  document.getElementById('box').onclick = function(event) {\n    var tips = document.getElementById('tips')\n    if(!tips.innerText) {\n      tips.innerText = '🔑看到这里，你真是太棒了👍┗(•̀ᴗ•́)┛👍'\n    }\n    else {\n      tips.innerText = ''\n    }\n  }\n</script>\n<style>\n  #box {\n    display: inline-block;\n    border: 1px solid #666;\n    border-radius: 5px;\n    padding: 4px 12px;\n    margin-top: 20px;\n    cursor: pointer;\n  }\n  #tips {\n    margin: 0 0 0 15px;\n  }\n</style>\n\n","excerpt":"","more":"<h3 id=\"✍️-小程序和普通网页的区别\"><a href=\"#✍️-小程序和普通网页的区别\" class=\"headerlink\" title=\"✍️ 小程序和普通网页的区别\"></a>✍️ 小程序和普通网页的区别</h3><ul>\n<li>运行环境不同<ul>\n<li>网页运行在浏览器环境中</li>\n<li>小程序运行在微信小程序中</li>\n</ul>\n</li>\n<li>API 不同<ul>\n<li>小程序：由于运行环境不同，所以在小程序中无法调用 DOM 和 BOM 的 API</li>\n<li>但是，小程序可以调用微信环境提供的各种 API<ul>\n<li>地理定位</li>\n<li>扫码</li>\n<li>支付</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>开发模式不同<ul>\n<li>网页开发模式：浏览器+代码编辑器(Vscode、Cursor…)</li>\n<li>小程序有自己的一套标准开发模式：<ul>\n<li>申请小程序开发账号</li>\n<li>安装小程序开发者工具</li>\n<li>创建和配置小程序项目</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"✍️-申请小程序账号\"><a href=\"#✍️-申请小程序账号\" class=\"headerlink\" title=\"✍️ 申请小程序账号\"></a>✍️ 申请小程序账号</h3><ul>\n<li><p>开发微信小程序的第一步，是需要在<a href=\"https://mp.weixin.qq.com/\">微信公众平台</a>先申请一个小程序的账号，通过这个账号可以管理自己的小程序<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/wxgzpt.png\"></p>\n</li>\n<li><p>点击“立即注册” -&gt; 选择注册账号类型，微信公众平台提供了四种类型的账号注册，分别为：订阅号、服务号、小程序、企业微信</p>\n\n  <!-- ![](/images/微信小程序实战/准备工作/wxtype4.png) -->\n  \n<img src=\"/images/微信小程序实战/准备工作/wxtype4.png\" alt=\"image\" class=\"max600\"/>\n\n<ul>\n<li>订阅号，对所有主体开放，包括政府、企事业单位、非盈利性机构、社会组织、媒体、个人等，推送消息在用户消息盒子中显示，每天可以推送一次，对开发者提供的开放能力有限</li>\n<li>服务号，不对个人主体开放，只对组织主体开放注册，包括政府、企事业单位、非盈利性机构、社会组织、媒体，推送消息在用户的消息列表中显示，对开发者提供更全面的开放能力</li>\n<li>小程序，一种全新的连接用户与服务的方式，具有更加出色的交互体验，小程序内具有调用手机硬件能力，适合所有主体注册，为了保护用户隐私，尽量减少对用户的打扰，小程序不支持信息推送</li>\n<li>企业微信，为企业提供更高效的协同办公体验，只对企业及组织开发注册权限</li>\n</ul>\n</li>\n<li><p>注册小程序</p>\n<ul>\n<li><p>小程序注册规则：</p>\n<ul>\n<li>小程序的注册上限：<ul>\n<li>1）同一个邮箱只能申请 1 个小程序</li>\n<li>2）同一个手机号码可绑定 5 个小程序</li>\n<li>3）同一身份证注册个人类型小程序数量上限为 5 个</li>\n<li>4）同一企业、政府、媒体、其他组织资料注册小程序数量上限为 50 个</li>\n<li>5）同一个体工商户注册小程序数量上限为 5 个</li>\n</ul>\n</li>\n<li>小程序的绑定上限：<ul>\n<li>1）同一身份证可绑定 5 个小程序</li>\n<li>2）同一手机号可绑定 5 个小程序</li>\n<li>3）同一微信号可绑定 5 个小程序</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>账号信息：填写邮箱&#x2F;验证码&#x2F;密码 -&gt; 注册<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/registerAccount.png\"></p>\n</li>\n<li><p>信息登记：选择主体类型”个人” -&gt; 填写姓名&#x2F;身份证号&#x2F;手机号&#x2F;短信验证 -&gt; 扫码(扫码的微信号成为小程序账号的管理员) -&gt; 继续<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/infoRecord.png\"></p>\n</li>\n<li><p>主体一旦提交并认证成功之后，被认证的主体信息不可变更</p>\n<img src=\"/images/微信小程序实战/准备工作/confirmInfo.png\" alt=\"image\" class=\"max450\"/>\n</li>\n<li><p>提交后，等待官方对注册主体的认证结果，认证成功后，注册过程就结束了，就有了自己的小程序账号<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/accountManage.png\"></p>\n</li>\n</ul>\n</li>\n<li><p><a href=\"https://mp.weixin.qq.com/\">微信公众平台</a></p>\n<ul>\n<li>两种登录方式：邮箱+密码登录 、 微信扫码登录</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"✍️-微信开发者工具下载与安装\"><a href=\"#✍️-微信开发者工具下载与安装\" class=\"headerlink\" title=\"✍️ 微信开发者工具下载与安装\"></a>✍️ 微信开发者工具下载与安装</h3><ul>\n<li><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html\">微信开发者工具</a>下载<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/wxtooldowload.png\"></p>\n</li>\n<li><p>安装步骤很简单：选择安装路径，一直下一步就好了<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/wxtoolexe.png\"></p>\n</li>\n<li><p>微信扫码登录开发工具(游客模式功能受限)<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/wxtool.png\"></p>\n</li>\n</ul>\n<h3 id=\"✍️-编写第一个小程序\"><a href=\"#✍️-编写第一个小程序\" class=\"headerlink\" title=\"✍️ 编写第一个小程序\"></a>✍️ 编写第一个小程序</h3><ul>\n<li><p>点击”+”创建小程序，填入项目名称和 appId<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/createProject1.png\"><br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/createProject0.png\"></p>\n</li>\n<li><p>默认项目效果如图：<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/createProject2.png\"></p>\n</li>\n<li><p>熟悉：微信开发者工具的使用</p>\n</li>\n<li><p>预览：微信开发者工具提供了两种在真机中预览小程序的方式</p>\n<ul>\n<li>扫描二维码预览</li>\n<li>自动预览，免去了每次看效果时都要扫码的步骤，点击工具栏中的“预览”按钮，然后在手机中保持微信的前台运行状态既可以自动唤出小程序<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/preview.png\"></li>\n</ul>\n</li>\n<li><p>上传代码</p>\n<ul>\n<li><p>填写版本号和 commit 备注信息<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/uploadcode.png\"></p>\n</li>\n<li><p>上传成功之后，需要管理员在小程序管理后台将本次上传设置为体验版本<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/updateVersion.png\"></p>\n</li>\n<li><p>体验版本，有一个二维码，扫码即可体验小程序<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/updateVersion2.png\"></p>\n</li>\n</ul>\n</li>\n<li><p>在后台中提交审核，待审核通过后即实现小程序的发布上线</p>\n<ul>\n<li>【注】提交审核前，小程序还需备案，填写小程序的基本设置、第三方设置、关联设置等等<br><img src=\"/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/release.png\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"✍️-项目代码管理\"><a href=\"#✍️-项目代码管理\" class=\"headerlink\" title=\"✍️ 项目代码管理\"></a>✍️ 项目代码管理</h3><ul>\n<li><p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/wechatvcs.html\">微信开发者·代码管理</a></p>\n</li>\n<li><p>或者使用自己熟悉的仓库存储源代码，比如 gitlab</p>\n</li>\n</ul>\n\n<!-- 防止 Hexo 标签冲突：Hexo 使用 {% %} 作为标签语法 -->\n<div id=\"box\">🔒点击一下我</div><span id=\"tips\"></span>\n<script>\n  document.getElementById('box').onclick = function(event) {\n    var tips = document.getElementById('tips')\n    if(!tips.innerText) {\n      tips.innerText = '🔑看到这里，你真是太棒了👍┗(•̀ᴗ•́)┛👍'\n    }\n    else {\n      tips.innerText = ''\n    }\n  }\n</script>\n<style>\n  #box {\n    display: inline-block;\n    border: 1px solid #666;\n    border-radius: 5px;\n    padding: 4px 12px;\n    margin-top: 20px;\n    cursor: pointer;\n  }\n  #tips {\n    margin: 0 0 0 15px;\n  }\n</style>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cmdsas6mk0003ignc0myw2sf6","category_id":"cmdsas6mp0007ignc78ac0vdd","_id":"cmdsas6mv000jigncfr690emb"},{"post_id":"cmdsas6mt000eigncdfswbh7d","category_id":"cmdsas6mp0007ignc78ac0vdd","_id":"cmdsas6mw000mignc06srd1r3"},{"post_id":"cmdsas6mr000bignc1shgahmf","category_id":"cmdsas6mu000fignc3d0v10f0","_id":"cmdsas6mx000pignc66szdcwf"},{"post_id":"cmdsas6mv000kignc0q5r2vg6","category_id":"cmdsas6mp0007ignc78ac0vdd","_id":"cmdsas6mx000tigncf5873pgt"},{"post_id":"cmdsas6mu000gignchfx587t1","category_id":"cmdsas6mw000lignc5uxv90mm","_id":"cmdsas6mx000uigncbpyh34ou"},{"post_id":"cmdsas6mv000iignc1dfg0z24","category_id":"cmdsas6mx000qignca35t15n3","_id":"cmdsas6my000xignc3cqr0n5c"},{"post_id":"cmdsas6n1001eignc79ps62bo","category_id":"cmdsas6mp0007ignc78ac0vdd","_id":"cmdsas6n2001iignchz1wbtd5"},{"post_id":"cmdsas6n1001hignc75rp941o","category_id":"cmdsas6n2001jignc5m525jql","_id":"cmdsas6n2001oigncbs1d83ej"}],"PostTag":[{"post_id":"cmdsas6mh0001ignc63d805ej","tag_id":"cmdsas6mm0004ignchmyb2jqu","_id":"cmdsas6mt000dignc14fx5hfr"},{"post_id":"cmdsas6mk0003ignc0myw2sf6","tag_id":"cmdsas6ms000cigncge4g741m","_id":"cmdsas6mx000oigncgvrh6blf"},{"post_id":"cmdsas6mk0003ignc0myw2sf6","tag_id":"cmdsas6mv000hignc4zat2yg8","_id":"cmdsas6mx000rignceum4a79i"},{"post_id":"cmdsas6mo0006ignca1k77mhl","tag_id":"cmdsas6mw000nignc4uveh1b9","_id":"cmdsas6my000wignc5or61o02"},{"post_id":"cmdsas6mo0006ignca1k77mhl","tag_id":"cmdsas6mx000signcfvijaodd","_id":"cmdsas6my000yignc0rh1dhxr"},{"post_id":"cmdsas6mr000bignc1shgahmf","tag_id":"cmdsas6my000vignceu64dcph","_id":"cmdsas6mz0012igncff43bidg"},{"post_id":"cmdsas6mr000bignc1shgahmf","tag_id":"cmdsas6my000zigncesjx9cdf","_id":"cmdsas6mz0013ignc2qii5o88"},{"post_id":"cmdsas6mr000bignc1shgahmf","tag_id":"cmdsas6my0010ignc3ji52ojp","_id":"cmdsas6mz0015igncf2zpd8f8"},{"post_id":"cmdsas6mu000gignchfx587t1","tag_id":"cmdsas6mz0011igncgzbk0daz","_id":"cmdsas6mz0017igncgo2cf5yo"},{"post_id":"cmdsas6mu000gignchfx587t1","tag_id":"cmdsas6mz0014ignca5f96xhk","_id":"cmdsas6mz0018ignc2pvsay7g"},{"post_id":"cmdsas6mv000iignc1dfg0z24","tag_id":"cmdsas6mz0016ignchnsbckdr","_id":"cmdsas6n0001bignc2ytha87l"},{"post_id":"cmdsas6mv000iignc1dfg0z24","tag_id":"cmdsas6mz0019ignc4o0oa9rx","_id":"cmdsas6n0001cignceuiqalxj"},{"post_id":"cmdsas6mv000kignc0q5r2vg6","tag_id":"cmdsas6n0001aignc5w2thk1k","_id":"cmdsas6n0001dignc4q3ad22n"},{"post_id":"cmdsas6n1001eignc79ps62bo","tag_id":"cmdsas6n1001gignc6h6o5ppq","_id":"cmdsas6n2001lignch0k3b986"},{"post_id":"cmdsas6n1001figncadfc6z7l","tag_id":"cmdsas6n2001kignc1bmkhuxj","_id":"cmdsas6n2001nignc4gkva5bx"},{"post_id":"cmdsas6n1001hignc75rp941o","tag_id":"cmdsas6n2001migncfm6b02dw","_id":"cmdsas6n2001pigncapgphuj2"}],"Tag":[{"name":"git","_id":"cmdsas6mm0004ignchmyb2jqu"},{"name":"forEach","_id":"cmdsas6ms000cigncge4g741m"},{"name":"async/await","_id":"cmdsas6mv000hignc4zat2yg8"},{"name":"nvm","_id":"cmdsas6mw000nignc4uveh1b9"},{"name":"nodejs","_id":"cmdsas6mx000signcfvijaodd"},{"name":"axios","_id":"cmdsas6my000vignceu64dcph"},{"name":"get","_id":"cmdsas6my000zigncesjx9cdf"},{"name":"post","_id":"cmdsas6my0010ignc3ji52ojp"},{"name":"hexo","_id":"cmdsas6mz0011igncgzbk0daz"},{"name":"gitlab","_id":"cmdsas6mz0014ignca5f96xhk"},{"name":"vite","_id":"cmdsas6mz0016ignchnsbckdr"},{"name":"vue-cli","_id":"cmdsas6mz0019ignc4o0oa9rx"},{"name":"setTimeout","_id":"cmdsas6n0001aignc5w2thk1k"},{"name":"event loop","_id":"cmdsas6n1001gignc6h6o5ppq"},{"name":"Google Maps","_id":"cmdsas6n2001kignc1bmkhuxj"},{"name":"微信小程序","_id":"cmdsas6n2001migncfm6b02dw"}]}}
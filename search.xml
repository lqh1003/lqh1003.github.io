<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git远程项目迁移</title>
    <url>/2025/07/11/git%E8%BF%9C%E7%A8%8B%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<h4 id="1、克隆待迁移的-git-项目到本地"><a href="#1、克隆待迁移的-git-项目到本地" class="headerlink" title="1、克隆待迁移的 git 项目到本地"></a>1、克隆待迁移的 git 项目到本地</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --mirror https://xxx/xxx/oldProject.git</span><br></pre></td></tr></table></figure>

<h4 id="2、进入本地克隆的-git-项目-cd-oldProject-git"><a href="#2、进入本地克隆的-git-项目-cd-oldProject-git" class="headerlink" title="2、进入本地克隆的 git 项目 cd oldProject.git"></a>2、进入本地克隆的 git 项目 cd oldProject.git</h4><h4 id="3、在-gitlib-上创建对应的空项目，https-xxx-xxx-newProject-git"><a href="#3、在-gitlib-上创建对应的空项目，https-xxx-xxx-newProject-git" class="headerlink" title="3、在 gitlib 上创建对应的空项目，https://xxx/xxx/newProject.git"></a>3、在 gitlib 上创建对应的空项目，<a href="https://xxx/xxx/newProject.git">https://xxx/xxx/newProject.git</a></h4><h4 id="4、在-oldProject-git-命令窗口下"><a href="#4、在-oldProject-git-命令窗口下" class="headerlink" title="4、在 oldProject.git 命令窗口下"></a>4、在 oldProject.git 命令窗口下</h4><ul>
<li>执行下方命令修改 git 地址为新项目地址：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote set-url origin https://xxx/xxx/newProject.git</span><br></pre></td></tr></table></figure>

<ul>
<li>推送已修改 git 到新地址，完成迁移</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -f origin --mirror</span><br></pre></td></tr></table></figure>

<h4 id="5、可以删除旧项目和-oldProject-git"><a href="#5、可以删除旧项目和-oldProject-git" class="headerlink" title="5、可以删除旧项目和 oldProject.git"></a>5、可以删除旧项目和 oldProject.git</h4>]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客</title>
    <url>/2025/07/11/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="微前端"><a href="#微前端" class="headerlink" title="微前端"></a>微前端</h2><p>微前端：（拆分与整合）将大型前端应用按业务模块（如电商的商品、订单、支付模块）拆分为子应用，每个子应用可使用不同的技术栈（Vue、React 等）独立开发&#x2F;部署&#x2F;维护&#x2F;更新[模块化性&#x2F;独立性]，最后整合成这个大项目。</p>
<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>独立的一个项目，浏览器端的网页、单页应用（SPA）、移动端 H5 页面等。</p>
<h2 id="大前端"><a href="#大前端" class="headerlink" title="大前端"></a>大前端</h2><p>（跨平台开发）大前端是前端技术的扩展与延伸，指通过一套前端技术栈（主要是 JS&#x2F;TS）覆盖更多平台和场景，打破传统前端仅局限于浏览器的边界，如：uniapp跨平台开发框架。</p>
]]></content>
  </entry>
  <entry>
    <title>forEach不能直接支持异步等待?</title>
    <url>/2025/07/14/forEach%E4%B8%8D%E8%83%BD%E7%9B%B4%E6%8E%A5%E6%94%AF%E6%8C%81%E5%BC%82%E6%AD%A5%E7%AD%89%E5%BE%85/</url>
    <content><![CDATA[<h4 id="forEach-的设计是同步执行回调函数："><a href="#forEach-的设计是同步执行回调函数：" class="headerlink" title="forEach 的设计是同步执行回调函数："></a>forEach 的设计是同步执行回调函数：</h4><ul>
<li>不会等待 Promise 解决</li>
<li>会立即执行所有回调（即使回调中包含异步操作）</li>
<li>没有内置机制来处理异步操作的完成</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// delay是返回Promise的延迟函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">delay</span> = (<span class="params">times</span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, rejected</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">			<span class="title function_">resolve</span>()</span><br><span class="line">		&#125;, times)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="示例对比："><a href="#示例对比：" class="headerlink" title="示例对比："></a>示例对比：</h5><ol>
<li>原始异步 forEach（不按顺序）</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">forEach</span>(<span class="title function_">async</span> (item) =&gt; &#123;</span><br><span class="line">	<span class="keyword">await</span> <span class="title function_">delay</span>(<span class="number">1000</span>)</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">process</span>() <span class="comment">// 会几乎同时输出1, 2, 3</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改后的同步执行版本</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">process</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) &#123;</span><br><span class="line">		<span class="keyword">await</span> <span class="title function_">delay</span>(<span class="number">1000</span>)</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">process</span>() <span class="comment">// 会每隔1秒依次输出1, 2, 3</span></span><br></pre></td></tr></table></figure>

<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul>
<li>顺序执行异步操作会显著增加总执行时间</li>
<li>如果不需要顺序执行，Promise.all 可能是更好的选择</li>
<li>在 Node.js 10+ 中，可以使用 for await…of 语法</li>
<li>选择哪种方法取决于你的具体需求，但通常 for…of 循环是最清晰易读的解决方案</li>
</ul>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>forEach</tag>
        <tag>async/await</tag>
      </tags>
  </entry>
  <entry>
    <title>nvm管理node</title>
    <url>/2025/07/14/nvm%E7%AE%A1%E7%90%86node/</url>
    <content><![CDATA[<h4 id="1、安装nvm"><a href="#1、安装nvm" class="headerlink" title="1、安装nvm"></a>1、安装nvm</h4><ul>
<li><p><a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a><br><img src="/images/nvm%E7%AE%A1%E7%90%86node/node.png"></p>
</li>
<li><p>点击<code>.exe</code>文件 → <code>accept</code> → nvm的安装路径 (<code>D:\NVM\nvm</code>) → 创建nodejs文件放在<code>D:\NVM\nvm</code>下 → 一直点击<code>next</code>安装完成</p>
</li>
</ul>
<h4 id="2、给该文件添加这两行命令"><a href="#2、给该文件添加这两行命令" class="headerlink" title="2、给该文件添加这两行命令"></a>2、给该文件添加这两行命令</h4><p>node_mirror: <a href="https://npm.taobao.org/mirrors/node/">https://npm.taobao.org/mirrors/node/</a><br>npm_mirror: <a href="https://npm.taobao.org/mirrors/npm/">https://npm.taobao.org/mirrors/npm/</a></p>
<p><img src="/images/nvm%E7%AE%A1%E7%90%86node/nvms1.png"><br><img src="/images/nvm%E7%AE%A1%E7%90%86node/nvms2.png"></p>
<h4 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h4><p><img src="/images/nvm%E7%AE%A1%E7%90%86node/path1.png"></p>
<h4 id="4、测试一下"><a href="#4、测试一下" class="headerlink" title="4、测试一下"></a>4、测试一下</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm -v  // 查看当前版本</span><br><span class="line">nvm --config </span><br><span class="line">nvm <span class="built_in">ls</span> // 查看已安装的node版本</span><br><span class="line">nvm install 版本号  // 下载对应node版本, nvm install 16.16.0</span><br><span class="line">nvm use 版本号 // 切换node版本, nvm use 16.16.0</span><br><span class="line">nvm on  // 开启nvm</span><br><span class="line">nvm off  // 关闭nvm</span><br><span class="line">nvm list available  // 查看node所有可以下载的版本</span><br><span class="line">node -v  // 查看node版本</span><br></pre></td></tr></table></figure>

<h4 id="Tips-如果原本电脑已安装某个版本的nodejs"><a href="#Tips-如果原本电脑已安装某个版本的nodejs" class="headerlink" title="Tips: 如果原本电脑已安装某个版本的nodejs"></a>Tips: 如果原本电脑已安装某个版本的nodejs</h4><ul>
<li>在安装nvm会检测是否安装某个版本的nodejs, 并提示该版本是否需要被nvm管理，如果选择是，该node的安装路径会自动变到对应的nvm安装目录下<br><img src="/images/nvm%E7%AE%A1%E7%90%86node/nvms3.png"></li>
<li>当 “<code>nvm install node版本</code>“ 时报错，可以改一下node镜像<br><img src="/images/nvm%E7%AE%A1%E7%90%86node/path2.png"></li>
</ul>
]]></content>
      <tags>
        <tag>nvm</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>get/post入参格式</title>
    <url>/2025/07/16/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="1、get-请求："><a href="#1、get-请求：" class="headerlink" title="1、get 请求："></a>1、get 请求：</h4><ul>
<li><p>用 params 入参</p>
</li>
<li><p>数据传递方式：通过 URL 形式参数传递，拼接在请求地址上</p>
</li>
<li><p>GET 请求是否可以设置  Content-Type？</p>
<ul>
<li><p>可以设置，但通常没有意义，因为 GET 请求的请求体通常为空。</p>
</li>
<li><p>如果强行设置  Content-Type，浏览器和服务器可能会忽略它。</p>
<p><img src="/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/get.png"></p>
</li>
</ul>
</li>
</ul>
<h3 id="2、post-请求："><a href="#2、post-请求：" class="headerlink" title="2、post 请求："></a>2、post 请求：</h3><p>（1）用 data 传参，data：普通对象、FormData 表单对象</p>
<p>（2）在前端开发中，发送 POST 请求时，正确设置 Content-Type 是非常重要的，因为它告诉服务器请求体的数据格式。</p>
<ul>
<li><code>application/json</code> 发送 JSON 格式的数据</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">submitCollectRecordDetail</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> data = &#123;</span><br><span class="line">		<span class="attr">sessionId</span>: <span class="string">&#x27;xzdfsd&#x27;</span>,</span><br><span class="line">		<span class="attr">languageCode</span>: <span class="string">&#x27;CH&#x27;</span>,</span><br><span class="line">		<span class="attr">itemCode</span>: <span class="string">&#x27;AMC&#x27;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">		<span class="attr">url</span>: <span class="string">&#x27;/apiGlobal/submitCollectRecordDetail&#x27;</span>,</span><br><span class="line">		<span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">		<span class="attr">data</span>: data,</span><br><span class="line">		<span class="attr">headers</span>: &#123;</span><br><span class="line">			<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/josn;charset=UTF-8&#x27;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/json1.png"><br><img src="/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/json2.png"><br><img src="/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/json3.png"></p>
<ul>
<li><code>application/x-www-form-urlencoded</code> 发送表单数据，键值对格式【<code>URLSearchParams</code>】 key1&#x3D;value1&amp;key2&#x3D;value2</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">submitCollectRecordDetail</span>(<span class="params">data</span>) &#123;</span><br><span class="line">	data = &#123;</span><br><span class="line">		<span class="attr">sessionId</span>: store.<span class="property">state</span>.<span class="property">MyToken</span>,</span><br><span class="line">		<span class="attr">languageCode</span>: store.<span class="property">state</span>.<span class="property">lKey</span>,</span><br><span class="line">		<span class="attr">itemCode</span>: store.<span class="property">state</span>.<span class="property">itemCode</span>,</span><br><span class="line">		...data,</span><br><span class="line">	&#125;</span><br><span class="line">	data = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(data).<span class="title function_">toString</span>()</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">		<span class="attr">url</span>: <span class="string">&#x27;/apiGlobal/submitCollectRecordDetail&#x27;</span>,</span><br><span class="line">		<span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">		<span class="attr">data</span>: data,</span><br><span class="line">		<span class="attr">headers</span>: &#123;</span><br><span class="line">			<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/urlencoded1.png"><br><img src="/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/urlencoded2.png"><br><img src="/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/urlencoded3.png"></p>
<ul>
<li><code>multipart/form-data</code> 发送表单数据，支持文件上传</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">submitCollectRecordDetail</span>(<span class="params">data</span>) &#123;</span><br><span class="line">	data = &#123;</span><br><span class="line">		<span class="attr">sessionId</span>: store.<span class="property">state</span>.<span class="property">MyToken</span>,</span><br><span class="line">		<span class="attr">languageCode</span>: store.<span class="property">state</span>.<span class="property">lKey</span>,</span><br><span class="line">		<span class="attr">itemCode</span>: store.<span class="property">state</span>.<span class="property">itemCode</span>,</span><br><span class="line">		...data,</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">	<span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">		obj.<span class="title function_">append</span>(key, data[key])</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">		<span class="attr">url</span>: <span class="string">&#x27;/apiGlobal/submitCollectRecordDetail&#x27;</span>,</span><br><span class="line">		<span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">		<span class="attr">data</span>: obj,</span><br><span class="line">		<span class="attr">headers</span>: &#123;</span><br><span class="line">			<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/formdata1.png"><br><img src="/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/formdata2.png"><br><img src="/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/formdata3.png"></p>
<h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><ul>
<li><p><code>multipart/form-data</code>  的  Content-Type：<br>使用  FormData  时，不要手动设置  Content-Type，浏览器会自动添加正确的  Content-Type  和边界（boundary）。</p>
</li>
<li><p>字符编码：如果需要指定字符编码，可以在  Content-Type  中添加  charset<br>例如：<code>Content-Type: application/json;charset=UTF-8</code></p>
</li>
<li><p>CORS 请求：<br>如果跨域请求，确保服务器支持  Content-Type，并在响应头中设置  <code>Access-Control-Allow-Headers</code></p>
</li>
<li><p>Postman 中看数据：<br>Get 请求，params 入参，在 params 中查看数据<br><img src="/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/params.png"><br>Post 请求，data 入参，在 body 中查看数据，还有数据格式(Content-Type 决定数据格式)<br><img src="/images/get-post%E5%85%A5%E5%8F%82%E6%A0%BC%E5%BC%8F/bodyData.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>axios</category>
      </categories>
      <tags>
        <tag>axios</tag>
        <tag>get</tag>
        <tag>post</tag>
      </tags>
  </entry>
  <entry>
    <title>js判断数据类型</title>
    <url>/2025/07/23/js%E5%88%A4%E6%96%AD%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h3 id="typeof-A-判断数据类型"><a href="#typeof-A-判断数据类型" class="headerlink" title="typeof A 判断数据类型"></a>typeof A 判断数据类型</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基础数据类型：数字、字符串、布尔值、未定义、空值、Symbol(ES6新增)、BigInt(ES2020新增)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">42</span>) <span class="comment">// &quot;number&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&#x27;Hello, world!&#x27;</span>) <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>) <span class="comment">// &quot;boolean&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>) <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>) <span class="comment">// &quot;object&quot; (这是一个历史遗留问题)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span>(<span class="string">&#x27;symbol&#x27;</span>)) <span class="comment">// &quot;symbol&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">123n</span>) <span class="comment">// &quot;bigint&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用数据类型：普通对象、数组、函数、new Date()等</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;) <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Date</span>()) <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125; || <span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Function</span>()) <span class="comment">// &quot;function&quot; (特殊)</span></span><br></pre></td></tr></table></figure>

<p>【注意】</p>
<ul>
<li>基础数据类型：typeof 返回对应类型，除了 null，typeof null 返回”object”是一个 JS 的历史遗留问题</li>
<li>数组 Array&#x2F;函数 Function&#x2F;new Date()&#x2F;new RegExp()&#x2F;new XXX 等都属于对象类型范畴，属于广义的”对象”，但不是狭义的”普通对象”，所以 typeof 判断类型都返回”object”，除了函数 Function</li>
<li>JavaScript 为了突出函数的”可执行性”和简化类型判断而做的特殊设计 —— 函数本质上是一种”可调用的对象”，但 typeof 刻意返回”function”来强调其特殊性</li>
</ul>
<h3 id="A-instanceof-B-判断数据类型"><a href="#A-instanceof-B-判断数据类型" class="headerlink" title="A instanceof B 判断数据类型"></a>A instanceof B 判断数据类型</h3><ul>
<li>instanceof  用于判断一个对象是否是另一个对象的实例</li>
<li>instanceof  对于内置对象类型和自定义类都有效</li>
<li>instanceof  对于原始类型无效，但可以通过构造函数包装对象进行判断</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个实例</span></span><br><span class="line"><span class="keyword">const</span> alice = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Alice&#x27;</span>)</span><br><span class="line"><span class="comment">// 判断实例与构造函数的关系</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alice <span class="keyword">instanceof</span> <span class="title class_">Person</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断内置对象类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>() <span class="keyword">instanceof</span> <span class="title class_">Date</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/regex/</span> <span class="keyword">instanceof</span> <span class="title class_">RegExp</span>) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 自定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> myDog = <span class="keyword">new</span> <span class="title class_">Dog</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myDog <span class="keyword">instanceof</span> <span class="title class_">Dog</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myDog <span class="keyword">instanceof</span> <span class="title class_">Animal</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myDog <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意 `instanceof` 只对对象有效，对原始类型无效</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">42</span> <span class="keyword">instanceof</span> <span class="title class_">Number</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span> <span class="keyword">instanceof</span> <span class="title class_">String</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> <span class="keyword">instanceof</span> <span class="title class_">Boolean</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于原始类型，可以使用构造函数包装对象进行判断</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">42</span>) <span class="keyword">instanceof</span> <span class="title class_">Number</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;Hello&#x27;</span>) <span class="keyword">instanceof</span> <span class="title class_">String</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>) <span class="keyword">instanceof</span> <span class="title class_">Boolean</span>) <span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> <span class="keyword">instanceof</span> <span class="literal">null</span> <span class="comment">// 控制台报错：右侧不是对象</span></span><br></pre></td></tr></table></figure>

<h3 id="Array-isArray-value-：专门用于判断一个值是否为数组"><a href="#Array-isArray-value-：专门用于判断一个值是否为数组" class="headerlink" title="Array.isArray(value)：专门用于判断一个值是否为数组"></a>Array.isArray(value)：专门用于判断一个值是否为数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;)) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="string">&#x27;Hello, world!&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 数字</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="number">42</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 布尔值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="literal">true</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// null</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="literal">null</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="literal">undefined</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// Date 对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())) <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 正则表达式</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="regexp">/regex/</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="判断是否为数组的方法"><a href="#判断是否为数组的方法" class="headerlink" title="判断是否为数组的方法"></a>判断是否为数组的方法</h3><ul>
<li>推荐使用<code>Array.isArray(arr)</code>方法，它是最简洁和可靠的，Es6 专门为此设计的方法</li>
<li><code>A instanceof B</code><br>const value &#x3D; [1, 2, 3];<br>console.log(value instanceof Array); &#x2F;&#x2F; true</li>
<li><code>Object.prototype.toString</code> (老方法)<br>const value &#x3D; [1, 2, 3];<br>console.log(Object.prototype.toString.call(value) &#x3D;&#x3D;&#x3D; ‘[object Array]’); &#x2F;&#x2F; true</li>
</ul>
<h3 id="写一个可以判断任意数据类型的方法（原生数据类型）"><a href="#写一个可以判断任意数据类型的方法（原生数据类型）" class="headerlink" title="写一个可以判断任意数据类型的方法（原生数据类型）"></a>写一个可以判断任意数据类型的方法（<code>原生数据类型</code>）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getType</span>(<span class="params">value</span>) &#123;</span><br><span class="line">	<span class="comment">// 使用 Object.prototype.toString.call() 获取类型标签</span></span><br><span class="line">	<span class="keyword">const</span> typeTag = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(value)</span><br><span class="line">	<span class="comment">// 从标签中提取类型名称（如 &quot;[object String]&quot; → &quot;String&quot;）</span></span><br><span class="line">	<span class="keyword">const</span> typeText = typeTag.<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">return</span> typeText <span class="comment">// 返回类型: 首字母大写的字符串</span></span><br><span class="line">	<span class="comment">// return typeText.toLowerCase();  // 全部小写</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试示例</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="string">&#x27;hello&#x27;</span>)) <span class="comment">// &quot;String&quot;（字符串）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="number">123</span>)) <span class="comment">// &quot;Number&quot;（数字）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="literal">true</span>)) <span class="comment">// &quot;Boolean&quot;（布尔值）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="literal">null</span>)) <span class="comment">// &quot;Null&quot;（null）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="literal">undefined</span>)) <span class="comment">// &quot;Undefined&quot;（undefined）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(&#123;&#125;)) <span class="comment">// &quot;Object&quot;（普通对象）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>([])) <span class="comment">// &quot;Array&quot;（数组）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)) <span class="comment">// &quot;Function&quot;（函数）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())) <span class="comment">// &quot;Date&quot;（日期对象）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="regexp">/\d+/</span>)) <span class="comment">// &quot;RegExp&quot;（正则对象）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="keyword">new</span> <span class="title class_">Map</span>())) <span class="comment">// &quot;Map&quot;（Map对象）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="keyword">new</span> <span class="title class_">WeakMap</span>())) <span class="comment">// &quot;WeakMap&quot;（WeakMap对象）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="keyword">new</span> <span class="title class_">Set</span>())) <span class="comment">// &quot;Set&quot;（Set对象）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="keyword">new</span> <span class="title class_">WeakSet</span>())) <span class="comment">// &quot;WeakSet&quot;（WeakSet对象）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="title class_">Symbol</span>())) <span class="comment">// &quot;Symbol&quot;（Symbol类型）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="keyword">new</span> <span class="title class_">Error</span>())) <span class="comment">// &quot;Error&quot;（错误对象）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">() =&gt;</span> &#123;&#125;))) <span class="comment">// &#x27;Promise&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">10</span>))) <span class="comment">// &#x27;Arraybuffer&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="keyword">new</span> <span class="title class_">Int32Array</span>())) <span class="comment">// &#x27;Typedarray&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getType</span>(<span class="title class_">NaN</span>)) <span class="comment">// &#x27;Number&#x27;（NaN属于数字类型）</span></span><br></pre></td></tr></table></figure>

<h3 id="写一个可以判断原生数据类型-自定义数据类型的方法"><a href="#写一个可以判断原生数据类型-自定义数据类型的方法" class="headerlink" title="写一个可以判断原生数据类型+自定义数据类型的方法"></a>写一个可以判断<code>原生数据类型+自定义数据类型</code>的方法</h3><ul>
<li><p>在 JS 中，除了原生数据类型，还可以自定义数据类型</p>
<ul>
<li>在 JavaScript 中，自定义数据类型通常通过构造函数（new 关键字）或 ES6 Class（class 关键字）实现，本质是创建具有特定属性和方法的对象类型</li>
<li>自定义数据类型，无法用 Object.prototype.toString.call()判断类型，得到的都是 Object<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> alice = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Alice&#x27;</span>, <span class="number">20</span>)</span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(alice) <span class="comment">// &#x27;[object Object]&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>先判断自定义数据类型，是则返回自定义数据类型的构造函数名，否则返回对应原生数据类型</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 综合判断所有数据类型，包括原生类型和自定义类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">value</span> - 需要判断类型的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">string</span>&#125; 类型名称（如 &#x27;number&#x27;、&#x27;string&#x27;、&#x27;array&#x27;、&#x27;Person&#x27;、&#x27;Book&#x27; 等）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFullType</span>(<span class="params">value</span>) &#123;</span><br><span class="line">	<span class="comment">// 处理TypedArray</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="title class_">ArrayBuffer</span>.<span class="title function_">isView</span>(value)) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&#x27;typedarray&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 处理自定义类型 —— 检查构造函数名称</span></span><br><span class="line">	<span class="keyword">if</span> (value.<span class="property">constructor</span> &amp;&amp; <span class="keyword">typeof</span> value.<span class="property">constructor</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">const</span> constructorName = value.<span class="property">constructor</span>.<span class="property">name</span></span><br><span class="line">		<span class="comment">// 排除Object构造函数（避免所有对象都返回&#x27;Object&#x27;）</span></span><br><span class="line">		<span class="keyword">if</span> (constructorName !== <span class="string">&#x27;Object&#x27;</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> constructorName</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 处理自定义标识（如果对象有Symbol.toStringTag）</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> value[<span class="title class_">Symbol</span>.<span class="property">toStringTag</span>] === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> value[<span class="title class_">Symbol</span>.<span class="property">toStringTag</span>]</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 判断原生数据类型</span></span><br><span class="line">	<span class="keyword">const</span> typeTag = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(value)</span><br><span class="line">	<span class="keyword">return</span> typeTag.<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>).<span class="title function_">toLowerCase</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试原生类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFullType</span>(<span class="string">&#x27;hello&#x27;</span>)) <span class="comment">// &#x27;string&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFullType</span>(<span class="number">123</span>)) <span class="comment">// &#x27;number&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFullType</span>(<span class="literal">true</span>)) <span class="comment">// &#x27;boolean&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFullType</span>(<span class="literal">null</span>)) <span class="comment">// &#x27;null&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFullType</span>(<span class="literal">undefined</span>)) <span class="comment">// &#x27;undefined&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFullType</span>([])) <span class="comment">// &#x27;array&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFullType</span>(&#123;&#125;)) <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFullType</span>(<span class="keyword">new</span> <span class="title class_">Date</span>())) <span class="comment">// &#x27;date&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFullType</span>(<span class="regexp">/\d+/</span>)) <span class="comment">// &#x27;regexp&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFullType</span>(<span class="keyword">new</span> <span class="title class_">Map</span>())) <span class="comment">// &#x27;map&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFullType</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;)) <span class="comment">// &#x27;function&#x27;</span></span><br><span class="line"><span class="comment">// 测试自定义构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFullType</span>(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>))) <span class="comment">// &#x27;Person&#x27;</span></span><br><span class="line"><span class="comment">// 测试ES6类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">	<span class="title function_">constructor</span>(<span class="params">title</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">title</span> = title</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFullType</span>(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&#x27;JavaScript指南&#x27;</span>))) <span class="comment">// &#x27;Book&#x27;</span></span><br><span class="line"><span class="comment">// 测试带自定义标识的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">	<span class="title function_">constructor</span>(<span class="params">id</span>) &#123;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">id</span> = id</span><br><span class="line">		<span class="variable language_">this</span>[<span class="title class_">Symbol</span>.<span class="property">toStringTag</span>] = <span class="string">&#x27;Product&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getFullType</span>(<span class="keyword">new</span> <span class="title class_">Product</span>(<span class="number">1001</span>))) <span class="comment">// &#x27;Product&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
  </entry>
  <entry>
    <title>搭建个人博客</title>
    <url>/2025/07/23/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="搭建开发环境-安装-node-js"><a href="#搭建开发环境-安装-node-js" class="headerlink" title="***搭建开发环境(安装 node.js)"></a>***搭建开发环境(安装 node.js)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm - v</span><br><span class="line">node - v // 检查是否安装完成</span><br></pre></td></tr></table></figure>

<h3 id="安装博客框架-hexo-脚手架"><a href="#安装博客框架-hexo-脚手架" class="headerlink" title="***安装博客框架 hexo 脚手架"></a>***安装博客框架 hexo 脚手架</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h3 id="切换到国内镜像源"><a href="#切换到国内镜像源" class="headerlink" title="***切换到国内镜像源"></a>***切换到国内镜像源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> https://registry.npmmirror.com  // 淘宝镜像源(安装更快)</span><br></pre></td></tr></table></figure>

<h3 id="搭建博客项目"><a href="#搭建博客项目" class="headerlink" title="***搭建博客项目"></a>***搭建博客项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init my-blog</span><br><span class="line"><span class="built_in">cd</span> my-blog</span><br><span class="line">npm i</span><br><span class="line">hexo server   // 本地预览博客，简写 hexo s</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo_init.png"></p>
<h3 id="代码托管到-gitlab-或-github"><a href="#代码托管到-gitlab-或-github" class="headerlink" title="***代码托管到 gitlab 或 github"></a>***代码托管到 gitlab 或 github</h3><ul>
<li><p>新建一个 gitlab 仓库，仓库名是 xxx.gitlab.io，xxx 是你的 gitlab 用户名</p>
</li>
<li><p>与本地仓库 my-blog 建立连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init   // 初始化.git</span><br><span class="line">git remote add origin https://gitlab.com/xxx.gitlab.io.git  // 建立连接</span><br><span class="line">git branch -M main  // 修改分支名称</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置 Hexo 部署</p>
<ul>
<li>安装 Gitlab Pages 部署插件 npm install hexo-deployer-git -D (hexo deploy 命令用到该插件)</li>
<li>修改  _config.yml  文件中的部署配置</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@gitlab.com:xxx.gitlab.io.gi</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 .gitlab-ci.yml （GitLab 内置功能 CI&#x2F;CD 的配置文件：代码部署上线全自动化）<br><img src="/images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/gitlab-ci-yml.png"></p>
</li>
<li><p>推送本地代码到远程</p>
<ul>
<li>可以新增 .gitignore 文件，忽略 node_modules 等代码提交</li>
<li>取消仓库 main 分支保护 Settings → Repository → Protected branches (如果代码推送失败，取消分支保护重新推送)</li>
<li>生成静态文件并部署代码到仓库：hexo clean; hexo generate; hexo deploy</li>
<li>推送到远程仓库 【每次推送代码会自动触发管道 CI&#x2F;CD】</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li>
<li><p>访问博客链接：Deploy → Pages → 可以找到博客链接 <a href="https://xxx.gitlab.io/">https://xxx.gitlab.io/</a> (等待 1-5 分钟就可以打开了)</p>
</li>
</ul>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="***扩展"></a>***扩展</h3><ul>
<li><p>如果在 Gitlab 没有找到 Pages，检查一下<code>仓库</code>以及<code>仓库所在项目组</code>的权限是否是最高权限且公开(Public)的</p>
</li>
<li><p>第一次推送代码到远程，我构建失败了(在 Build → Pipelines 下可以查看构建状态)</p>
<ul>
<li>找到构建失败的原因(我是因为需要进行账号或者身份认证认证)，解决之后重新推送代码即可<br><img src="/images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/gitRuning0.png"></li>
</ul>
</li>
<li><p>新增一篇博客内容</p>
<ul>
<li>执行 “hexo new post 文章标题 xxx” 创建一篇新博客<br><img src="/images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/firstBlog.png"></li>
<li>本地预览效果：hexo clean; hexo g; hexo d; hexo s</li>
<li>推送到远程【每次推送代码会自动触发管道 CI&#x2F;CI】<ul>
<li>当状态 Runing → Passed，即构建成功，刷新线上博客即可看到<br><img src="/images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/gitRuning.png"></li>
</ul>
</li>
</ul>
</li>
<li><p>更换博客主题，hexo 有很多开源免费的主题：<a href="https://hexo.io/themes">https://hexo.io/themes</a></p>
<ul>
<li>使用 npm 方式下载主题依赖，如 butterfly 主题官网 <a href="https://butterfly.js.org/">https://butterfly.js.org/</a><ul>
<li>在 Hexo 项目根目录下执行： npm install hexo-theme-butterfly -D</li>
<li>安装这个主题需要的插件：npm install hexo-renderer-pug hexo-renderer-stylus -D</li>
<li>修改 Hexo 根目录下的  _config.yml  文件 theme: butterfly</li>
<li>创建主题配置文件 _config.butterfly.yml，从 node_modules&#x2F;hexo-theme-butterfly&#x2F;_config.yml 复制默认配置到 _config.butterfly.yml 文件</li>
<li>重启查看效果：hexo clean; hexo g; hexo s (如下：主题修改成功)<br><img src="/images/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/hexo_themes.png"></li>
<li>将代码推送到远程，等构建完成(1-5 分钟)，线上博客链接的主题也完成了更换</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>gitlab</tag>
        <tag>Gitlab Pages</tag>
      </tags>
  </entry>
  <entry>
    <title>compoents下组件自动注册</title>
    <url>/2025/07/24/compoents%E4%B8%8B%E7%BB%84%E4%BB%B6%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%86%8C/</url>
    <content><![CDATA[<p><strong>Vue 项目常用的构建工具：Vue-cli、Webpack、Vite</strong></p>
<h3 id="构建工具是-vite"><a href="#构建工具是-vite" class="headerlink" title="**** 构建工具是 vite ****"></a>**** 构建工具是 vite ****</h3><ul>
<li>新建目录</li>
</ul>
<p><img src="/images/compoents%E4%B8%8B%E7%BB%84%E4%BB%B6%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%86%8C/vite_com.png"></p>
<ul>
<li>index.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自动注册全局组件components</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 在src/components目录下创建文件，即 src/components/xxx.vue</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 在src/components目录下创建目录及文件，即 src/components/xxx文件夹/xxx.vue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> components = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="title function_">glob</span>(<span class="string">&#x27;./**/**.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">install</span>(<span class="params">app</span>) &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">const</span> [key, value] <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">entries</span>(components)) &#123;</span><br><span class="line">		<span class="keyword">const</span> name = key.<span class="title function_">slice</span>(key.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>, key.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">		app.<span class="title function_">component</span>(name, <span class="title function_">defineAsyncComponent</span>(value))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>main.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> autoRegCom <span class="keyword">from</span> <span class="string">&#x27;@/components/index.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router).<span class="title function_">use</span>(autoRegCom).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>直接使用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Header</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Footer</span>&gt;</span><span class="tag">&lt;/<span class="name">Footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="构建工具不是-vite"><a href="#构建工具不是-vite" class="headerlink" title="**** 构建工具不是 vite ****"></a>**** 构建工具不是 vite ****</h3><ul>
<li>新建目录</li>
</ul>
<p><img src="/images/compoents%E4%B8%8B%E7%BB%84%E4%BB%B6%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%86%8C/vue_com.png"></p>
<ul>
<li>index.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局组件自动注册</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	<span class="title function_">installCom</span>(<span class="params">app</span>) &#123;</span><br><span class="line">		<span class="comment">// (&#x27;components文件夹下&#x27;, &#x27;是否取子集&#x27;, &#x27;正则匹配.vue结尾的的文件&#x27;)</span></span><br><span class="line">		<span class="keyword">const</span> ctx = <span class="built_in">require</span>.<span class="title function_">context</span>(<span class="string">&#x27;../components&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/\.vue$/</span>)</span><br><span class="line">		<span class="comment">// console.log(&#x27;ctx:&#x27;, ctx)</span></span><br><span class="line">		<span class="keyword">if</span> (ctx &amp;&amp; ctx.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">			ctx.<span class="title function_">keys</span>()?.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">				<span class="keyword">const</span> component = <span class="title function_">ctx</span>(item).<span class="property">default</span></span><br><span class="line">				<span class="keyword">let</span> path = (item || component.<span class="property">__file</span>)?.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">				<span class="keyword">const</span> componentName =</span><br><span class="line">					path &amp;&amp; path.<span class="property">length</span> &amp;&amp; path[path.<span class="property">length</span> - <span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">				<span class="comment">// console.log(componentName, component)</span></span><br><span class="line">				app.<span class="title function_">component</span>(componentName, component)</span><br><span class="line">			&#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>main.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> autoRegCom <span class="keyword">from</span> <span class="string">&#x27;@/components/index.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">autoRegCom.<span class="title function_">installCom</span>(app)</span><br></pre></td></tr></table></figure>

<ul>
<li>直接使用</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Header</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Footer</span>&gt;</span><span class="tag">&lt;/<span class="name">Footer</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>vite</tag>
        <tag>vue-cli</tag>
      </tags>
  </entry>
  <entry>
    <title>setTimeout与闭包</title>
    <url>/2025/07/28/setTimeout%E4%B8%8E%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">	<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">	&#125;, i * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>问题：上述代码的输出结果是什么？如何修改代码使其按预期输出 0 到 4？</li>
</ul>
<hr>
<ul>
<li><p>答案：输出结果是连续输出 5 个 5</p>
</li>
<li><p>原因：var 声明的变量没有块级作用域，setTimeout 中的回调函数会在循环结束(同步代码执行完成，异步队列开始轮训 setTimeout)后才执行，此时 i 的值已经变为 5</p>
</li>
<li><p>修改方案 1：可以使用 let 声明变量来解决这个问题，因为 let 有块级作用域，每个回调函数都会捕获到不同的 i 值</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改后的代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">	<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">	&#125;, i * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改方案 2：使用 setTimeout 的第三个参数，作为回调函数的参数传递进去，可以将当前 i 值传递给回调函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改后的代码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">	<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params">index</span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(index)</span><br><span class="line">	&#125;, i * <span class="number">1000</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>setTimeout</tag>
      </tags>
  </entry>
  <entry>
    <title>Event事件循环</title>
    <url>/2025/07/29/Event%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Start&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Timeout1&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">10000</span>)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Promise1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Timeout2&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> timmer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Interval&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Promise2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;End&#x27;</span>)</span><br><span class="line"><span class="built_in">clearInterval</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li>问题：请解释上述代码的执行顺序，为什么会按照这样的顺序输出结果？</li>
</ul>
<hr>
<ul>
<li><p>Event Loop：在事件循环机制中，任务分为 微任务(Promise 回调、DOM 变化监听等) 和 宏任务(setTimeout&#x2F;setInterval、DOM 事件回调 click&#x2F;scroll 等)</p>
</li>
<li><p>解答：</p>
<ul>
<li>代码开始执行，首先输出 <code>Start</code></li>
<li>遇到  <code>setTimeout(() =&gt; &#123; console.log(&#39;Timeout1&#39;); &#125;, 10000)</code>，它会在 10 秒后将回调函数  () &#x3D;&gt; { console.log(‘Timeout1’); }  放入宏任务队列</li>
<li>接着  <code>Promise.resolve().then(() =&gt; &#123; console.log(&#39;Promise1&#39;); &#125;)</code>，Promise.resolve()  会返回一个已解决的  Promise  对象，其  then  方法里的回调函数  () &#x3D;&gt; { console.log(‘Promise1’); }  会被添加到微任务队列</li>
<li>再碰到 <code>setTimeout(() =&gt; &#123; console.log(&#39;Timeout2&#39;); &#125;, 0)</code>，尽管延迟时间设为 0 毫秒，在 0 秒把回调函数  () &#x3D;&gt; { console.log(‘Timeout2’); }  放入宏任务队列</li>
<li>之后是 <code>setInterval(() =&gt; &#123; console.log(&#39;Interval&#39;); &#125;, 3000)</code>，它会在 3 秒后将回调函数  () &#x3D;&gt; { console.log(‘Interval’); }  放入宏任务队列，并且之后每隔 3 秒放入一次</li>
<li>又遇到 <code>Promise.resolve().then(() =&gt; &#123; console.log(&#39;Promise2&#39;); &#125;)</code>，then  方法的回调函数  () &#x3D;&gt; { console.log(‘Promise2’); }  会被加入微任务队列</li>
<li>接着输出 <code>End</code></li>
<li>接着执行 <code>clearInterval()</code> (clearInterval 是同步)，无任何入参，所以它不会清除任何定时器，也不会抛出错误</li>
<li><strong>当主线程的同步代码执行完后，事件循环会优先处理微任务队列</strong>，会输出  Promise1、接着输出 Promise2</li>
<li><strong>微任务队列处理完毕后，事件循环会从宏任务队列中取出任务执行</strong>，所以最后输出 Timeout2、3 次 Interval、Timeout1、n 次 Interval</li>
<li>综上所述，代码的输出顺序为 <code>Start、End、Promise1、Promise2、Timeout2、Interval、Interval、Interval、Timeout1、Interval、Interval、Interval...</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>event loop</tag>
      </tags>
  </entry>
  <entry>
    <title>接入Google地图</title>
    <url>/2025/07/30/%E6%8E%A5%E5%85%A5Google%E5%9C%B0%E5%9B%BE/</url>
    <content><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul>
<li><p>Google API 秘钥</p>
</li>
<li><p>地址信息：经纬度、地点名称等</p>
</li>
</ul>
<h3 id="获取-Google-API-密钥"><a href="#获取-Google-API-密钥" class="headerlink" title="获取 Google API 密钥"></a><a href="https://developers.google.com/maps/documentation/javascript/add-google-map-wc-tut?hl=zh-cn#key">获取 Google API 密钥</a></h3><ul>
<li><p>前往 <a href="https://console.cloud.google.com/projectselector2/google/maps-apis/overview">Google Cloud 控制台</a>。</p>
</li>
<li><p>创建或选择一个项目。</p>
</li>
<li><p>点击继续，启用 API 和任何相关服务。</p>
</li>
<li><p>在凭据页面上，获取 API 密钥（并设置 API 密钥限制）。注意：如果您已有不受限的 API 密钥或存在浏览器限制的密钥，可以使用相应密钥。</p>
</li>
<li><p>如需防止配额盗用并保护 API 密钥，请参阅<a href="https://cloud.google.com/docs/authentication/api-keys?hl=zh-cn">使用 API 密钥</a>。</p>
</li>
<li><p>启用结算功能。如需了解详情，请参阅<a href="https://developers.google.com/maps/documentation/javascript/usage-and-billing?hl=zh-cn&utm_source=devtools&utm_campaign=stable">用量和结算</a>。</p>
</li>
<li><p>现在，您可以使用 API 密钥了。</p>
</li>
</ul>
<h3 id="接入-Google-地图"><a href="#接入-Google-地图" class="headerlink" title="接入 Google 地图"></a>接入 Google 地图</h3><ul>
<li><p><a href="https://www.google.com.hk/maps">获取经纬度</a></p>
<ul>
<li>在地图上搜索地名，导航栏上会出现地名所在的经纬度<br><img src="/images/%E6%8E%A5%E5%85%A5Google%E5%9C%B0%E5%9B%BE/latlng.png"></li>
</ul>
</li>
<li><p>vue 项目接入 Google 地图</p>
<ul>
<li>下载依赖：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install @googlemaps/js-api-loader</span><br></pre></td></tr></table></figure>

<ul>
<li>新建 GoogleMaps.vue 文件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myMap&quot;</span> <span class="attr">class</span>=<span class="string">&quot;bg-#ccc w-full h-full&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">import</span> &#123; <span class="title class_">Loader</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@googlemaps/js-api-loader&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">onMounted</span>(<span class="title function_">async</span> () =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">const</span> loader = <span class="keyword">new</span> <span class="title class_">Loader</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">apiKey</span>: <span class="string">&#x27;AIzaSyDGp6YYslhnooIC1iEoVC0_QBmlJIxS2OQ&#x27;</span>, <span class="comment">// Google Maps API 密钥</span></span></span><br><span class="line"><span class="language-javascript">			<span class="attr">version</span>: <span class="string">&#x27;weekly&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">libraries</span>: [],</span></span><br><span class="line"><span class="language-javascript">		&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">await</span> loader.<span class="title function_">load</span>()</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">const</span> title = <span class="string">&#x27;清华大学&#x27;</span></span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 位置坐标</span></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">const</span> myLatLng = &#123; <span class="attr">lat</span>: <span class="number">39.9389436</span>, <span class="attr">lng</span>: <span class="number">116.0678214</span> &#125;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 1、创建地图</span></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">const</span> theMap = <span class="keyword">await</span> <span class="keyword">new</span> google.<span class="property">maps</span>.<span class="title class_">Map</span>(</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myMap&#x27;</span>),</span></span><br><span class="line"><span class="language-javascript">				&#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">zoom</span>: <span class="number">10</span>, <span class="comment">// 缩放级别，0全球视野—21建筑物级别</span></span></span><br><span class="line"><span class="language-javascript">					<span class="attr">center</span>: myLatLng, <span class="comment">// 地图中心点的经纬度</span></span></span><br><span class="line"><span class="language-javascript">					<span class="attr">mapId</span>: <span class="string">&#x27;XXXX_MAP_ID&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">maptype</span>: <span class="string">&#x27;satellite&#x27;</span>, <span class="comment">// 地图类型: roadmap 标准道路地图、satellite 卫星图、terrain 地形图、hybrid混合图(卫星图像+道路标签)</span></span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">			)</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 2、添加地点标记</span></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">const</span> marker = <span class="keyword">await</span> <span class="keyword">new</span> google.<span class="property">maps</span>.<span class="title class_">Marker</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">map</span>: theMap,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">position</span>: myLatLng,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">title</span>: title, <span class="comment">// icon: &quot;path/to/custom-icon.png&quot;, // 可选自定义图标</span></span></span><br><span class="line"><span class="language-javascript">			&#125;)</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 3、添加信息窗口</span></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">const</span> infoBox = <span class="keyword">await</span> <span class="keyword">new</span> google.<span class="property">maps</span>.<span class="title class_">InfoWindow</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">content</span>: <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                    &lt;h3 style=&quot;line-height: 1;margin: 0 0 10px;padding: 0;&quot;&gt;清华大学&lt;/h3&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                    &lt;p&gt;北京市海淀区清华园&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                    &lt;p&gt;中华人民共和国教育部直属的全国重点大学，中央直管高校&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                    &lt;p&gt;&quot;自强不息、厚德载物&quot;&lt;/p&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">                `</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">maxWidth</span>: <span class="number">400</span>,</span></span><br><span class="line"><span class="language-javascript">			&#125;)</span></span><br><span class="line"><span class="language-javascript">			marker.<span class="title function_">addListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">				infoBox.<span class="title function_">open</span>(theMap, marker)</span></span><br><span class="line"><span class="language-javascript">			&#125;)</span></span><br><span class="line"><span class="language-javascript">		&#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;加载Google地图 API 时出错:&#x27;</span>, error)</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w-full h-50vh max-h-500px&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">GoogleMaps</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>效果图：</p>
<p><img src="/images/%E6%8E%A5%E5%85%A5Google%E5%9C%B0%E5%9B%BE/maps.png"></p>
</li>
<li><p>【Tips】如上效果图有水印，其实 Google 地图已经使用成功了，只是 Google API 秘钥未正确使用(需要结算付款的…)</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>Google Maps</tag>
      </tags>
  </entry>
  <entry>
    <title>【微信小程序实战】之准备工作详解</title>
    <url>/2025/07/31/%E3%80%90%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98%E3%80%91%E4%B9%8B%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="✍️-小程序和普通网页的区别"><a href="#✍️-小程序和普通网页的区别" class="headerlink" title="✍️ 小程序和普通网页的区别"></a>✍️ 小程序和普通网页的区别</h3><ul>
<li>运行环境不同<ul>
<li>网页运行在浏览器环境中</li>
<li>小程序运行在微信小程序中</li>
</ul>
</li>
<li>API 不同<ul>
<li>小程序：由于运行环境不同，所以在小程序中无法调用 DOM 和 BOM 的 API</li>
<li>但是，小程序可以调用微信环境提供的各种 API<ul>
<li>地理定位</li>
<li>扫码</li>
<li>支付</li>
<li>…</li>
</ul>
</li>
</ul>
</li>
<li>开发模式不同<ul>
<li>网页开发模式：浏览器+代码编辑器(Vscode、Cursor…)</li>
<li>小程序有自己的一套标准开发模式：<ul>
<li>申请小程序开发账号</li>
<li>安装小程序开发者工具</li>
<li>创建和配置小程序项目</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="✍️-申请小程序账号"><a href="#✍️-申请小程序账号" class="headerlink" title="✍️ 申请小程序账号"></a>✍️ 申请小程序账号</h3><ul>
<li><p>开发微信小程序的第一步，是需要在<a href="https://mp.weixin.qq.com/">微信公众平台</a>先申请一个小程序的账号，通过这个账号可以管理自己的小程序<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/wxgzpt.png"></p>
</li>
<li><p>点击“立即注册” → 选择注册账号类型，微信公众平台提供了四种类型的账号注册，分别为：订阅号、服务号、小程序、企业微信</p>

  <!-- ![](/images/微信小程序实战/准备工作/wxtype4.png) -->
  
<img src="/images/微信小程序实战/准备工作/wxtype4.png" alt="image" class="max600"/>

<ul>
<li>订阅号，对所有主体开放，包括政府、企事业单位、非盈利性机构、社会组织、媒体、个人等，推送消息在用户消息盒子中显示，每天可以推送一次，对开发者提供的开放能力有限</li>
<li>服务号，不对个人主体开放，只对组织主体开放注册，包括政府、企事业单位、非盈利性机构、社会组织、媒体，推送消息在用户的消息列表中显示，对开发者提供更全面的开放能力</li>
<li>小程序，一种全新的连接用户与服务的方式，具有更加出色的交互体验，小程序内具有调用手机硬件能力，适合所有主体注册，为了保护用户隐私，尽量减少对用户的打扰，小程序不支持信息推送</li>
<li>企业微信，为企业提供更高效的协同办公体验，只对企业及组织开发注册权限</li>
</ul>
</li>
<li><p>注册小程序</p>
<ul>
<li><p>小程序注册规则：</p>
<ul>
<li>小程序的注册上限：<ul>
<li>1）同一个邮箱只能申请 1 个小程序</li>
<li>2）同一个手机号码可绑定 5 个小程序</li>
<li>3）同一身份证注册个人类型小程序数量上限为 5 个</li>
<li>4）同一企业、政府、媒体、其他组织资料注册小程序数量上限为 50 个</li>
<li>5）同一个体工商户注册小程序数量上限为 5 个</li>
</ul>
</li>
<li>小程序的绑定上限：<ul>
<li>1）同一身份证可绑定 5 个小程序</li>
<li>2）同一手机号可绑定 5 个小程序</li>
<li>3）同一微信号可绑定 5 个小程序</li>
</ul>
</li>
</ul>
</li>
<li><p>账号信息：填写邮箱&#x2F;验证码&#x2F;密码 → 注册<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/registerAccount.png"></p>
</li>
<li><p>信息登记：选择主体类型”个人” → 填写姓名&#x2F;身份证号&#x2F;手机号&#x2F;短信验证 → 扫码(扫码的微信号成为小程序账号的管理员) → 继续<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/infoRecord.png"></p>
</li>
<li><p>主体一旦提交并认证成功之后，被认证的主体信息不可变更</p>
<img src="/images/微信小程序实战/准备工作/confirmInfo.png" alt="image" class="max450"/>
</li>
<li><p>提交后，等待官方对注册主体的认证结果，认证成功后，注册过程就结束了，就有了自己的小程序账号<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/accountManage.png"></p>
</li>
</ul>
</li>
<li><p><a href="https://mp.weixin.qq.com/">微信公众平台</a></p>
<ul>
<li>两种登录方式：邮箱+密码登录 、 微信扫码登录</li>
</ul>
</li>
</ul>
<h3 id="✍️-微信开发者工具下载与安装"><a href="#✍️-微信开发者工具下载与安装" class="headerlink" title="✍️ 微信开发者工具下载与安装"></a>✍️ 微信开发者工具下载与安装</h3><ul>
<li><p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">微信开发者工具</a>下载<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/wxtooldowload.png"></p>
</li>
<li><p>安装步骤很简单：选择安装路径，一直下一步就好了<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/wxtoolexe.png"></p>
</li>
<li><p>微信扫码登录开发工具(游客模式功能受限)</p>
<img src="/images/微信小程序实战/准备工作/wxtool.png" alt="image" class="max600"/></li>
</ul>
<h3 id="✍️-编写第一个小程序"><a href="#✍️-编写第一个小程序" class="headerlink" title="✍️ 编写第一个小程序"></a>✍️ 编写第一个小程序</h3><ul>
<li><p>点击”+”创建小程序，AppId 填写刚申请的小程序账号上的，项目名称、后端服务、模板等都可以自行选择<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/createProject1.png"><br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/createProject0.png"></p>
</li>
<li><p>默认项目效果如图：<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/createProject2.png"></p>
</li>
<li><p>熟悉：微信开发者工具的使用</p>
</li>
<li><p>预览：微信开发者工具提供了两种在真机中预览小程序的方式</p>
<ul>
<li>扫描二维码预览</li>
<li>自动预览，免去了每次看效果时都要扫码的步骤，点击工具栏中的“预览”按钮，然后在手机中保持微信的前台运行状态既可以自动唤出小程序<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/preview.png"></li>
</ul>
</li>
<li><p>上传代码</p>
<ul>
<li><p>填写版本号和 commit 备注信息<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/uploadcode.png"></p>
</li>
<li><p>上传成功之后：微信公众平台(小程序管理后台) → 版本管理 → 需要管理员将本次上传设置为体验版本<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/updateVersion.png"></p>
</li>
<li><p>体验版本：有一个二维码，扫码即可体验小程序<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/updateVersion2.png"></p>
</li>
</ul>
</li>
<li><p>发布小程序：在后台中提交审核，待审核通过后即实现小程序的发布上线</p>
<ul>
<li><p>【注】提交审核前，小程序还需备案，填写小程序的基本设置、第三方设置、关联设置等等<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/release.png"></p>
</li>
<li><p>小程序的基本信息填写之后：小程序的名称和 logo 就出现在登录账号上了(可以更清晰的区分小程序了)<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/release1.png"></p>
</li>
</ul>
</li>
</ul>
<h3 id="✍️-代码管理-远程仓库"><a href="#✍️-代码管理-远程仓库" class="headerlink" title="✍️ 代码管理(远程仓库)"></a>✍️ 代码管理(远程仓库)</h3><ul>
<li><p>详细步骤可以在 <a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/wechatvcs.html">微信官方文档&#x2F;微信开发者·代码管理</a> 这里查看</p>
</li>
<li><p>我的步骤：</p>
<ul>
<li><p><a href="https://git.weixin.qq.com/">微信开发者·代码管理</a>，然后微信授权登录，面板如下所示：【和 gitlab、gitee、github 是一样的代码托管平台】<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/wx_git_magage.png"></p>
</li>
<li><p>Git 初始化：输入一个账号名称 lqh_wx (自定义)</p>
<img src="/images/微信小程序实战/准备工作/wx_git_account.png" alt="image" class="max500"/>
</li>
<li><p>Git 初始化：个人设置 → 账户 → 设置密码(自定义)</p>
<img src="/images/微信小程序实战/准备工作/wx_git_password.png" alt="image" class="max500"/>
</li>
<li><p>新建一个项目 wxDemo</p>
<img src="/images/微信小程序实战/准备工作/wx_git_newproject.png" alt="image" class="max600"/>
</li>
<li><p>在本地项目 wxDemo 中，执行 git 命令连接远程仓库 (第一次推送代码到远程需要账号&#x2F;密码验证)</p>
<img src="/images/微信小程序实战/准备工作/wx_git_link_origin.png" alt="image" class="max500"/>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin https://git.weixin.qq.com/lqh_wx/wxDemo.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;第一次提交&quot;</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/wx_git_push_origin.png"></p>
</li>
<li><p>代码推送到远程仓库，成功<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/wx_git_push_origin2.png"></p>
</li>
<li><p>后续开发提交远程，可以使用”版本管理”功能【类似于 Sourcetree】，也可在终端使用 git 命令推送代码<br><img src="/images/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/wx_git_version.png"></p>
</li>
</ul>
</li>
</ul>

<!-- 防止 Hexo 标签冲突：Hexo 使用 {% %} 作为标签语法 -->
<div id="box">🔒点击一下我</div><span id="tips"></span>
<script>
  document.getElementById('box').onclick = function(event) {
    var tips = document.getElementById('tips')
    if(!tips.innerText) {
      tips.innerText = '🔑看到这里，你真是太棒了👍┗(•̀ᴗ•́)┛👍'
    }
    else {
      tips.innerText = ''
    }
  }
</script>
<style>
  #box {
    display: inline-block;
    border: 1px solid #666;
    border-radius: 5px;
    padding: 4px 12px;
    margin-top: 20px;
    cursor: pointer;
  }
  #tips {
    margin: 0 0 0 15px;
  }
</style>

]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>css切割属性clip-path</title>
    <url>/2025/08/07/css%E5%88%87%E5%89%B2%E5%B1%9E%E6%80%A7clip-path/</url>
    <content><![CDATA[<h3 id="clip-path-属性切割图形"><a href="#clip-path-属性切割图形" class="headerlink" title="clip-path 属性切割图形"></a>clip-path 属性切割图形</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clipped-element</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">232</span>, <span class="number">53</span>, <span class="number">53</span>);</span><br><span class="line">	<span class="comment">/* 切割 clip-path */</span></span><br><span class="line"></span><br><span class="line">	<span class="attribute">clip-path</span>: none | circle | ellipse | inset | polygon | <span class="built_in">path</span>(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">	<span class="comment">/* 1、默认值none, 不切割 */</span></span><br><span class="line">	<span class="attribute">clip-path</span>: none;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 2、圆形 circle(radius at position) */</span></span><br><span class="line">	<span class="comment">/* 默认 (以中心为圆心，元素短边的一半为半径)*/</span></span><br><span class="line">	<span class="attribute">clip-path</span>: <span class="built_in">circle</span>();</span><br><span class="line">	<span class="comment">/* 切割一个以(10px, 30px)为圆心、半径为50px的圆，超出部分不可见，position的值：left、right、top、bottom、 x% y% 、x y */</span></span><br><span class="line">	<span class="attribute">clip-path</span>: <span class="built_in">circle</span>(<span class="number">50px</span> at <span class="number">10px</span> <span class="number">30px</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 3、椭圆 ellipse(rx ry at position) */</span></span><br><span class="line">	<span class="attribute">clip-path</span>: <span class="built_in">ellipse</span>(</span><br><span class="line"></span><br><span class="line">	); <span class="comment">/* 默认切割一个椭圆(以中心为中心，元素的两边长各一半为x和y方向的半径) */</span></span><br><span class="line">	<span class="attribute">clip-path</span>: <span class="built_in">ellipse</span>(<span class="number">50%</span> <span class="number">50%</span> at left <span class="number">50%</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 4、矩形 inset(top right bottom left round radius) */</span></span><br><span class="line">	<span class="attribute">clip-path</span>: <span class="built_in">inset</span>(<span class="number">20px</span> <span class="number">30px</span> <span class="number">40px</span> <span class="number">50px</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 5、多边形 polygon(x1 y1, x2 y2, ...)，x 和 y 分别是顶点的水平和垂直坐标，可以使用长度值或百分比 */</span></span><br><span class="line">	<span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(<span class="number">0</span> <span class="number">0</span>, <span class="number">50%</span> <span class="number">0</span>, <span class="number">100%</span> <span class="number">30%</span>, <span class="number">70%</span> <span class="number">100%</span>, <span class="number">0</span> <span class="number">50%</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 6、path(&#x27;d&#x27;)，d 是 SVG 路径的描述字符串，使用 SVG 路径数据来创建剪切区域，灵活性更高，可以创建复杂的形状 */</span></span><br><span class="line">	<span class="attribute">clip-path</span>: <span class="built_in">path</span>(</span><br><span class="line">		<span class="string">&#x27;M140 20C73 20 20 74 20 140c0 135 136 170 228 303 88-132 229-173 229-303 0-66-54-120-120-120-48 0-90 28-109 69-19-41-60-69-108-69z&#x27;</span></span><br><span class="line">	);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><ul>
<li><p>效果</p>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <style>
        :root {
            --clicp-width: 50px; /* 剪切区域宽度 */
            --elem-padding: 10px; /* 元素内边距 */
            --active-bg-color: #6f3ce7;
        }
        .clippedBox {
            display: flex;
            position: relative;
            margin: 30px;
        }
        .clipped-element1,
        .clipped-element2,
        .clipped-element3 {
            width: 260px;
            height: 70px;
            display: flex;
            align-items: center;
            box-sizing: border-box;
            background-color: #999;
            position: relative;
            color: white;
            font-weight: bold;
            justify-content: center;
        }
        /* 内边距 */
        .clipped-element1 {
            padding: 0 calc(var(--elem-padding) + var(--clicp-width)) 0 var(--elem-padding);
        }
        .clipped-element2 {
            margin: 0 calc(calc(var(--clicp-width) - 10px) * -1);
            padding: 0 calc(var(--elem-padding) + var(--clicp-width));
        }
        .clipped-element3 {
            padding: 0 var(--elem-padding) 0 calc(var(--elem-padding) + var(--clicp-width));
        }
        /* 第一个元素 */
        .clipped-element1 {
            border-radius: 10px 0 0 10px;
            clip-path: polygon(
                0 0,
                calc(100% - var(--clicp-width)) 0,
                100% 50%,
                calc(100% - var(--clicp-width)) 100%,
                0 100%
            );
        }
        /* 第二个元素 */
        .clipped-element2 {
            clip-path: polygon(
                0 0,
                calc(100% - var(--clicp-width)) 0,
                100% 50%,
                calc(100% - var(--clicp-width)) 100%,
                0 100%,
                var(--clicp-width) 50%
            );
        }
        /* 第三个元素 */
        .clipped-element3 {
            border-radius: 0 10px 10px 0;
            clip-path: polygon(
                0 0,
                100% 0,
                100% 100%,
                0 100%,
                var(--clicp-width) 50%
            );
        }
        /* 添加悬停效果 */
        .clipped-element1:hover,
        .clipped-element2:hover,
        .clipped-element3:hover {
            background-color: var(--active-bg-color);
            transform: scale(1.02);
            transition: all 0.3s ease;
        }
    </style>
</head>
<body>
    <div class="clippedBox">
        <div class="clipped-element1" onclick="clinkBtn(event)">未开始</div>
        <div class="clipped-element2" onclick="clinkBtn(event)">进行中</div>
        <div class="clipped-element3" onclick="clinkBtn(event)">已完成</div>
    </div>
</body>
<script>
    function clinkBtn(event) {
        const target = event.target
        if (target.classList.contains('clipped-element1')) {
            alert('未开始')
        } else if (target.classList.contains('clipped-element2')) {
            alert('进行中')
        } else if (target.classList.contains('clipped-element3')) {
            alert('已完成')
        }
    }
</script>
</html>
</li>
<li><p>代码</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			<span class="selector-pseudo">:root</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attr">--clicp-width</span>: <span class="number">50px</span>; <span class="comment">/* 剪切区域宽度 */</span></span></span><br><span class="line"><span class="language-css">				<span class="attr">--elem-padding</span>: <span class="number">10px</span>; <span class="comment">/* 元素内边距 */</span></span></span><br><span class="line"><span class="language-css">				<span class="attr">--active-bg-color</span>: <span class="number">#6f3ce7</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.clippedBox</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.clipped-element1</span>,</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.clipped-element2</span>,</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.clipped-element3</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">260px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">background-color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 内边距 */</span></span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.clipped-element1</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">padding</span>: <span class="number">0</span> <span class="built_in">calc</span>(<span class="built_in">var</span>(--elem-padding) + <span class="built_in">var</span>(--clicp-width)) <span class="number">0</span> <span class="built_in">var</span>(</span></span><br><span class="line"><span class="language-css">						--elem-padding</span></span><br><span class="line"><span class="language-css">					);</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.clipped-element2</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin</span>: <span class="number">0</span> <span class="built_in">calc</span>(<span class="built_in">calc</span>(<span class="built_in">var</span>(--clicp-width) - <span class="number">10px</span>) * -<span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">				<span class="attribute">padding</span>: <span class="number">0</span> <span class="built_in">calc</span>(<span class="built_in">var</span>(--elem-padding) + <span class="built_in">var</span>(--clicp-width));</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.clipped-element3</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">padding</span>: <span class="number">0</span> <span class="built_in">var</span>(--elem-padding) <span class="number">0</span> <span class="built_in">calc</span>(</span></span><br><span class="line"><span class="language-css">						<span class="built_in">var</span>(--elem-padding) + <span class="built_in">var</span>(--clicp-width)</span></span><br><span class="line"><span class="language-css">					);</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 第一个元素 */</span></span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.clipped-element1</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border-radius</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(</span></span><br><span class="line"><span class="language-css">					<span class="number">0</span> <span class="number">0</span>,</span></span><br><span class="line"><span class="language-css">					<span class="built_in">calc</span>(<span class="number">100%</span> - <span class="built_in">var</span>(--clicp-width)) <span class="number">0</span>,</span></span><br><span class="line"><span class="language-css">					<span class="number">100%</span> <span class="number">50%</span>,</span></span><br><span class="line"><span class="language-css">					<span class="built_in">calc</span>(<span class="number">100%</span> - <span class="built_in">var</span>(--clicp-width)) <span class="number">100%</span>,</span></span><br><span class="line"><span class="language-css">					<span class="number">0</span> <span class="number">100%</span></span></span><br><span class="line"><span class="language-css">				);</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 第二个元素 */</span></span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.clipped-element2</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(</span></span><br><span class="line"><span class="language-css">					<span class="number">0</span> <span class="number">0</span>,</span></span><br><span class="line"><span class="language-css">					<span class="built_in">calc</span>(<span class="number">100%</span> - <span class="built_in">var</span>(--clicp-width)) <span class="number">0</span>,</span></span><br><span class="line"><span class="language-css">					<span class="number">100%</span> <span class="number">50%</span>,</span></span><br><span class="line"><span class="language-css">					<span class="built_in">calc</span>(<span class="number">100%</span> - <span class="built_in">var</span>(--clicp-width)) <span class="number">100%</span>,</span></span><br><span class="line"><span class="language-css">					<span class="number">0</span> <span class="number">100%</span>,</span></span><br><span class="line"><span class="language-css">					<span class="built_in">var</span>(--clicp-width) <span class="number">50%</span></span></span><br><span class="line"><span class="language-css">				);</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 第三个元素 */</span></span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.clipped-element3</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(</span></span><br><span class="line"><span class="language-css">					<span class="number">0</span> <span class="number">0</span>,</span></span><br><span class="line"><span class="language-css">					<span class="number">100%</span> <span class="number">0</span>,</span></span><br><span class="line"><span class="language-css">					<span class="number">100%</span> <span class="number">100%</span>,</span></span><br><span class="line"><span class="language-css">					<span class="number">0</span> <span class="number">100%</span>,</span></span><br><span class="line"><span class="language-css">					<span class="built_in">var</span>(--clicp-width) <span class="number">50%</span></span></span><br><span class="line"><span class="language-css">				);</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="comment">/* 添加悬停效果 */</span></span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.clipped-element1</span><span class="selector-pseudo">:hover</span>,</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.clipped-element2</span><span class="selector-pseudo">:hover</span>,</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.clipped-element3</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">background-color</span>: <span class="built_in">var</span>(--active-bg-color);</span></span><br><span class="line"><span class="language-css">				<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.02</span>);</span></span><br><span class="line"><span class="language-css">				<span class="attribute">transition</span>: all <span class="number">0.3s</span> ease;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clippedBox&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clipped-element1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;clinkBtn(event)&quot;</span>&gt;</span>未开始<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clipped-element2&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;clinkBtn(event)&quot;</span>&gt;</span>进行中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clipped-element3&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;clinkBtn(event)&quot;</span>&gt;</span>已完成<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">function</span> <span class="title function_">clinkBtn</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">const</span> target = event.<span class="property">target</span></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">if</span> (target.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;clipped-element1&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="title function_">alert</span>(<span class="string">&#x27;未开始&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (target.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;clipped-element2&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="title function_">alert</span>(<span class="string">&#x27;进行中&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (target.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;clipped-element3&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="title function_">alert</span>(<span class="string">&#x27;已完成&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">			&#125;</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例 2"></a>示例 2</h3><ul>
<li><p>效果</p>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <style>
        .imgError {
                background-color: #ededed;
            border-radius: 10px;
                position: relative;
            width: 600px;
            height: 360px;
            margin: 30px;
            overflow: hidden;
        }
            .clipped1, .clipped2 {
                position: absolute;
                top: 0;
                left: 0;
            width: 100%;
            height: 100%;
                background-color: rgba(95, 74, 254, 0.283);
                mask: linear-gradient(to left, rgba(0, 0, 0, 1), rgba(0, 0, 0, 0.2));
            }
        .clipped1 {
            clip-path: ellipse(33% 40% at 31.5% 110%);
        }
        .clipped2 {
            clip-path: ellipse(55% 60% at 96% 110%);
        }
        .clipped3 {
                position: absolute;
                top: 0;
                left: 0;
            width: 100%;
            height: 100%;
            background-color: rgb(249, 88, 70);
            clip-path: circle(45px at 30% 20%);
                /* mask: linear-gradient(to left, rgba(0, 0, 0, 1), rgba(0, 0, 0, 0.8)); */
        }
    </style>
</head>
<body>
    <div class="imgError">
        <div class="clipped1"></div>
        <div class="clipped2"></div>
        <div class="clipped3"></div>
    </div>
</body>
</html>
</li>
<li><p>代码</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.imgError</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">background-color</span>: <span class="number">#ededed</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">360px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.clipped1</span>,</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.clipped2</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">95</span>, <span class="number">74</span>, <span class="number">254</span>, <span class="number">0.283</span>);</span></span><br><span class="line"><span class="language-css">				<span class="attribute">mask</span>: <span class="built_in">linear-gradient</span>(to left, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>), <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>));</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.clipped1</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">clip-path</span>: <span class="built_in">ellipse</span>(<span class="number">33%</span> <span class="number">40%</span> at <span class="number">31.5%</span> <span class="number">110%</span>);</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.clipped2</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">clip-path</span>: <span class="built_in">ellipse</span>(<span class="number">55%</span> <span class="number">60%</span> at <span class="number">96%</span> <span class="number">110%</span>);</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.clipped3</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">249</span>, <span class="number">88</span>, <span class="number">70</span>);</span></span><br><span class="line"><span class="language-css">				<span class="attribute">clip-path</span>: <span class="built_in">circle</span>(<span class="number">45px</span> at <span class="number">30%</span> <span class="number">20%</span>);</span></span><br><span class="line"><span class="language-css">				<span class="comment">/* mask: linear-gradient(to left, rgba(0, 0, 0, 1), rgba(0, 0, 0, 0.8)); */</span></span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;imgError&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clipped1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clipped2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clipped3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>clip-path</tag>
      </tags>
  </entry>
  <entry>
    <title>词云图</title>
    <url>/2025/08/21/%E8%AF%8D%E4%BA%91%E5%9B%BE/</url>
    <content><![CDATA[<h3 id="首先确保-echarts-和-echarts-wordcloud-都已正确安装，且版本兼容（echarts-wordcloud-需要与-echarts-主版本匹配）。"><a href="#首先确保-echarts-和-echarts-wordcloud-都已正确安装，且版本兼容（echarts-wordcloud-需要与-echarts-主版本匹配）。" class="headerlink" title="首先确保 echarts 和 echarts-wordcloud 都已正确安装，且版本兼容（echarts-wordcloud 需要与 echarts 主版本匹配）。"></a>首先确保 echarts 和 echarts-wordcloud 都已正确安装，且版本兼容（echarts-wordcloud 需要与 echarts 主版本匹配）。</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装兼容版本（推荐最新稳定版）</span></span><br><span class="line">npm install echarts@5.4.3 echarts-wordcloud@2.1.0 --save</span><br></pre></td></tr></table></figure>

<h3 id="使用-vue3-语法-Element-Plus"><a href="#使用-vue3-语法-Element-Plus" class="headerlink" title="使用(vue3 语法 + Element-Plus)"></a>使用(vue3 语法 + Element-Plus)</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;containter-content&quot;</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- 控制区域 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleRefresh&quot;</span>&gt;</span>刷新数据<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;toggleRotation&quot;</span>&gt;</span>切换旋转模式<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;currentShape&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;handleShapeChange&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">					<span class="attr">v-for</span>=<span class="string">&quot;(item, index) in shapeList&quot;</span></span></span><br><span class="line"><span class="tag">					<span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">					<span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span></span></span><br><span class="line"><span class="tag">					<span class="attr">:value</span>=<span class="string">&quot;item.value&quot;</span></span></span><br><span class="line"><span class="tag">				&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 词云容器 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&quot;chartRef&quot;</span> <span class="attr">class</span>=<span class="string">&quot;chart-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">&lt;!-- 点击信息 --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;activeWord&quot;</span>&gt;</span></span><br><span class="line">			选中：<span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; activeWord.name &#125;&#125;&lt;/strong</span><br><span class="line">			&gt;，权重：&#123;&#123; activeWord.value &#125;&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, onMounted, onUnmounted, nextTick &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="string">&#x27;echarts-wordcloud&#x27;</span> <span class="comment">// 引入词云扩展</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 图表容器引用</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> chartRef = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// ECharts实例</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> chartInstance = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 当前选中的词</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> activeWord = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 是否开启旋转</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> isRotating = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 当前形状</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> currentShape = <span class="title function_">ref</span>(<span class="string">&#x27;square&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> shapeList = <span class="title function_">ref</span>([</span></span><br><span class="line"><span class="language-javascript">	&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">label</span>: <span class="string">&#x27;正方形&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">value</span>: <span class="string">&#x27;square&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">label</span>: <span class="string">&#x27;圆形&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">value</span>: <span class="string">&#x27;circle&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">label</span>: <span class="string">&#x27;心形&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">value</span>: <span class="string">&#x27;cardioid&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">label</span>: <span class="string">&#x27;菱形&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">value</span>: <span class="string">&#x27;diamond&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">label</span>: <span class="string">&#x27;正三角形（尖端朝上）&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">value</span>: <span class="string">&#x27;triangle-forward&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">label</span>: <span class="string">&#x27;倒三角形（尖端朝下）&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">value</span>: <span class="string">&#x27;triangle&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">label</span>: <span class="string">&#x27;星形&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">value</span>: <span class="string">&#x27;star&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">label</span>: <span class="string">&#x27;五边形&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">value</span>: <span class="string">&#x27;pentagon&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">	&#125;,</span></span><br><span class="line"><span class="language-javascript">])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 原始词云数据（name:关键词, value:权重）</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> wordData = [</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;健康保险&#x27;</span>, <span class="attr">value</span>: <span class="number">100</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;阅读协议&#x27;</span>, <span class="attr">value</span>: <span class="number">80</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;普通设备机&#x27;</span>, <span class="attr">value</span>: <span class="number">70</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;性别ocr识别不一致&#x27;</span>, <span class="attr">value</span>: <span class="number">65</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;额度B&#x27;</span>, <span class="attr">value</span>: <span class="number">60</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;没有安装D等级app&#x27;</span>, <span class="attr">value</span>: <span class="number">55</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;全职&#x27;</span>, <span class="attr">value</span>: <span class="number">90</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;近30天没有安装银行app&#x27;</span>, <span class="attr">value</span>: <span class="number">50</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;子女教育&#x27;</span>, <span class="attr">value</span>: <span class="number">45</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;认证未过切页面&#x27;</span>, <span class="attr">value</span>: <span class="number">40</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;0核数&#x27;</span>, <span class="attr">value</span>: <span class="number">35</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;决策正常&#x27;</span>, <span class="attr">value</span>: <span class="number">30</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;近15天未有优质短信&#x27;</span>, <span class="attr">value</span>: <span class="number">25</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;响应式&#x27;</span>, <span class="attr">value</span>: <span class="number">40</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;HTML5&#x27;</span>, <span class="attr">value</span>: <span class="number">35</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;CSS3&#x27;</span>, <span class="attr">value</span>: <span class="number">30</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;预审批&#x27;</span>, <span class="attr">value</span>: <span class="number">20</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;双鱼座&#x27;</span>, <span class="attr">value</span>: <span class="number">15</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;近9999天有申请成功&#x27;</span>, <span class="attr">value</span>: <span class="number">85</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;中学&#x27;</span>, <span class="attr">value</span>: <span class="number">10</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;没有孩子&#x27;</span>, <span class="attr">value</span>: <span class="number">5</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;财务类频繁安装正常&#x27;</span>, <span class="attr">value</span>: <span class="number">22</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;低到中度使用&#x27;</span>, <span class="attr">value</span>: <span class="number">18</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;词云图&#x27;</span>, <span class="attr">value</span>: <span class="number">65</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;前端开发&#x27;</span>, <span class="attr">value</span>: <span class="number">55</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;Vue3&#x27;</span>, <span class="attr">value</span>: <span class="number">80</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;JavaScript&#x27;</span>, <span class="attr">value</span>: <span class="number">70</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;js2wordcloud&#x27;</span>, <span class="attr">value</span>: <span class="number">60</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;Composition API&#x27;</span>, <span class="attr">value</span>: <span class="number">50</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;组件化&#x27;</span>, <span class="attr">value</span>: <span class="number">45</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;交互&#x27;</span>, <span class="attr">value</span>: <span class="number">25</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;可视化&#x27;</span>, <span class="attr">value</span>: <span class="number">20</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;Canvas&#x27;</span>, <span class="attr">value</span>: <span class="number">15</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;uniapp&#x27;</span>, <span class="attr">value</span>: <span class="number">30</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;Nuxtjs&#x27;</span>, <span class="attr">value</span>: <span class="number">20</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;React&#x27;</span>, <span class="attr">value</span>: <span class="number">5</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;PS&#x27;</span>, <span class="attr">value</span>: <span class="number">30</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;AXIOS&#x27;</span>, <span class="attr">value</span>: <span class="number">10</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;FORMDATA&#x27;</span>, <span class="attr">value</span>: <span class="number">20</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;JSON&#x27;</span>, <span class="attr">value</span>: <span class="number">50</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;结婚人数&#x27;</span>, <span class="attr">value</span>: <span class="number">50</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;国庆节&#x27;</span>, <span class="attr">value</span>: <span class="number">150</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;元旦节&#x27;</span>, <span class="attr">value</span>: <span class="number">120</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;端午节&#x27;</span>, <span class="attr">value</span>: <span class="number">70</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;中秋节&#x27;</span>, <span class="attr">value</span>: <span class="number">100</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">	&#123; <span class="attr">name</span>: <span class="string">&#x27;1945.08.15日本投降&#x27;</span>, <span class="attr">value</span>: <span class="number">150</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 初始化图表</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">initChart</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// 确保DOM渲染完成</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">await</span> <span class="title function_">nextTick</span>() <span class="comment">// 销毁已有实例</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">if</span> (chartInstance) &#123;</span></span><br><span class="line"><span class="language-javascript">		chartInstance.<span class="title function_">dispose</span>()</span></span><br><span class="line"><span class="language-javascript">	&#125; <span class="comment">// 创建实例</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	chartInstance = echarts.<span class="title function_">init</span>(chartRef.<span class="property">value</span>) <span class="comment">// 设置图表配置</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">const</span> option = &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">tooltip</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="attr">show</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// formatter: (params) =&gt; `$&#123;params.name&#125;: $&#123;params.value&#125;`,</span></span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 自定义tooltip内容</span></span></span><br><span class="line"><span class="language-javascript">			<span class="attr">formatter</span>: <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// params 包含当前数据的所有信息</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">const</span> data = params.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 拼接HTML字符串，展示额外字段</span></span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">return</span> <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">						&lt;div style=&quot;text-align: left;&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">							&lt;div&gt;<span class="subst">$&#123;data.name&#125;</span>&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">							&lt;div&gt;<span class="subst">$&#123;data.value&#125;</span>&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">						&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">					`</span></span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">		&#125;,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">			&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">type</span>: <span class="string">&#x27;wordCloud&#x27;</span>, <span class="comment">// 词云类型</span></span></span><br><span class="line"><span class="language-javascript">				<span class="attr">grid</span>: [<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>], <span class="comment">// 内边距</span></span></span><br><span class="line"><span class="language-javascript">				<span class="attr">sizeRange</span>:  [<span class="number">12</span>, <span class="number">60</span>], <span class="comment">// 部分版本需此配置生效字体范围</span></span></span><br><span class="line"><span class="language-javascript">				<span class="attr">rotationRange</span>: isRotating.<span class="property">value</span> ? [-<span class="number">90</span>, <span class="number">90</span>] : [<span class="number">0</span>, <span class="number">0</span>], <span class="comment">// 旋转角度范围</span></span></span><br><span class="line"><span class="language-javascript">				<span class="attr">shape</span>: currentShape.<span class="property">value</span>, <span class="comment">// 整体形状</span></span></span><br><span class="line"><span class="language-javascript">				<span class="attr">spacing</span>: <span class="number">10</span>, <span class="comment">// 词语间距（像素）</span></span></span><br><span class="line"><span class="language-javascript">				<span class="attr">layoutAnimation</span>: <span class="literal">false</span>, <span class="comment">// 关闭布局动画，避免小词被 “挤出”</span></span></span><br><span class="line"><span class="language-javascript">				<span class="attr">width</span>: <span class="string">&#x27;95%&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">height</span>: <span class="string">&#x27;95%&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">textStyle</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">color</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">						<span class="comment">// 随机颜色</span></span></span><br><span class="line"><span class="language-javascript">						<span class="keyword">return</span> <span class="string">`rgb(<span class="subst">$&#123;<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">255</span>)&#125;</span>, <span class="subst">$&#123;<span class="built_in">Math</span>.round(</span></span></span></span><br><span class="line"><span class="subst"><span class="string"><span class="language-javascript">							<span class="built_in">Math</span>.random() * <span class="number">200</span></span></span></span></span><br><span class="line"><span class="subst"><span class="string"><span class="language-javascript">						)&#125;</span>, <span class="subst">$&#123;<span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * <span class="number">255</span>)&#125;</span>)`</span></span></span><br><span class="line"><span class="language-javascript">					&#125;,</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">fontSize</span>:  [<span class="number">12</span>, <span class="number">60</span>], <span class="comment">// 强制最小字体12px，最大60px</span></span></span><br><span class="line"><span class="language-javascript">					<span class="attr">fontFamily</span>: <span class="string">&#x27;Microsoft YaHei, sans-serif&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">emphasis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">						<span class="attr">shadowBlur</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">						<span class="attr">shadowColor</span>: <span class="string">&#x27;#333&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">						<span class="attr">fontSize</span>: <span class="number">14</span>,</span></span><br><span class="line"><span class="language-javascript">					&#125;,</span></span><br><span class="line"><span class="language-javascript">				&#125;,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">data</span>: wordData, <span class="comment">// 词云数据</span></span></span><br><span class="line"><span class="language-javascript">				<span class="comment">// 点击事件</span></span></span><br><span class="line"><span class="language-javascript">				<span class="attr">emphasis</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">focus</span>: <span class="string">&#x27;self&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">					<span class="attr">scale</span>: <span class="number">1.1</span>, <span class="comment">// 选中时放大</span></span></span><br><span class="line"><span class="language-javascript">				&#125;,</span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">		],</span></span><br><span class="line"><span class="language-javascript">	&#125; <span class="comment">// 设置配置项</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	chartInstance.<span class="title function_">setOption</span>(option) <span class="comment">// 绑定点击事件</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	chartInstance.<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">		activeWord.<span class="property">value</span> = params.<span class="property">data</span></span></span><br><span class="line"><span class="language-javascript">	&#125;) <span class="comment">// 监听窗口大小变化，自动调整图表</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">const</span> <span class="title function_">handleResize</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">		chartInstance.<span class="title function_">resize</span>()</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">	<span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, handleResize) <span class="comment">// 组件卸载时移除监听</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, handleResize)</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 刷新数据（随机调整权重）</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">handleRefresh</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">const</span> newData = wordData.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> (&#123;</span></span><br><span class="line"><span class="language-javascript">		...item,</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">value</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (item.<span class="property">value</span> / <span class="number">2</span>) + item.<span class="property">value</span> / <span class="number">2</span>),</span></span><br><span class="line"><span class="language-javascript">	&#125;))</span></span><br><span class="line"><span class="language-javascript">	chartInstance.<span class="title function_">setOption</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">series</span>: [&#123; <span class="attr">data</span>: newData &#125;],</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 切换旋转模式</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">toggleRotation</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">	isRotating.<span class="property">value</span> = !isRotating.<span class="property">value</span> <span class="comment">// 重新设置</span></span></span><br><span class="line"><span class="language-javascript">	chartInstance.<span class="title function_">setOption</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">series</span>: [</span></span><br><span class="line"><span class="language-javascript">			&#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">rotationRange</span>: isRotating.<span class="property">value</span> ? [-<span class="number">90</span>, <span class="number">90</span>] : [<span class="number">0</span>, <span class="number">0</span>],</span></span><br><span class="line"><span class="language-javascript">			&#125;,</span></span><br><span class="line"><span class="language-javascript">		],</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 切换形状</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">handleShapeChange</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">	chartInstance.<span class="title function_">setOption</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="attr">series</span>: [&#123; <span class="attr">shape</span>: currentShape.<span class="property">value</span> &#125;],</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 初始化图表</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">initChart</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 组件卸载时销毁实例</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">if</span> (chartInstance) &#123;</span></span><br><span class="line"><span class="language-javascript">		chartInstance.<span class="title function_">dispose</span>()</span></span><br><span class="line"><span class="language-javascript">	&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.containter-content</span> &#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">background-color</span>: <span class="number">#f0f2f5</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.controls</span> &#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">gap</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.el-button</span> + <span class="selector-class">.el-button</span> &#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">margin</span>: <span class="number">0</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.chart-container</span> &#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">min-height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">border-radius</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">	<span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.info</span> &#123;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">margin-top</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">background-color</span>: <span class="number">#f0f7ff</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">color</span>: <span class="number">#1890ff</span>;</span></span><br><span class="line"><span class="language-css">	<span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/images/%E8%AF%8D%E4%BA%91%E5%9B%BE/result.png"></p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>echarts-wordcloud</tag>
        <tag>echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>input文件上传</title>
    <url>/2025/08/12/input%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h3 id="Base64-的格式入参"><a href="#Base64-的格式入参" class="headerlink" title="*** Base64 的格式入参 ***"></a>*** Base64 的格式入参 ***</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;iconFile&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getResoureUrl(1)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;iconCamera&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getResoureUrl(2)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;iconVideo&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;getResoureUrl(3)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fileUpload&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;imageUpload&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;videoUpload&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;video/*&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>图片上传前，可以先进行压缩（图片优化处理） <code>npm i browser-image-compression</code></li>
<li>资源上传共用方法 <code>getResoureUrl()</code></li>
<li>Base64 的格式入参资源文件<br><code>const reader = new FileReader()</code><br><code>reader.readAsDataURL(file)</code><br><code>reader.onload = async (e) =&gt; &#123;&#125;</code></li>
<li>【注意】当重复上传相同的文件&#x2F;图片&#x2F;视频时，不会触发change函数，造成上传失败，原因是：浏览器认为选择了相同名称的文件并不代表用户有新的操作，所以没有触发 change 事件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图片上传前压缩处理(推荐)</span></span><br><span class="line"><span class="keyword">import</span> imageCompression <span class="keyword">from</span> <span class="string">&#x27;browser-image-compression&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正在上传的队列</span></span><br><span class="line"><span class="keyword">const</span> uploadQueue = <span class="title function_">ref</span>([])</span><br><span class="line"><span class="comment">// 上传 1所有文件类型、2图片和3视频</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getResoureUrl</span> = (<span class="params">resourceType</span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">let</span> idName = <span class="string">&#x27;&#x27;</span></span><br><span class="line">	<span class="keyword">if</span> (resourceType == <span class="number">1</span>) idName = <span class="string">&#x27;fileUpload&#x27;</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (resourceType == <span class="number">2</span>) idName = <span class="string">&#x27;imageUpload&#x27;</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (resourceType == <span class="number">3</span>) idName = <span class="string">&#x27;videoUpload&#x27;</span></span><br><span class="line"></span><br><span class="line">	<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * BUG：当多个上传入口同时操作时，input 状态混乱，最后url赋值错位</span></span><br><span class="line"><span class="comment">		 * 解决：每个上传入口用独立的inputId，可以通过调用时传入(idName)</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">const</span> resoUp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(idName)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!resoUp) <span class="keyword">return</span></span><br><span class="line">		<span class="comment">// 保证每次（点击）都能触发</span></span><br><span class="line">		resoUp.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">		<span class="comment">// 先移除旧的监听</span></span><br><span class="line">		resoUp.<span class="property">onchange</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">		resoUp?.<span class="title function_">click</span>()</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 事件监听用 onchange 代替 addEventListener(&#x27;change&#x27;)，每次覆盖，避免重复绑定</span></span><br><span class="line">		resoUp.<span class="property">onchange</span> = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">			<span class="keyword">const</span> upFile = event.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>] <span class="comment">// 获取文件对象</span></span><br><span class="line">			<span class="keyword">if</span> (!upFile) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">/************************************</span></span><br><span class="line"><span class="comment">			 * 优化：（图片上传到服务器之前）先压缩图片</span></span><br><span class="line"><span class="comment">			 *  (1) 下载依赖npm i browser-image-compression</span></span><br><span class="line"><span class="comment">			 *  (2) vue文件中引入 import imageCompression from &#x27;browser-image-compression&#x27;;</span></span><br><span class="line"><span class="comment">			 *  (3) 使用 imageCompression 函数进行压缩</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			<span class="keyword">const</span> options = &#123;</span><br><span class="line">				<span class="attr">maxSizeMB</span>: <span class="number">1</span>, <span class="comment">// 最大文件大小(MB)</span></span><br><span class="line">				<span class="attr">maxWidthOrHeight</span>: <span class="number">700</span>, <span class="comment">// （压缩后的）最大宽/高</span></span><br><span class="line">				<span class="attr">useWebWorker</span>: <span class="literal">true</span>, <span class="comment">// 使用WebWorker加速</span></span><br><span class="line">				<span class="attr">fileType</span>: <span class="string">&#x27;image/webp&#x27;</span>, <span class="comment">// 可选转换为webp格式</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">const</span> compressedFile = <span class="keyword">await</span> <span class="title function_">imageCompression</span>(upFile, options)</span><br><span class="line">			<span class="comment">// ************************************</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">// 使用压缩后的文件compressedFile 或 原文件upFile</span></span><br><span class="line">			<span class="keyword">const</span> file = compressedFile || upFile</span><br><span class="line">			<span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>()</span><br><span class="line">			reader.<span class="title function_">readAsDataURL</span>(file) <span class="comment">// 将文件读取为DataURL</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">/*********************************</span></span><br><span class="line"><span class="comment">			 * 问题：当重复上传相同的文件/图片/视频时，不会触发change函数，造成上传失败</span></span><br><span class="line"><span class="comment">			 * 原因：浏览器认为选择了相同名称的文件并不代表用户有新的操作，所以没有触发 change 事件</span></span><br><span class="line"><span class="comment">			 * 解决：清除input的值，以便下次可上传同一张图片</span></span><br><span class="line"><span class="comment">			 */</span></span><br><span class="line">			<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">				event.<span class="property">target</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">			&#125;)</span><br><span class="line">			<span class="comment">// ******************************</span></span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (file) &#123;</span><br><span class="line">				<span class="comment">// input表单 file change监听文件上传事件多次触发， 使用数组uploadQueue帮助判断</span></span><br><span class="line">				<span class="comment">// console.log(&#x27;*******图片点击多次*******&#x27;)</span></span><br><span class="line">				<span class="keyword">const</span> fileKey = <span class="title function_">generateFileKey</span>(file)</span><br><span class="line">				<span class="keyword">if</span> (uploadQueue.<span class="property">value</span>.<span class="title function_">includes</span>(fileKey)) <span class="keyword">return</span></span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					uploadQueue.<span class="property">value</span>.<span class="title function_">push</span>(fileKey)</span><br><span class="line">				&#125;</span><br><span class="line">				reader.<span class="property">onload</span> = <span class="title function_">async</span> (e) =&gt; &#123;</span><br><span class="line">					<span class="comment">// console.log(&#x27;*******上传图片一次*******&#x27;)</span></span><br><span class="line">					<span class="comment">// 开启loading</span></span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						<span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">postUploadImage</span>(&#123;</span><br><span class="line">							<span class="attr">base64Str</span>: e.<span class="property">target</span>?.<span class="property">result</span>,</span><br><span class="line">							<span class="attr">extName</span>: file?.<span class="property">type</span>.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>] || file?.<span class="property">name</span>.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>], <span class="comment">//文件后缀</span></span><br><span class="line">						&#125;)</span><br><span class="line">						<span class="comment">// console.log(&#x27;上传之后返回的资源链接：&#x27;, res.data?.url)</span></span><br><span class="line">						<span class="comment">// 上传完成，置空，以便下次上传</span></span><br><span class="line">						uploadQueue.<span class="property">value</span> = []</span><br><span class="line">					&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">						<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">					&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">						<span class="comment">// 关闭loading</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">generateFileKey</span> = (<span class="params">file</span>) =&gt; &#123;</span><br><span class="line">	<span class="comment">// 使用文件名和大小生成唯一标识</span></span><br><span class="line">	<span class="keyword">return</span> file.<span class="property">name</span> + file.<span class="property">size</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>资源上传接口(axios 封装)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 资源上传接口(axios封装)</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;../request.js&#x27;</span></span><br><span class="line"><span class="comment">//图片上传</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">postUploadImage</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">const</span> data = &#123;</span><br><span class="line">		<span class="attr">extName</span>: params.<span class="property">extName</span> || <span class="string">&#x27;png&#x27;</span>,</span><br><span class="line">		<span class="attr">sourceType</span>: <span class="string">&#x27;oho&#x27;</span>,</span><br><span class="line">		<span class="attr">serviceType</span>: <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_SYSTEM_NAME</span>,</span><br><span class="line">		<span class="attr">base64Str</span>: params.<span class="property">base64Str</span>.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>],</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> request.<span class="title function_">post</span>(<span class="string">&#x27;/upload/file/uploadVideo&#x27;</span>, data, &#123;</span><br><span class="line">		<span class="attr">headers</span>: &#123;</span><br><span class="line">			<span class="comment">// &#x27;Content-Type&#x27;: &#x27;application/json;charset=utf-8&#x27;,</span></span><br><span class="line">			<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文件流形式入参-表单提交、不需多加处理成-Base64"><a href="#文件流形式入参-表单提交、不需多加处理成-Base64" class="headerlink" title="*** 文件流形式入参(表单提交、不需多加处理成 Base64) ***"></a>*** 文件流形式入参(表单提交、不需多加处理成 Base64) ***</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;changeAvater&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-show</span>=<span class="string">&quot;false&quot;</span> <span class="attr">id</span>=<span class="string">&quot;changeAvatarUpload&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>文件流形式入参资源文件 <code>formData.append(&#39;file&#39;, file)</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> formValue = <span class="title function_">ref</span>(&#123;</span><br><span class="line">	<span class="attr">avatar</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeAvater</span>(<span class="params"></span>) &#123;</span><br><span class="line">	<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">const</span> resoUp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;changeAvatarUpload&#x27;</span>)</span><br><span class="line">		resoUp?.<span class="title function_">click</span>()</span><br><span class="line"></span><br><span class="line">		resoUp?.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="title function_">async</span> (event) =&gt; &#123;</span><br><span class="line">			<span class="keyword">const</span> file = event.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>] <span class="comment">// 获取文件对象</span></span><br><span class="line">			<span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">			formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file) <span class="comment">// file 入参字段名</span></span><br><span class="line">			<span class="keyword">if</span> (file) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="keyword">await</span> <span class="title function_">axios</span>(<span class="string">&#x27;/website/user/uploadAvatar&#x27;</span>, &#123;</span><br><span class="line">						<span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">						<span class="attr">body</span>: formData,</span><br><span class="line">						<span class="attr">headers</span>: &#123;</span><br><span class="line">							<span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN&#x27;</span>,</span><br><span class="line">							<span class="title class_">Authorization</span>: token,</span><br><span class="line">							<span class="comment">// &#x27;Content-Type&#x27;: &#x27;multipart/form-data&#x27;,</span></span><br><span class="line">						&#125;,</span><br><span class="line">						<span class="title function_">onResponse</span>(<span class="params">&#123; response &#125;</span>) &#123;</span><br><span class="line">							<span class="keyword">const</span> &#123; <span class="attr">_data</span>: res &#125; = response</span><br><span class="line">							<span class="keyword">if</span> (res.<span class="property">code</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">								message.<span class="title function_">error</span>(res?.<span class="property">msg</span> || res?.<span class="property">message</span> || <span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">								<span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">							&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">								formValue.<span class="property">value</span>.<span class="property">avatar</span> = res.<span class="property">data</span></span><br><span class="line">							&#125;</span><br><span class="line">						&#125;,</span><br><span class="line">					&#125;)</span><br><span class="line">				&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">					<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>上传/导出</category>
      </categories>
      <tags>
        <tag>上传</tag>
        <tag>input</tag>
      </tags>
  </entry>
  <entry>
    <title>瀑布流布局</title>
    <url>/2025/09/03/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<p>瀑布流布局（Waterfall Layout）是一种流行的网页布局方式，核心特点是不规则的多列网格结构 —— 每列中的内容块高度不同，内容块会像瀑布流水一样，自动填充到当前高度最低的列中，最终形成错落有致、视觉丰富的布局效果。它广泛应用于图片展示、商品列表、内容卡片等场景（如 Pinterest、Unsplash、小红书的首页 &#x2F; 搜索页）。</p>
<h3 id="🔥-CSS-Grid-实现（简单高效）"><a href="#🔥-CSS-Grid-实现（简单高效）" class="headerlink" title="🔥 CSS Grid 实现（简单高效）"></a>🔥 CSS Grid 实现（简单高效）</h3><ul>
<li>CSS Grid 的 grid-template-rows: masonry（砖石布局）特性，这是 CSS 原生支持的瀑布流方案，无需 JS 计算。<ul>
<li>优点: 纯 CSS 实现，代码简洁，性能优异，自动适应容器宽度</li>
<li>缺点: 浏览器兼容性有限（Chrome 87+、Firefox 77+ 支持，Safari 暂不支持）</li>
<li>适用场景: 对兼容性要求不高的现代网站，快速实现瀑布流</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;waterfall&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">			<span class="attr">class</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">v-for</span>=<span class="string">&quot;it in 30&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">:key</span>=<span class="string">&quot;it&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">:style</span>=<span class="string">&quot;&#123; &#x27;--w&#x27;: &#x27;250px&#x27;, &#x27;--h&#x27;: Math.floor(Math.random() * 5) * 50 + &#x27;px&#x27; &#125;&quot;</span></span></span><br><span class="line"><span class="tag">		&gt;</span></span><br><span class="line">			&#123;&#123; it &#125;&#125;        </span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-css">	  * grid-template-rows: masonry</span></span></span><br><span class="line"><span class="comment"><span class="language-css">	  * CSS Grid 布局中一个特殊的实验性值，用于实现砖石布局（瀑布流效果）。(还有其他实验性值，如 masonry-rows)</span></span></span><br><span class="line"><span class="comment"><span class="language-css">	  * 【效果】元素会按列排列，每列的高度根据内容自动调整，新元素优先填充到当前最短的列，形成典型的瀑布流视觉效果。</span></span></span><br><span class="line"><span class="comment"><span class="language-css">	  * 【兼容性与限制】目前在 Firefox 和 Chrome 中支持，但需要开启实验性功能。</span></span></span><br><span class="line"><span class="comment"><span class="language-css">	  * 【注意】由于是实验性特性，生产环境使用需谨慎，建议作为渐进增强方案。</span></span></span><br><span class="line"><span class="comment"><span class="language-css">	 */</span></span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.waterfall</span> &#123;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="built_in">minmax</span>(<span class="number">250px</span>, <span class="number">1</span>fr)); <span class="comment">/* 每列最小 250px，最大自适应（1fr），自动填充列数 */</span></span></span><br><span class="line"><span class="language-css">	    <span class="attribute">grid-template-rows</span>: masonry; <span class="comment">/* 关键：启用砖石布局，【自动填充最短列】 */</span></span></span><br><span class="line"><span class="language-css">	    <span class="attribute">gap</span>: <span class="number">10px</span>; <span class="comment">/* 间距 */</span></span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">break-inside</span>: avoid; <span class="comment">/* 防止内容被分割 */</span></span></span><br><span class="line"><span class="language-css">	    // <span class="attribute">width</span>: <span class="built_in">var</span>(--w);</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="built_in">var</span>(--h) + <span class="number">200px</span>);</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>效果：(我开启了实验性功能支持，masonry 砖石布局好像也没有生效???)<br><img src="/images/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/waterfall1.png"></li>
<li>开启谷歌开启实验性功能：打开浏览，输入 chrome:&#x2F;&#x2F;flags&#x2F;回车 → 输入实验性功能的关键词搜索 → 启用 Enable<br><img src="/images/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/chrome.png"></li>
</ul>
<h3 id="🔥-CSS-多列布局，利用-CSS-的-columns-多列属性，将内容按列分割，自动填充高度"><a href="#🔥-CSS-多列布局，利用-CSS-的-columns-多列属性，将内容按列分割，自动填充高度" class="headerlink" title="🔥 CSS 多列布局，利用 CSS 的 columns 多列属性，将内容按列分割，自动填充高度"></a>🔥 CSS 多列布局，利用 CSS 的 columns 多列属性，将内容按列分割，自动填充高度</h3><ul>
<li>优点：纯 CSS 实现，兼容性较好（IE10+ 支持），代码简单</li>
<li>缺点：内容按 “列” 顺序排列（而非行），滚动加载时可能需要重新排序；列宽固定，动态调整列数需额外处理</li>
<li>适用场景：静态内容展示，对排序顺序要求不高的场景（如：图片墙）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;waterfall&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">			<span class="attr">class</span>=<span class="string">&quot;item&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">v-for</span>=<span class="string">&quot;it in 13&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">:key</span>=<span class="string">&quot;it&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">:style</span>=<span class="string">&quot;&#123; &#x27;--w&#x27;: &#x27;250px&#x27;, &#x27;--h&#x27;: Math.floor(Math.random() * 5) * 50 + &#x27;px&#x27; &#125;&quot;</span></span></span><br><span class="line"><span class="tag">		&gt;</span></span><br><span class="line">			&#123;&#123; it &#125;&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.waterfall</span> &#123;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">height</span>: unset;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">columns</span>: <span class="number">5</span>;  <span class="comment">/* 列数 */</span></span></span><br><span class="line"><span class="language-css">	    <span class="attribute">column-gap</span>: <span class="number">10px</span>;  <span class="comment">/* 列间距 */</span></span></span><br><span class="line"><span class="language-css">	    <span class="attribute">padding</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">break-inside</span>: avoid; <span class="comment">/* 防止内容被分割 */</span></span></span><br><span class="line"><span class="language-css">	    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;  <span class="comment">/* 项间距 */</span></span></span><br><span class="line"><span class="language-css">	    // <span class="attribute">width</span>: <span class="built_in">var</span>(--w);  <span class="comment">/* 未设置宽，则元素宽度按照5列平分 */</span></span></span><br><span class="line"><span class="language-css">	    <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="built_in">var</span>(--h) + <span class="number">200px</span>);</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>效果：<br><img src="/images/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/waterfall2.png"></li>
</ul>
<h3 id="🔥-JavaScript-动态计算（最灵活，兼容性好）"><a href="#🔥-JavaScript-动态计算（最灵活，兼容性好）" class="headerlink" title="🔥 JavaScript 动态计算（最灵活，兼容性好）"></a>🔥 JavaScript 动态计算（最灵活，兼容性好）</h3><ul>
<li>优点: 完全可控，支持动态加载、响应式调整列数，兼容性极佳（所有浏览器）</li>
<li>缺点: 需要 JavaScript 参与，初始加载和滚动加载时需计算，复杂度略高</li>
<li>适用场景: 动态内容（如无限滚动）、对排序和兼容性要求高的场景（如电商商品列表）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span>瀑布流布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.waterfall</span> &#123;</span></span><br><span class="line"><span class="language-css">			    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">			    <span class="attribute">gap</span>: <span class="number">16px</span>;  <span class="comment">/* 列间距 */</span></span></span><br><span class="line"><span class="language-css">			    <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">			    <span class="comment">/* align-items: flex-start让子元素高度由自身内容决定，不随子元素中的最高元素拉伸 */</span></span></span><br><span class="line"><span class="language-css">			    <span class="attribute">align-items</span>: flex-start;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.column</span> &#123;</span></span><br><span class="line"><span class="language-css">			    <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">			    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">			    <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">			    <span class="attribute">gap</span>: <span class="number">16px</span>;  <span class="comment">/* 元素间距 */</span></span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">			    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">			    <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">			    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">			    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">			    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">			    <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">			    <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">			    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">			    <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;waterfall&quot;</span> <span class="attr">id</span>=<span class="string">&quot;waterfall&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">	   </span><br><span class="line">	<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 初始化列</span></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">const</span> columnCount = <span class="number">5</span> <span class="comment">// 列数</span></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">const</span> waterfall = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;waterfall&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">const</span> column = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">			column.<span class="property">className</span> = <span class="string">&#x27;column&#x27;</span></span></span><br><span class="line"><span class="language-javascript">			waterfall.<span class="title function_">appendChild</span>(column)</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">const</span> columns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.column&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 添加元素到最短列</span></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">function</span> <span class="title function_">addItem</span>(<span class="params">content, height</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 找到高度最小的列</span></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">let</span> shortestColumn = columns[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">			columns.<span class="title function_">forEach</span>(<span class="function">(<span class="params">col</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="variable language_">window</span>.<span class="property">console</span>.<span class="title function_">log</span>(col.<span class="property">offsetHeight</span>, shortestColumn.<span class="property">offsetHeight</span>)</span></span><br><span class="line"><span class="language-javascript">				<span class="keyword">if</span> (col.<span class="property">offsetHeight</span> &lt; shortestColumn.<span class="property">offsetHeight</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">					shortestColumn = col</span></span><br><span class="line"><span class="language-javascript">				&#125;</span></span><br><span class="line"><span class="language-javascript">			&#125;)</span></span><br><span class="line"><span class="language-javascript">			<span class="comment">// 创建元素并添加到最短列</span></span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">const</span> item = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">			item.<span class="property">className</span> = <span class="string">&#x27;item&#x27;</span></span></span><br><span class="line"><span class="language-javascript">			item.<span class="property">style</span>.<span class="property">height</span> = <span class="string">`<span class="subst">$&#123;height&#125;</span>px`</span> <span class="comment">// 模拟不同高度</span></span></span><br><span class="line"><span class="language-javascript">			item.<span class="property">innerHTML</span> = content</span></span><br><span class="line"><span class="language-javascript">			shortestColumn.<span class="title function_">appendChild</span>(item)</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">		<span class="comment">// 模拟添加内容</span></span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">const</span> randomHeight = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">300</span>) + <span class="number">120</span> <span class="comment">// 120-420px 随机高度</span></span></span><br><span class="line"><span class="language-javascript">			<span class="title function_">addItem</span>(<span class="string">`box <span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>`</span>, randomHeight)</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>效果：<br><img src="/images/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/waterfall3.png"></li>
</ul>
<h3 id="🔥-第三方库实现（快速开发）"><a href="#🔥-第三方库实现（快速开发）" class="headerlink" title="🔥 第三方库实现（快速开发）"></a>🔥 第三方库实现（快速开发）</h3><p>使用成熟的瀑布流库，减少重复开发，常见库包括：</p>
<ul>
<li><p>Masonry（最流行）<a href="https://masonry.desandro.com/">https://masonry.desandro.com</a></p>
<ul>
<li>特点：轻量、灵活，支持动画和响应式，需配合 jQuery 或独立使用</li>
</ul>
</li>
<li><p>Isotope：<a href="https://isotope.metafizzy.co/">https://isotope.metafizzy.co</a></p>
<ul>
<li>特点：支持瀑布流、排序、过滤等功能，功能更全面，但体积稍大。</li>
</ul>
</li>
</ul>
<p>下载依赖：<code>npm install masonry-layout -D</code> 或 <code>npm install isotope-layout -D</code></p>
<p>代码如下：(两个插件库使用方法相似)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">			<span class="attr">class</span>=<span class="string">&quot;grid-item&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">v-for</span>=<span class="string">&quot;it in 15&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">:key</span>=<span class="string">&quot;it&quot;</span></span></span><br><span class="line"><span class="tag">			<span class="attr">:style</span>=<span class="string">&quot;&#123; &#x27;--w&#x27;: &#x27;300px&#x27;, &#x27;--h&#x27;: Math.random() * 200 + &#x27;px&#x27; &#125;&quot;</span></span></span><br><span class="line"><span class="tag">		&gt;</span></span><br><span class="line">			&#123;&#123; it &#125;&#125;        </span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">	<span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">Masonry</span> <span class="keyword">from</span> <span class="string">&#x27;masonry-layout&#x27;</span></span></span><br><span class="line"><span class="language-javascript">	<span class="comment">// import * as Isotope from &#x27;isotope-layout&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">	<span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">const</span> grid = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.grid&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">		<span class="keyword">if</span> (grid) &#123;</span></span><br><span class="line"><span class="language-javascript">			<span class="keyword">new</span> <span class="title class_">Masonry</span>(grid, &#123;</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">itemSelector</span>: <span class="string">&#x27;.grid-item&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">columnWidth</span>: <span class="string">&#x27;.grid-item&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">percentPosition</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">				<span class="attr">gutter</span>: <span class="number">10</span>, <span class="comment">// 列间距</span></span></span><br><span class="line"><span class="language-javascript">			&#125;)</span></span><br><span class="line"><span class="language-javascript">		&#125;</span></span><br><span class="line"><span class="language-javascript">	&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.grid</span> &#123;</span></span><br><span class="line"><span class="language-css">	    <span class="attribute">background-color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">	    <span class="selector-class">.grid-item</span> &#123;</span></span><br><span class="line"><span class="language-css">	        <span class="attribute">width</span>: <span class="built_in">var</span>(--w);</span></span><br><span class="line"><span class="language-css">	        <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="built_in">var</span>(--h) + <span class="number">120px</span>);  <span class="comment">/* 120-320px */</span></span></span><br><span class="line"><span class="language-css">	        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">	        <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">	        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">	        <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;  <span class="comment">/* 元素间距 */</span></span></span><br><span class="line"><span class="language-css">	        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">	        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">	        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">	        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">	        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">	    &#125;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>效果：<br><img src="/images/%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/waterfall4.png"></li>
</ul>
<p>【总结】</p>
<ul>
<li>快速实现且兼容性要求不高 → 选 CSS Grid 砖石布局。</li>
<li>兼容性优先且内容静态 → 选 CSS 多列布局。</li>
<li>动态内容或复杂交互 → 选 JavaScript 计算 或 第三方库。</li>
</ul>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>瀑布流布局</tag>
      </tags>
  </entry>
  <entry>
    <title>SEO优化</title>
    <url>/2025/09/11/SEO%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="🔍-前端开发-SEO-优化策略详解"><a href="#🔍-前端开发-SEO-优化策略详解" class="headerlink" title="🔍 前端开发 SEO 优化策略详解"></a>🔍 前端开发 SEO 优化策略详解</h2><h3 id="🔹-HTML-页面结构与标签优化"><a href="#🔹-HTML-页面结构与标签优化" class="headerlink" title="🔹 HTML 页面结构与标签优化"></a>🔹 HTML 页面结构与标签优化</h3><p>(1) <strong>语义化 HTML</strong></p>
<ul>
<li><p>使用正确的语义化标签：<code>&lt;header&gt;</code>、<code>&lt;nav&gt;</code>、<code>&lt;main&gt;</code>、<code>&lt;article&gt;</code>、<code>&lt;section&gt;</code>、<code>&lt;footer&gt;</code></p>
</li>
<li><p>文章标题用 h1-h6：<code>&lt;h1&gt;</code>（一个页面仅一个，包含主要关键词），子标题 <code>&lt;h2&gt; - &lt;h6&gt;</code> 标题层级合理分布</p>
</li>
<li><p>列表数据用 <code>&lt;ul&gt; / &lt;ol&gt;</code>，强调用 <code>&lt;strong&gt;</code> 而不是<code> &lt;b&gt;</code></p>
</li>
<li><p>所有 <code>&lt;img&gt;</code> 标签都添加 alt 文本描述属性（内容包含关键词）</p>
</li>
<li><p><code>&lt;a&gt;</code>链接：需添加 href（避免<code>javascript:void(0)</code>），锚文本需描述目标页面内容，title 鼠标悬停时显示的提示信息</p>
</li>
<li><p>避免用图片替代文字：如标题、按钮文本需用 HTML 文字，而非图片（蜘蛛无法识别图片中的文字）</p>
</li>
</ul>
<p>👉 好处：提升爬虫理解页面结构的能力</p>
<p>(2) Meta 标签 (辅助手段)</p>
<ul>
<li><p><code>&lt;title&gt;</code>标签：每个页面独立、包含核心关键词</p>
</li>
<li><p><strong>描述 description</strong>：内容摘要（120 字内），包含关键词和用户利益点，简洁准确，提升搜索结果点击率（CTR）<br><code>&lt;meta name=&quot;description&quot; content=&quot;本文详解前端SEO的10个核心策略，包括语义化标签、图片优化、加载速度提升，帮助开发者快速掌握优化技巧。&quot;&gt;</code></p>
</li>
<li><p><strong>关键字 keywords</strong>：虽权重降低，但可辅助蜘蛛理解核心关键词（避免堆砌，3-5 个为宜）</p>
<p><code>&lt;meta name=&quot;keywords&quot; content=&quot;前端SEO, Meta标签优化, 搜索引擎排名&quot;&gt;</code></p>
</li>
<li><p><code>&lt;meta name=&quot;robots&quot;&gt;</code>：决定页面是否被索引、是否传递链接权重</p>
</li>
</ul>
<p>(3) <strong>路由&#x2F;链接优化</strong></p>
<ul>
<li><p>使用静态化、语义化的 URL (避免动态参数过多)，如：</p>
<ul>
<li><p>✅ <code>/blog/seo-strategy</code></p>
</li>
<li><p>❌ <code>/index.php?id=123</code></p>
</li>
</ul>
</li>
<li><p>路由使用 history 模式，比 hash 模式更好被抓取</p>
<ul>
<li>hash 模式<code>/#/query</code>，在解析 URL 时，会忽略 ‘#’ 及其后面的内容</li>
</ul>
</li>
<li><p>扁平化结构：<code>/home/page/content</code> (页面层级过多，蜘蛛易丢失深层链接)</p>
</li>
<li><p>在页面内，给内部链接添加 title 和语义清晰的锚文本，可以提示&#x2F;促进用户去点击</p>
<ul>
<li><code>&lt;a href=&quot;/seo-strategy&quot; title=&quot;详解前端开发中的SEO优化方法&quot;&gt;前端SEO优化策略&lt;/a&gt;</code></li>
</ul>
</li>
</ul>
<h3 id="🔹-内容可见性与抓取优化"><a href="#🔹-内容可见性与抓取优化" class="headerlink" title="🔹 内容可见性与抓取优化"></a>🔹 内容可见性与抓取优化</h3><p>(1) 爬虫可见性</p>
<ul>
<li><p>避免 纯前端渲染（CSR）导致内容加载不到 → 可采用 <strong>SSR（服务端渲染） 或 预渲染（Prerender）</strong></p>
</li>
<li><p><strong>对于 Vue、React 应用：可用 Nuxt.js、Next.js 或 静态网站生成 (SSG)</strong></p>
</li>
</ul>
<p>(2) 图片优化</p>
<ul>
<li><p>使用 <code>&lt;img&gt;</code> 并加 alt 文本描述</p>
</li>
<li><p>WebP&#x2F;AVIF 格式，懒加载 <code>loading=&quot;lazy&quot;</code></p>
</li>
<li><p>为重要图片生成 结构化数据（如产品图、文章配图）</p>
</li>
</ul>
<p>(3) 多语言站点</p>
<ul>
<li><code>&lt;link rel=&quot;alternate&quot; hreflang=&quot;xx&quot; ...&gt;</code> 告诉搜索引擎不同语言的版本。</li>
</ul>
<h3 id="🔹-页面性能优化（影响排名的核心指标-Core-Web-Vitals）"><a href="#🔹-页面性能优化（影响排名的核心指标-Core-Web-Vitals）" class="headerlink" title="🔹 页面性能优化（影响排名的核心指标 Core Web Vitals）"></a>🔹 页面性能优化（影响排名的核心指标 Core Web Vitals）</h3><p>Google 的 CWV 三大指标：</p>
<ul>
<li><p>LCP (最大内容渲染时间)：控制在 ≤2.5s</p>
</li>
<li><p>FID (首次输入延迟)：≤100ms</p>
</li>
<li><p>CLS (累计布局偏移)：≤0.1</p>
</li>
</ul>
<p>前端优化手段：</p>
<ul>
<li><p>使用 HTTP&#x2F;2、CDN 加速</p>
</li>
<li><p>图片懒加载、视频分片加载</p>
</li>
<li><p>CSS&#x2F;JS 压缩、拆分，减少阻塞</p>
</li>
<li><p>关键 CSS 内联，非关键资源延迟加载</p>
</li>
</ul>
<h3 id="🔹-技术层面优化"><a href="#🔹-技术层面优化" class="headerlink" title="🔹 技术层面优化"></a>🔹 技术层面优化</h3><p>(1) Sitemap &amp; Robots</p>
<ul>
<li><p><code>/sitemap.xml</code>：清晰列出页面结构</p>
</li>
<li><p><code>robots.txt</code>：在网站根目录放置 robots.txt 文件，明确告知蜘蛛 “可爬取” 和 “不可爬取” 的内容（控制抓取范围，避免蜘蛛浪费资源爬取无价值页面）</p>
</li>
</ul>
<p>(2) 结构化数据（Schema.org）</p>
<ul>
<li><p>使用 JSON-LD 添加：</p>
<ul>
<li><p>文章：Article</p>
</li>
<li><p>产品：Product</p>
</li>
<li><p>FAQ：FAQ Page</p>
</li>
<li><p>面包屑：BreadcrumbList</p>
</li>
</ul>
</li>
</ul>
<p>👉 有助于获取 富摘要（Rich Snippets），提高点击率</p>
<p>(3) 移动端优化</p>
<ul>
<li><p>响应式布局（RWD）</p>
</li>
<li><p>viewport 标签</p>
</li>
<li><p>避免 Flash &#x2F; 不兼容插件</p>
</li>
</ul>
<h3 id="🔹-用户体验与交互"><a href="#🔹-用户体验与交互" class="headerlink" title="🔹 用户体验与交互"></a>🔹 用户体验与交互</h3><ul>
<li><p>确保页面 无 404 错误，有自定义 404 页面</p>
</li>
<li><p>页面导航清晰，层级不要过深（建议 ≤3 层）</p>
</li>
<li><p>提高可访问性（WCAG 标准）：如 ARIA 属性、键盘导航</p>
</li>
<li><p>页面加载时避免 广告过多、弹窗遮挡内容</p>
</li>
</ul>
<h3 id="🔹-前端开发常见-SEO-陷阱"><a href="#🔹-前端开发常见-SEO-陷阱" class="headerlink" title="🔹 前端开发常见 SEO 陷阱"></a>🔹 前端开发常见 SEO 陷阱</h3><ul>
<li><p>❌ 单页应用（SPA）未处理 SSR → 内容抓取困难</p>
</li>
<li><p>❌ 动态生成的链接没有 href → 爬虫无法跟踪</p>
</li>
<li><p>❌ 图片仅用 CSS 背景图，缺少 alt → 无法索引</p>
</li>
<li><p>❌ 过度依赖 JS 渲染 meta 标签 → 搜索引擎可能忽略</p>
</li>
</ul>
<h3 id="🔹-前端工具推荐"><a href="#🔹-前端工具推荐" class="headerlink" title="🔹 前端工具推荐"></a>🔹 前端工具推荐</h3><ul>
<li><p><strong>Lighthouse</strong> (谷歌浏览器插件)：检测性能与 SEO 指标</p>
</li>
<li><p><strong>Google Search Console</strong>：监控收录、报错与排名问题</p>
</li>
<li><p><strong>Ahrefs &#x2F; SEMrush</strong> (关键词分析网站)：关键词分析与竞争对手分析&#x2F;调研</p>
</li>
<li><p><strong>Screaming Frog</strong>：模拟爬虫抓取检查网，发现问题</p>
</li>
</ul>
<p>✅ 总结一下：<br>前端 SEO 优化核心就是 让搜索引擎能更快、更准确、更全面地理解你的网站内容，并且在性能、结构、可访问性上为用户提供良好体验</p>
]]></content>
      <categories>
        <category>SEO</category>
      </categories>
      <tags>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客项目改用Github托管</title>
    <url>/2025/09/13/hexo%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E6%94%B9%E7%94%A8Github%E6%89%98%E7%AE%A1/</url>
    <content><![CDATA[<h3 id="常用的静态页面托管服务"><a href="#常用的静态页面托管服务" class="headerlink" title="常用的静态页面托管服务"></a>常用的静态页面托管服务</h3><ul>
<li>Gitee Pages<ul>
<li><a href="https://gitee.com/">gitee.com</a></li>
<li>Gitee Pages 2024.05 已暂停服务，无法使用</li>
</ul>
</li>
<li>Gitlab Pages<ul>
<li><a href="https://gitlab.com/">gitlab.com</a> 2025.09.07 已停止向大陆内地提供服务</li>
<li><a href="https://jihulab.com/">jihulab.com</a>、<a href="https://gitlab.hk/">gitlab.hk</a> 90 天免费试用，后续需付费试用</li>
</ul>
</li>
<li>GitHub Pages<ul>
<li>免费版 ✅ <a href="https://github.com/">github.com</a></li>
<li>付费版</li>
</ul>
</li>
</ul>
<p>📝 之前我使用 Gitlab 托管 hexo 博客项目，而 Gitlab.com 已暂停向大陆内地提供服务，需要迁移，我选择 Github</p>
<ul>
<li><a href="https://lqh1003-gitlab-io-cd3511.gitlab.io/">旧博客链接 Gitlab</a></li>
<li><a href="https://lqh1003.github.io/">新博客链接 GitHub</a></li>
</ul>
<h3 id="新建仓库-代码迁移"><a href="#新建仓库-代码迁移" class="headerlink" title="新建仓库&#x2F;代码迁移"></a>新建仓库&#x2F;代码迁移</h3><ul>
<li><p><a href="https://github.com/">github.com</a> 登录 → 新建仓库 “<code>用户名.github.io</code>“ → 仓库状态设置为 public 状态</p>
</li>
<li><p>远程迁移仓库（Gitlab → GitHub）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --mirror https://gitee.com/oldProject.gitlab.io.git</span><br><span class="line">git remote set-url origin git@github.com:newProject.github.io.git</span><br><span class="line">git push -f origin --mirror</span><br></pre></td></tr></table></figure></li>
<li><p>重新拉取新仓库到本地 <code>git clone git@github.com:newProject.github.io.git</code></p>
</li>
<li><p>修改 <code>_config.yml</code> 的 repository 为新仓库地址<br><img src="/images/hexo%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E6%94%B9%E7%94%A8Github%E6%89%98%E7%AE%A1/repository.png"></p>
</li>
<li><p>删除 <code>.gitlab-ci.yml</code>（Gitlab 自动化部署配置文件）</p>
</li>
<li><p>推送本地源代码到远程仓库 <code>git push -f origin main</code></p>
</li>
</ul>
<p>【此时】也只是上传了 hexo 博客项目的源代码而已，<code>https://用户名.github.io</code> 根本打不开</p>
<h3 id="为-Hexo-博客项目配置-GitHub-Actions-自动化"><a href="#为-Hexo-博客项目配置-GitHub-Actions-自动化" class="headerlink" title="为 Hexo 博客项目配置 GitHub Actions (自动化)"></a>为 Hexo 博客项目配置 GitHub Actions (自动化)</h3><p>📖 实现 “<strong>提交 Markdown 源码后，自动生成静态文件并部署到 GitHub Pages</strong>“</p>
<ul>
<li><p>前置准备工作：</p>
<ul>
<li>确保你的 GitHub 仓库中存储的是 Hexo 源码（而非仅 public 静态文件），核心目录&#x2F;文件包括：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">仓库根目录/</span><br><span class="line">├── source/ # Markdown 文章（source/_posts/）</span><br><span class="line">├── themes/ # 博客主题（如 Next、Butterfly）</span><br><span class="line">├── _config.yml # Hexo 全局配置</span><br><span class="line">├── package.json # 依赖配置（含 hexo 等依赖）</span><br><span class="line">└── .github/workflows/ # 后续创建的 Actions 配置目录</span><br></pre></td></tr></table></figure>

<ul>
<li>本地已通过 <code>npm install -g hexo-cli</code> 安装 Hexo，且能正常生成静态文件（hexo g 无报错</li>
<li>GitHub 仓库已创建<ul>
<li>推荐命名为 用户名.github.io，用于直接通过 https:&#x2F;&#x2F;用户名.github.io 访问</li>
<li>如果用其他命名，链接会比较混乱，看起来没那么简洁</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>开始配置 Github Actions</strong></p>
<ul>
<li>在 Hexo 项目根目录，按路径 <strong><code>.github/workflows/deploy.yml</code></strong> 创建配置文件<ul>
<li>xxx.yml 文件名可以自定义，<strong>当把本地内容推送到远程仓库，github 会自动识别到这两个文件夹和 yml 文件</strong></li>
</ul>
</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">部署到GitHub</span> <span class="string">Pages</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关键：添加权限配置，允许 Actions 写入仓库内容</span></span><br><span class="line"><span class="attr">permissions:</span></span><br><span class="line">  <span class="attr">contents:</span> <span class="string">write</span> <span class="comment"># 授予写入内容的权限(包括推送分支)</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span> <span class="comment"># 常用事件：push(代码推送)、pull_request(PR 操作)、schedule(定时任务)、workflow_dispatch(手动触发)</span></span><br><span class="line">    <span class="attr">branches:</span> [<span class="string">main</span>] <span class="comment"># 推送到main分支时触发</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 运行环境(ubuntu-latest(推荐/速度快)/windows-latest/macos-latest)；github提供的虚拟服务器</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">拉取</span> <span class="string">Hexo</span> <span class="string">源码</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span> <span class="comment"># 官方动作：拉取仓库代码</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装Node.js环境</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span> <span class="comment"># 官方动作：配置 Node 环境</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">18.</span><span class="string">x</span></span><br><span class="line">          <span class="attr">cache:</span> <span class="string">&#x27;npm&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装Hexo及项目依赖</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install -g hexo-cli  # 全局安装 Hexo 命令行工具</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件（public</span> <span class="string">目录）</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean   # 清除缓存和旧静态文件（避免残留问题）</span></span><br><span class="line"><span class="string">          hexo generate   # 生成新静态文件（输出到 public 目录）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">将静态文件部署到GitHub</span> <span class="string">Pages分支</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v4</span> <span class="comment"># 第三方动作：简化 Pages 部署with</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span> <span class="comment"># 部署授权：使用GitHub内置秘钥(无需手动生成，自动生效)</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span> <span class="comment">#  待部署的静态文件目录（Hexo 生成的 public 目录）</span></span><br><span class="line">          <span class="attr">publish_branch:</span> <span class="string">gh-pages</span> <span class="comment"># 目标分支(GitHub Pages读取的分支，与源分支 main 区分)</span></span><br><span class="line">          <span class="attr">force_orphan:</span> <span class="literal">true</span> <span class="comment"># 可选：强制创建独立分支，避免历史冲突</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注意区分源分支和目标分支<ul>
<li><code>main</code> 分支：仅存放 Hexo 源码（源文件）</li>
<li><code>gh-pages</code> 分支：仅存放自动生成的静态文件 public（部署的内容），自定义静态文件存放分支</li>
</ul>
</li>
</ul>
</li>
<li><p>然后代码提交&#x2F;推送到 github 远程：git push 或 git push -u origin main</p>
<ul>
<li>触发条件：当且仅当代码推送到 main 分支时触发部署（main 分支是自己配置的源码分支）</li>
</ul>
</li>
<li><p>配置 <strong>GitHub Pages</strong> 来源</p>
<ul>
<li><p>进入你的 GitHub 仓库 → 点击顶部 Settings → 左侧菜单 Pages</p>
</li>
<li><p>在 Build and deployment 区域：</p>
<ul>
<li><code>Source</code>：选择  Deploy from a branch</li>
<li><code>Branch</code>：选择与配置文件中 publish_branch 一致的分支（gh-pages），目录默认选择 &#x2F;(root) 【xxx.yml 文件推送远程之后，会多一个 gh-pages 分支可以选择】</li>
<li>点击 <code>Save</code>，GitHub 会自动识别 Pages 资源<br><img src="/images/hexo%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E6%94%B9%E7%94%A8Github%E6%89%98%E7%AE%A1/ghPages.png"></li>
</ul>
</li>
<li><p>Github Pages 分支修改且 <code>Save</code> 之后再次查看部署进度（多一条工作流、分支也变成 gh-pages）：<br><img src="/images/hexo%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E6%94%B9%E7%94%A8Github%E6%89%98%E7%AE%A1/actions.png"></p>
</li>
<li><p>（成功之后）点击进入日志记录可以看到博客链接 <code>https://用户名.github.io</code>（大概延迟等待 1-5 分钟可以看到内容）<br><img src="/images/hexo%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E6%94%B9%E7%94%A8Github%E6%89%98%E7%AE%A1/flowsLink.png"></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
        <tag>Github Pages</tag>
      </tags>
  </entry>
  <entry>
    <title>前端实现导出xlsx表格</title>
    <url>/2025/09/13/%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0%E5%AF%BC%E5%87%BAxlsx%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<p>前端根据后端接口返回的数据（数组 &#x2F; 文件本身 &#x2F; 链接）做对应的下载处理：</p>
<h3 id="👉-根据接口返回的数据数组-表格-列表数据-，前端自己实现-excel-表格下载"><a href="#👉-根据接口返回的数据数组-表格-列表数据-，前端自己实现-excel-表格下载" class="headerlink" title="👉 根据接口返回的数据数组(表格&#x2F;列表数据)，前端自己实现 excel 表格下载"></a>👉 根据接口返回的数据数组(表格&#x2F;列表数据)，前端自己实现 excel 表格下载</h3><p><strong>（1）下载依赖</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install xlsx file-saver</span><br></pre></td></tr></table></figure>

<p><strong>（2）编写保存函数 htmlToExcel.js</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">FileSaver</span>, &#123; saveAs &#125; <span class="keyword">from</span> <span class="string">&#x27;file-saver&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">XLSX</span> <span class="keyword">from</span> <span class="string">&#x27;xlsx&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElMessage</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">	<span class="title function_">downloadXlsx</span>(<span class="params">dataList, fileName, wscols</span>) &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">const</span> <span class="title function_">stringToBuff</span> = (<span class="params">str</span>) =&gt; &#123;</span><br><span class="line">				<span class="keyword">let</span> buf = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(str.<span class="property">length</span>)</span><br><span class="line">				<span class="keyword">let</span> view = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buf)</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i !== str.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">					view[i] = str.<span class="title function_">charCodeAt</span>(i) &amp; <span class="number">0xff</span></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span> buf</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 创建工作簿</span></span><br><span class="line">			<span class="keyword">let</span> workbook = <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">book_new</span>()</span><br><span class="line">			<span class="comment">// 将数据转换为工作表</span></span><br><span class="line">			<span class="keyword">let</span> worksheet = <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">aoa_to_sheet</span>(dataList)</span><br><span class="line">			<span class="comment">// 设置导出表格每一列的宽</span></span><br><span class="line">			<span class="keyword">if</span> (wscols) worksheet[<span class="string">&#x27;!cols&#x27;</span>] = wscols</span><br><span class="line">			<span class="comment">// 将工作表添加到工作簿</span></span><br><span class="line">			<span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">book_append_sheet</span>(workbook, worksheet, <span class="string">&#x27;sheet1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 创建二进制对象写入转换好的字节流</span></span><br><span class="line">			<span class="keyword">let</span> xlsxBlob = <span class="keyword">new</span> <span class="title class_">Blob</span>(</span><br><span class="line">				[</span><br><span class="line">					<span class="title function_">stringToBuff</span>(</span><br><span class="line">						<span class="variable constant_">XLSX</span>.<span class="title function_">write</span>(workbook, &#123;</span><br><span class="line">							<span class="attr">bookType</span>: <span class="string">&#x27;xlsx&#x27;</span>,</span><br><span class="line">							<span class="attr">bookSST</span>: <span class="literal">false</span>,</span><br><span class="line">							<span class="attr">type</span>: <span class="string">&#x27;binary&#x27;</span>,</span><br><span class="line">						&#125;)</span><br><span class="line">					),</span><br><span class="line">				],</span><br><span class="line">				&#123; <span class="attr">type</span>: <span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line">			)</span><br><span class="line">			<span class="comment">// 下载导出的文件</span></span><br><span class="line">			<span class="title class_">FileSaver</span>.<span class="title function_">saveAs</span>(xlsxBlob, fileName + <span class="string">&#x27;.xlsx&#x27;</span>)</span><br><span class="line">			<span class="title class_">ElMessage</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;导出成功&#x27;</span> &#125;)</span><br><span class="line">		&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">error</span>(e)</span><br><span class="line">			<span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;导出失败&#x27;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** 加上 xlsxParam 可以解决导出的表格数据错误的问题,比如以下各种情况等:</span></span><br><span class="line"><span class="comment">	 * 身份证号： 5.23E+17</span></span><br><span class="line"><span class="comment">	 * 日期格式被补全到时分秒</span></span><br><span class="line"><span class="comment">	 * 3% -&gt;  0.03</span></span><br><span class="line"><span class="comment">	 * &#x27;1-7&#x27; -&gt; 2001/1/7</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="title function_">getExcel</span>(<span class="params">dom, fileName</span>) &#123;</span><br><span class="line">		<span class="keyword">let</span> xlsxParam = &#123; <span class="attr">raw</span>: <span class="literal">true</span> &#125;</span><br><span class="line">		<span class="keyword">const</span> domDu = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(dom)</span><br><span class="line">		<span class="comment">// let worksheet = XLSX.utils.table_to_book(domDu)</span></span><br><span class="line">		<span class="keyword">let</span> worksheet = <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">table_to_book</span>(domDu, xlsxParam)</span><br><span class="line">		<span class="keyword">let</span> worksheetout = <span class="variable constant_">XLSX</span>.<span class="title function_">write</span>(worksheet, &#123;</span><br><span class="line">			<span class="attr">bookType</span>: <span class="string">&#x27;xlsx&#x27;</span>,</span><br><span class="line">			<span class="attr">bookSST</span>: <span class="literal">true</span>,</span><br><span class="line">			<span class="attr">type</span>: <span class="string">&#x27;array&#x27;</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="title class_">FileSaver</span>.<span class="title function_">saveAs</span>(</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">Blob</span>([worksheetout], &#123; <span class="attr">type</span>: <span class="string">&#x27;application/octet-stream&#x27;</span> &#125;),</span><br><span class="line">				fileName</span><br><span class="line">			)</span><br><span class="line">			<span class="title class_">ElMessage</span>(&#123; <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;导出成功&#x27;</span> &#125;)</span><br><span class="line">		&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">error</span>(e)</span><br><span class="line">			<span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;导出失败&#x27;</span>)</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> worksheetout</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>（3）直接使用</strong></p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">ref</span>=<span class="string">&quot;reportRef&quot;</span> <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;dataList&quot;</span> <span class="attr">id</span>=<span class="string">&quot;exportTable&quot;</span>&gt;</span></span>...<span class="language-xml"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span></span><br><span class="line">import download from &#x27;@/utils/htmlToExcel.js&#x27;</span><br><span class="line">const loading = ref(false)</span><br><span class="line">const dataList = ref([])</span><br><span class="line">const getDataList = () =&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 使用方法1</span><br><span class="line">const handleExport = () =&gt; &#123;</span><br><span class="line">    let list = [</span><br><span class="line">        [</span><br><span class="line">            &quot;姓名&quot;,</span><br><span class="line">            &quot;年龄&quot;,</span><br><span class="line">            &quot;性别&quot;,</span><br><span class="line">            &quot;学历&quot;,</span><br><span class="line">            &quot;创建时间&quot;,</span><br><span class="line">        ],</span><br><span class="line">    ];</span><br><span class="line">    dataList.value.forEach((item, index) =&gt; &#123;</span><br><span class="line">        list.push([</span><br><span class="line">            item.name,</span><br><span class="line">            item.age,</span><br><span class="line">            item.sex,</span><br><span class="line">            item.education,</span><br><span class="line">            item.createTime,</span><br><span class="line">        ]);</span><br><span class="line">    &#125;);</span><br><span class="line">    download.downloadXlsx(list, <span class="code">`2023-12-01.xlsx`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用方法2， 适用于复杂的表格 (单元格合并等情况)</span><br><span class="line">const handleExport = () =&gt; &#123;</span><br><span class="line">    download.getExcel(&#x27;#exportTable&#x27;, <span class="code">`2023-12-01.xlsx`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h3 id="👉-接口直接返回文件，实现-excel-表格下载"><a href="#👉-接口直接返回文件，实现-excel-表格下载" class="headerlink" title="👉 接口直接返回文件，实现 excel 表格下载"></a>👉 接口直接返回文件，实现 excel 表格下载</h3><ul>
<li>接口返回</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// http.js</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">exportVarTestReport</span>(<span class="params">data</span>) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">		<span class="attr">url</span>: <span class="string">&#x27;/app-api/website/calc/download&#x27;</span>,</span><br><span class="line">		<span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">		<span class="attr">params</span>: data,</span><br><span class="line">		<span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span>,</span><br><span class="line">		<span class="attr">headers</span>: &#123;</span><br><span class="line">			<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="/images/前端实现导出xlsx表格/exportFile1.png" alt="image" class="max600"/>
<img src="/images/前端实现导出xlsx表格/exportFile2.png" alt="image" class="max600"/>

<ul>
<li>处理数据(下载)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下载报告操作</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">downloadReport</span>(<span class="params">row</span>) &#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="title function_">exportReport</span>(&#123;</span><br><span class="line">			<span class="attr">id</span>: row.<span class="property">id</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">			.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">				<span class="comment">// 处理整个文件res.data</span></span><br><span class="line">				<span class="comment">// ******** 开始 ********</span></span><br><span class="line">				<span class="keyword">const</span> link = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">				<span class="keyword">const</span> blogObj = <span class="keyword">new</span> <span class="title class_">Blob</span>([res.<span class="property">data</span>], &#123;</span><br><span class="line">					<span class="attr">type</span>: <span class="string">&#x27;application/vnd.ms-excel&#x27;</span>,</span><br><span class="line">				&#125;)</span><br><span class="line">				<span class="comment">// 创建一个新的url对象</span></span><br><span class="line">				<span class="keyword">const</span> objectUrl = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blogObj)</span><br><span class="line">				link.<span class="property">href</span> = objectUrl</span><br><span class="line">				<span class="comment">// 导出文件名</span></span><br><span class="line">				link.<span class="property">download</span> = <span class="string">`result.xlsx`</span></span><br><span class="line">				<span class="comment">// 自定义下载文件名</span></span><br><span class="line">				link.<span class="title function_">click</span>()</span><br><span class="line">				<span class="comment">// 为了更好地性能和内存使用状况，应该在适当的时候释放url</span></span><br><span class="line">				<span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(objectUrl)</span><br><span class="line">				<span class="comment">// ******** 结束 ********</span></span><br><span class="line">			&#125;)</span><br><span class="line">			.<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;下载失败&#x27;</span>)</span><br><span class="line">			&#125;)</span><br><span class="line">			.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">	&#125; <span class="keyword">catch</span> (error) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="👉-接口返回一个文件链接，实现点击按钮下载"><a href="#👉-接口返回一个文件链接，实现点击按钮下载" class="headerlink" title="👉 接口返回一个文件链接，实现点击按钮下载"></a>👉 接口返回一个文件链接，实现点击按钮下载</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> href = <span class="string">&#x27;http: xxxxx&#x27;</span></span><br><span class="line"><span class="title function_">clickDownFile</span>(<span class="string">&#x27;name&#x27;</span>, href)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击按钮下载</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clickDownFile</span>(<span class="params">filename, href</span>) &#123;</span><br><span class="line">	<span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">	a.<span class="property">href</span> = href <span class="comment">// a链接的下载地址</span></span><br><span class="line">	a.<span class="title function_">setAttribute</span>(<span class="string">&#x27;download&#x27;</span>, filename)</span><br><span class="line">	<span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)</span><br><span class="line">	a.<span class="title function_">click</span>()</span><br><span class="line">	<span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(a)</span><br><span class="line">	<span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(href)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>上传/导出</category>
      </categories>
      <tags>
        <tag>export</tag>
        <tag>xlsx</tag>
      </tags>
  </entry>
  <entry>
    <title>前端性能优化</title>
    <url>/2025/09/12/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>前端性能优化是提升用户体验的核心环节，直接影响<strong>页面加载速度、交互流畅度和用户留存率</strong>。<br>优化需覆盖<strong>资源加载、渲染执行、运行时效率</strong>三大阶段，结合量化指标（如 Core Web Vitals）制定针对性方案。以下是系统的前端性能优化策略详解：</p>
<h2 id="资源加载阶段优化（减少加载时间）"><a href="#资源加载阶段优化（减少加载时间）" class="headerlink" title="资源加载阶段优化（减少加载时间）"></a>资源加载阶段优化（减少加载时间）</h2><p>加载阶段是用户对性能的第一感知，目标是<strong>降低首屏加载时间（FCP）和资源传输成本</strong></p>
<p><strong>（1）资源体积优化</strong></p>
<ul>
<li><p><strong>代码压缩与混淆</strong></p>
<ul>
<li>JS：使用 Terser 压缩(移除空格&#x2F;换行&#x2F;注释，缩短变量名)，Webpack&#x2F;Vite 生产模式默认开启</li>
<li>CSS：通过 CSSNano 压缩，配合 PostCSS 移除冗余规则</li>
<li>HTML：使用 html-minifier 压缩，移除空白字符和注释<br>👉 效果：通常可减少 30%-60% 的资源体积</li>
</ul>
</li>
<li><p><strong>图片与媒体优化</strong></p>
<ul>
<li><p>采用精灵图，减少 http 请求次数</p>
</li>
<li><p>使用 svg 图，体积小</p>
</li>
<li><p><strong>格式转换</strong>：优先使用 WebP&#x2F;AVIF（比 JPG 小 30%-50%），通过<code>&lt;picture&gt;</code>标签兼容旧浏览器</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">&quot;image.avif&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/avif&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">&quot;image.webp&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/webp&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;描述文本&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>分辨率适配</strong>：用 srcset 和 sizes 提供多分辨率图片，避免大图片在小屏幕上加载</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">	<span class="attr">src</span>=<span class="string">&quot;pic-800.jpg&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">srcset</span>=<span class="string">&quot;pic-400.jpg 400w, pic-800.jpg 800w&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">sizes</span>=<span class="string">&quot;(max-width: 600px) 400px, 800px&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>压缩处理</strong>：通过 Sharp（Node.js 库）或 TinyPNG 批量压缩图片，保留视觉质量的同时减小体积</li>
</ul>
</li>
<li><p><strong>Tree Shaking（树摇）</strong><br>移除未引用的代码（如未使用的函数、库），需满足:</p>
<ul>
<li>使用 ES6 模块（import&#x2F;export）而非 CommonJS（require）</li>
<li>配置 package.json 的 sideEffects: false（标记无副作用文件）</li>
<li>Webpack&#x2F;Vite 生产模式自动启用</li>
</ul>
</li>
</ul>
<p><strong>（2）资源加载策略</strong></p>
<ul>
<li><p><strong>按需加载</strong></p>
</li>
<li><p><strong>预加载与预连接</strong></p>
<ul>
<li>preload：提前加载关键资源（如首屏 CSS、字体），优先级高于普通资源</li>
<li>preconnect：提前建立与第三方域名的连接（如 CDN、API 服务器），减少 DNS 解析和 TCP 握手耗时</li>
</ul>
</li>
<li><p><strong>懒加载（Lazy Load）</strong><br>延迟加载非首屏资源，减少初始请求数</p>
<ul>
<li>图片 &#x2F; 视频：使用 loading&#x3D;”lazy”属性（浏览器原生支持）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;below-fold.jpg&quot;</span> <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;折叠区域图片&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>组件：通过 IntersectionObserver 观察者监听元素可见性后加载</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">IntersectionObserver</span>(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">	entries.<span class="title function_">forEach</span>(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (entry.<span class="property">isIntersecting</span>) &#123;</span><br><span class="line">			<span class="keyword">import</span>(<span class="string">&#x27;./LazyComponent&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">				<span class="comment">// 渲染组件</span></span><br><span class="line">			&#125;)</span><br><span class="line">			observer.<span class="title function_">unobserve</span>(entry.<span class="property">target</span>)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">observer.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;lazy-container&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>（3）网络传输优化</strong></p>
<ul>
<li><p><strong>CDN 分发静态资源</strong><br>将 JS、CSS、图片等静态资源部署到 CDN（如 Cloudflare、阿里云 CDN），用户从最近的节点加载，减少网络延迟（尤其跨地区用户）</p>
</li>
<li><p><strong>启用 HTTP&#x2F;2 或 HTTP&#x2F;3</strong></p>
<ul>
<li>HTTP&#x2F;2：支持多路复用（同一连接并发请求），解决 HTTP&#x2F;1.1 的队头阻塞问题</li>
<li>HTTP&#x2F;3：基于 QUIC 协议（UDP），进一步优化丢包恢复和连接建立速度<br>👉 实施：Nginx&#x2F;Apache 配置启用，大型应用可借助 Cloudflare 等服务商快速支持</li>
</ul>
</li>
<li><p><strong>缓存策略优化</strong></p>
<ul>
<li><strong>强缓存</strong>：静态资源（JS&#x2F;CSS&#x2F; 图片）设置长期缓存</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=31536000, immutable  # 缓存1年，不验证</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>协商缓存</strong>：API 数据或频繁更新的资源用 ETag 或 Last-Modified</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ETag</span><span class="punctuation">: </span>&quot;abc123&quot;  # 资源唯一标识，内容变化则更新</span><br><span class="line"><span class="attribute">Last-Modified</span><span class="punctuation">: </span>Tue, 11 Sep 2024 08:00:00 GMT</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>缓存更新</strong>：通过文件名哈希（如 app.8f3d.js）实现缓存击穿，内容变化时文件名更新</li>
</ul>
</li>
</ul>
<h2 id="渲染阶段优化（提升渲染效率）"><a href="#渲染阶段优化（提升渲染效率）" class="headerlink" title="渲染阶段优化（提升渲染效率）"></a>渲染阶段优化（提升渲染效率）</h2><p>渲染阶段优化的核心是<strong>减少重排（Reflow）和重绘（Repaint）</strong>，提升页面渲染速度和流畅度<br><strong>（1）DOM 优化</strong></p>
<ul>
<li><strong>减少 DOM 节点数量与层级</strong><br>DOM 节点越多，浏览器构建渲染树（Render Tree）的耗时越长。优化方向：<ul>
<li>避免无意义嵌套（如<code>&lt;div&gt;&lt;span&gt;文本&lt;/span&gt;&lt;/div&gt;</code>简化为<code>&lt;span&gt;文本&lt;/span&gt;</code>）</li>
<li>用 CSS Grid&#x2F;Flex 替代多层嵌套的布局结构</li>
<li>大型列表使用虚拟列表（如 react-window），仅渲染可视区域节点</li>
</ul>
</li>
<li><strong>批量操作 DOM</strong><br>频繁修改 DOM 会触发多次重排，建议批量操作：<ul>
<li>使用 documentFragment 或离线 DOM（如 div.innerHTML）暂存修改，完成后一次性插入文档：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>()</span><br><span class="line">data.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">	li.<span class="property">textContent</span> = item.<span class="property">name</span></span><br><span class="line">	fragment.<span class="title function_">appendChild</span>(li)</span><br><span class="line">&#125;)</span><br><span class="line">list.<span class="title function_">appendChild</span>(fragment) <span class="comment">// 仅触发1次重排</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p><strong>（2）CSS 优化</strong></p>
<ul>
<li><strong>简化选择器与样式</strong><ul>
<li>避免复杂选择器（如 div:nth-child(2) &gt; .class ~ span），改用类选择器（.item）</li>
<li>减少通配符（*）和属性选择器（[type&#x3D;”text”]）的使用，匹配效率低</li>
<li>合并重复样式，使用 CSS 变量（–primary: #000）减少代码冗余</li>
</ul>
</li>
<li><strong>避免触发重排的属性</strong><ul>
<li>修改布局属性（width、height、margin 等）会触发重排，优先使用仅触发合成（Composite）的属性：</li>
<li>位移：用 transform: translate(Xpx, Ypx)替代 top&#x2F;left</li>
<li>透明度：用 opacity 替代 visibility（后者仍会触发重绘）</li>
</ul>
</li>
<li><strong>关键 CSS 内联</strong><br>将首屏必需的 CSS 内联到<code>&lt;style&gt;</code>中，避免外部 CSS 文件加载阻塞渲染：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="comment">/* 首屏关键CSS：导航、Banner等 */</span></span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">height</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.banner</span> &#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">background</span>: <span class="number">#f0f0f0</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 非关键CSS异步加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">	<span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">href</span>=<span class="string">&quot;non-critical.css&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">as</span>=<span class="string">&quot;style&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">onload</span>=<span class="string">&quot;this.rel=&#x27;stylesheet&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>（3）渲染机制优化</strong></p>
<ul>
<li><p><strong>使用 CSS Containment 隔离渲染范围</strong><br>告知浏览器某元素的渲染不会影响其他区域，限制重排 &#x2F; 重绘范围：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.widget</span> &#123;</span><br><span class="line">	<span class="attribute">contain</span>: layout paint size; <span class="comment">/* 布局、绘制、尺寸均独立 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>合理使用合成层（Compositor Layers）</strong><br>将频繁动画的元素（如轮播、弹窗）提升为独立合成层，避免影响其他元素：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.animated-element</span> &#123;</span><br><span class="line">	<span class="attribute">will-change</span>: transform; <span class="comment">/* 提示浏览器该元素将动画，提前准备合成层 */</span></span><br><span class="line">	<span class="comment">/* 或使用 transform: translateZ(0) 强制创建合成层（兼容性更好） */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>👉 注意：合成层过多会占用更多内存，需控制数量</p>
<h2 id="运行阶段优化（提升交互流畅度）"><a href="#运行阶段优化（提升交互流畅度）" class="headerlink" title="运行阶段优化（提升交互流畅度）"></a>运行阶段优化（提升交互流畅度）</h2><p>运行阶段优化聚焦于<strong>减少主线程阻塞</strong>，确保用户交互（点击、滚动等）响应迅速<br><strong>（1）JavaScript 优化</strong></p>
<ul>
<li><p>避免长任务（Long Tasks）<br>主线程执行超过 50ms 的任务会阻塞渲染，优化方案：</p>
<ul>
<li><p>拆分长任务：用 setTimeout 或 queueMicrotask 分批次执行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拆分大型循环</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">processChunk</span> = (<span class="params">start, end</span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; end &amp;&amp; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">		<span class="comment">// 处理单个数据</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (end &lt; data.<span class="property">length</span>) &#123;</span><br><span class="line">		<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">processChunk</span>(end, end + <span class="number">100</span>), <span class="number">0</span>) <span class="comment">// 分批次执行</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">processChunk</span>(<span class="number">0</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>复杂计算移至 Web Worker：避免主线程阻塞（如数据解析、图表渲染）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主线程</span></span><br><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;data-processor.js&#x27;</span>)</span><br><span class="line">worker.<span class="title function_">postMessage</span>(largeDataset)</span><br><span class="line">worker.<span class="property">onmessage</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;处理结果：&#x27;</span>, e.<span class="property">data</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// data-processor.js（Worker线程）</span></span><br><span class="line">self.<span class="property">onmessage</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> result = <span class="title function_">heavyComputation</span>(e.<span class="property">data</span>) <span class="comment">// 复杂计算</span></span><br><span class="line">	self.<span class="title function_">postMessage</span>(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>防抖（Debounce）与节流（Throttle）<br>限制高频事件（滚动、输入、resize）的执行频率：</p>
<ul>
<li>防抖：延迟 n 秒后执行，若 n 秒内再次触发则重新计时（如搜索输入联想）：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">debounce</span> = (<span class="params">fn, delay</span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">let</span> timer</span><br><span class="line">	<span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">		timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args), delay)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="title function_">debounce</span>(handleSearch, <span class="number">500</span>))</span><br></pre></td></tr></table></figure></li>
<li>节流：每隔 n 秒最多执行一次（如滚动加载）：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">throttle</span> = (<span class="params">fn, interval</span>) =&gt; &#123;</span><br><span class="line">	<span class="keyword">let</span> lastTime = <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">const</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">		<span class="keyword">if</span> (now - lastTime &gt;= interval) &#123;</span><br><span class="line">			fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">			lastTime = now</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="title function_">throttle</span>(loadMore, <span class="number">200</span>))</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>优化事件监听</p>
<ul>
<li><p>事件委托：将多个子元素的事件绑定到父元素，减少内存占用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代替为每个li绑定click</span></span><br><span class="line">ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (e.<span class="property">target</span>.<span class="property">tagName</span> === <span class="string">&#x27;LI&#x27;</span>) &#123;</span><br><span class="line">		<span class="title function_">handleLiClick</span>(e.<span class="property">target</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>及时解绑：页面卸载或组件销毁时，移除事件监听和定时器：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// React useEffect示例</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(updateData, <span class="number">1000</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(timer) <span class="comment">// 组件卸载时清理</span></span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p><strong>（2）动画与交互优化</strong></p>
<ul>
<li><p>优先使用 CSS 动画<br>CSS 动画由浏览器合成线程处理，不阻塞主线程；JS 动画需频繁触发重绘，优先选择：</p>
<ul>
<li>@keyframes 或 transition 实现动画；</li>
<li>复杂动画用 requestAnimationFrame 替代 setInterval（与浏览器刷新同步）：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">animate</span> = (<span class="params">timestamp</span>) =&gt; &#123;</span><br><span class="line">	<span class="comment">// 更新动画状态</span></span><br><span class="line">	element.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;progress&#125;</span>px)`</span></span><br><span class="line">	<span class="keyword">if</span> (progress &lt; <span class="number">100</span>) &#123;</span><br><span class="line">		<span class="title function_">requestAnimationFrame</span>(animate) <span class="comment">// 下一帧继续</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">requestAnimationFrame</span>(animate)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>优化滚动性能<br>滚动时避免 DOM 操作和复杂计算：</p>
<ul>
<li><p>用 passive: true 优化触摸滚动（避免滚动阻塞）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, handleScroll, &#123; <span class="attr">passive</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>滚动事件中使用 getBoundingClientRect 时，缓存结果避免频繁重排。</p>
</li>
</ul>
</li>
</ul>
<p><strong>（3）内存管理优化</strong></p>
<ul>
<li>避免内存泄漏<br>常见内存泄漏场景及解决方案：<ul>
<li>未清理的定时器 &#x2F; 事件监听：组件卸载时清除</li>
<li>全局变量：避免意外创建（如 function fn() { a &#x3D; 1; }中的 a）</li>
<li>闭包引用：避免长期持有 DOM 或大对象引用；</li>
<li>使用 WeakMap&#x2F;WeakSet 存储临时数据（键为对象时，对象销毁后自动回收）</li>
</ul>
</li>
<li>优化大型列表<br>长列表（1000 + 项）一次性渲染会导致 DOM 过多、内存飙升，解决方案：<ul>
<li>虚拟列表：仅渲染可视区域项（如 react-window、vue-virtual-scroller）</li>
<li>分页加载：每次加载 20-50 项，滚动到底部时加载下一页</li>
</ul>
</li>
</ul>
<h2 id="性能监控与量化指标"><a href="#性能监控与量化指标" class="headerlink" title="性能监控与量化指标"></a>性能监控与量化指标</h2><p>优化需结合量化指标持续迭代，核心关注:</p>
<ul>
<li>Core Web Vitals（核心 Web 指标）<ul>
<li>LCP（最大内容绘制）：目标 &lt; 2.5s（首屏核心内容加载时间）</li>
<li>FID（首次输入延迟）：目标 &lt; 100ms（用户首次交互响应时间）</li>
<li>CLS（累积布局偏移）：目标 &lt; 0.1（页面布局稳定性）</li>
</ul>
</li>
<li>监控工具<ul>
<li>开发阶段：Lighthouse（Chrome 插件）、WebPageTest（详细性能报告）</li>
<li>生产环境：Chrome User Experience Report（真实用户数据）、Sentry（错误 + 性能监控）</li>
</ul>
</li>
<li>优化流程<ul>
<li>用 Lighthouse 生成性能报告，定位瓶颈（如大图片未压缩、长任务阻塞）</li>
<li>按优先级实施优化（先解决核心指标不达标项）</li>
<li>上线后监控指标变化，持续迭代</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>前端性能优化的核心逻辑是：<strong>减少资源体积 → 加速资源传输 → 优化渲染效率 → 避免主线程阻塞</strong>。需结合业务场景（如电商注重首屏加载，后台系统注重交互流畅度）制定优先级，同时通过量化指标验证优化效果。性能优化是持续过程，需随着用户增长和功能迭代不断调整策略</p>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>实现一个故障效果的按钮</title>
    <url>/2025/09/15/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%95%85%E9%9A%9C%E6%95%88%E6%9E%9C%E7%9A%84%E6%8C%89%E9%92%AE/</url>
    <content><![CDATA[<h3 id="🚀-故障按钮效果"><a href="#🚀-故障按钮效果" class="headerlink" title="🚀 故障按钮效果"></a>🚀 故障按钮效果</h3><!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<style>
			.faultBox {
				padding: 20px;
				margin: 0;
				display: flex;
				justify-content: center;
			}
    		.fault-btn,
    		.fault-btn::after {
    			padding: 13px 36px;
    			border: none;
    			outline: transparent;
    			background: linear-gradient(
    				45deg,
    				transparent 5%,
    				#ff013c 5%
    			); /* 0-5%透明 5%-100%红色*/
    			box-shadow: 6px 0 #00e6f6;
    			font-family: 'Bebas Neue', monospace;
    			font-weight: bold;
    			display: flex;
    			align-items: center;
    			justify-content: center;
    			color: #fff;
    			font-size: 24px;
    			letter-spacing: 2px;
    			position: relative;
    		}
    		.fault-btn::after {
    			/* 伪元素绝对定位，完全覆盖在按钮上 */
    			content: 'FAULT BUTTON';
    			display: block;
    			position: absolute;
    			top: 0;
    			left: 0;
    			right: 0;
    			bottom: 0;
    			/* background: #000; */
    			/* 设置背景: 比按钮左下角多出2%的蓝色 */
    			background: linear-gradient(
    				45deg,
    				transparent 3%,
    				#00e6f6 3%,
    				#00e6f6 5%,
    				#ff013c 5%
    			);
    			/* 文字阴影 */
    			text-shadow: -3px -3px 0px #f8f005, 3px 3px 0px #00e6f6;
    			/* 切割：矩形inset (上右下左) */
    			--slice-0: inset(50% 0 50% 0);
    			--slice-1: inset(40% 0 45% 0);
    			--slice-2: inset(76% 0 10% 0);
    			--slice-3: inset(30% 0 57% 0);
    			--slice-4: inset(42% 0 45% 0);
    			--slice-5: inset(50% 0 40% 0);
    			--slice-6: inset(80% 0 5% 0);
    			clip-path: var(--slice-0);
    			/*
    			clip-path: var(--slice-1);
    			transform: translate(-10px, 5px);
    			*/
    		}
    		.fault-btn:hover::after {
    			animation: glitch 0.5s;
    			animation-timing-function: steps(2, end);
    		}
    		@keyframes glitch {
    			0% {
    				clip-path: var(--slice-2);
    				transform: translate(-10px, 5px);
    			}
    			10% {
    				clip-path: var(--slice-1);
    				transform: translate(-10px, -5px);
    			}
    			20% {
    				clip-path: var(--slice-6);
    				transform: translate(15px, 5px);
    			}
    			30% {
    				clip-path: var(--slice-3);
    				transform: translate(-13px, -10px);
    			}
    			40% {
    				clip-path: var(--slice-4);
    				transform: translate(-10px, -5px);
    			}
    			50% {
    				clip-path: var(--slice-5);
    				transform: translate(-15px, 5px);
    			}
    			60% {
    				clip-path: var(--slice-3);
    				transform: translate(8px, -3px);
    			}
    			70% {
    				clip-path: var(--slice-1);
    				transform: translate(-10px, 5px);
    			}
    			80% {
    				clip-path: var(--slice-5);
    				transform: translate(18px, -5px);
    			}
    			90% {
    				clip-path: var(--slice-4);
    				transform: translate(-5px, 12px);
    			}
    			100% {
    				clip-path: var(--slice-2);
    				transform: translate(15px, -3px);
    			}
    		}
    	</style>
    </head>
    <body>
    	<div class="faultBox">
    		<button class="fault-btn">FAULT BUTTON</button>
    	</div>
    </body>
</html>

<h3 id="🚀-源代码"><a href="#🚀-源代码" class="headerlink" title="🚀 源代码"></a>🚀 源代码</h3><ul>
<li>伪元素 ::after</li>
<li>切割属性 clip-path</li>
<li>动画 animation</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.faultBox</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.fault-btn</span>,</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.fault-btn</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">padding</span>: <span class="number">13px</span> <span class="number">36px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">outline</span>: transparent;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span></span><br><span class="line"><span class="language-css">					<span class="number">45deg</span>,</span></span><br><span class="line"><span class="language-css">					transparent <span class="number">5%</span>,</span></span><br><span class="line"><span class="language-css">					<span class="number">#ff013c</span> <span class="number">5%</span></span></span><br><span class="line"><span class="language-css">				); <span class="comment">/* 0-5%透明 5%-100%红色*/</span></span></span><br><span class="line"><span class="language-css">				<span class="attribute">box-shadow</span>: <span class="number">6px</span> <span class="number">0</span> <span class="number">#00e6f6</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">font-family</span>: <span class="string">&#x27;Bebas Neue&#x27;</span>, monospace;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">letter-spacing</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.fault-btn</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="comment">/* 伪元素绝对定位，完全覆盖在按钮上 */</span></span></span><br><span class="line"><span class="language-css">				<span class="attribute">content</span>: <span class="string">&#x27;FAULT BUTTON&#x27;</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">				<span class="comment">/* background: #000; */</span></span></span><br><span class="line"><span class="language-css">				<span class="comment">/* 设置背景: 比按钮左下角多出2%的蓝色 */</span></span></span><br><span class="line"><span class="language-css">				<span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span></span><br><span class="line"><span class="language-css">					<span class="number">45deg</span>,</span></span><br><span class="line"><span class="language-css">					transparent <span class="number">3%</span>,</span></span><br><span class="line"><span class="language-css">					<span class="number">#00e6f6</span> <span class="number">3%</span>,</span></span><br><span class="line"><span class="language-css">					<span class="number">#00e6f6</span> <span class="number">5%</span>,</span></span><br><span class="line"><span class="language-css">					<span class="number">#ff013c</span> <span class="number">5%</span></span></span><br><span class="line"><span class="language-css">				);</span></span><br><span class="line"><span class="language-css">				<span class="comment">/* 文字阴影 */</span></span></span><br><span class="line"><span class="language-css">				<span class="attribute">text-shadow</span>: -<span class="number">3px</span> -<span class="number">3px</span> <span class="number">0px</span> <span class="number">#f8f005</span>, <span class="number">3px</span> <span class="number">3px</span> <span class="number">0px</span> <span class="number">#00e6f6</span>;</span></span><br><span class="line"><span class="language-css">				<span class="comment">/* 切割：矩形inset (上右下左) */</span></span></span><br><span class="line"><span class="language-css">				<span class="attr">--slice-0</span>: <span class="built_in">inset</span>(<span class="number">50%</span> <span class="number">0</span> <span class="number">50%</span> <span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">				<span class="attr">--slice-1</span>: <span class="built_in">inset</span>(<span class="number">40%</span> <span class="number">0</span> <span class="number">45%</span> <span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">				<span class="attr">--slice-2</span>: <span class="built_in">inset</span>(<span class="number">76%</span> <span class="number">0</span> <span class="number">10%</span> <span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">				<span class="attr">--slice-3</span>: <span class="built_in">inset</span>(<span class="number">30%</span> <span class="number">0</span> <span class="number">57%</span> <span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">				<span class="attr">--slice-4</span>: <span class="built_in">inset</span>(<span class="number">42%</span> <span class="number">0</span> <span class="number">45%</span> <span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">				<span class="attr">--slice-5</span>: <span class="built_in">inset</span>(<span class="number">50%</span> <span class="number">0</span> <span class="number">40%</span> <span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">				<span class="attr">--slice-6</span>: <span class="built_in">inset</span>(<span class="number">80%</span> <span class="number">0</span> <span class="number">5%</span> <span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">				<span class="attribute">clip-path</span>: <span class="built_in">var</span>(--slice-<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">				<span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    			clip-path: var(--slice-1);</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    			transform: translate(-10px, 5px);</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    			*/</span></span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="selector-class">.fault-btn</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">animation</span>: glitch <span class="number">0.5s</span>;</span></span><br><span class="line"><span class="language-css">				<span class="attribute">animation-timing-function</span>: <span class="built_in">steps</span>(<span class="number">2</span>, end);</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">			<span class="keyword">@keyframes</span> glitch &#123;</span></span><br><span class="line"><span class="language-css">				<span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">clip-path</span>: <span class="built_in">var</span>(--slice-<span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">					<span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">10px</span>, <span class="number">5px</span>);</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">				<span class="number">10%</span> &#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">clip-path</span>: <span class="built_in">var</span>(--slice-<span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">					<span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">10px</span>, -<span class="number">5px</span>);</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">				<span class="number">20%</span> &#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">clip-path</span>: <span class="built_in">var</span>(--slice-<span class="number">6</span>);</span></span><br><span class="line"><span class="language-css">					<span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">15px</span>, <span class="number">5px</span>);</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">				<span class="number">30%</span> &#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">clip-path</span>: <span class="built_in">var</span>(--slice-<span class="number">3</span>);</span></span><br><span class="line"><span class="language-css">					<span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">13px</span>, -<span class="number">10px</span>);</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">				<span class="number">40%</span> &#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">clip-path</span>: <span class="built_in">var</span>(--slice-<span class="number">4</span>);</span></span><br><span class="line"><span class="language-css">					<span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">10px</span>, -<span class="number">5px</span>);</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">				<span class="number">50%</span> &#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">clip-path</span>: <span class="built_in">var</span>(--slice-<span class="number">5</span>);</span></span><br><span class="line"><span class="language-css">					<span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">15px</span>, <span class="number">5px</span>);</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">				<span class="number">60%</span> &#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">clip-path</span>: <span class="built_in">var</span>(--slice-<span class="number">3</span>);</span></span><br><span class="line"><span class="language-css">					<span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">8px</span>, -<span class="number">3px</span>);</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">				<span class="number">70%</span> &#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">clip-path</span>: <span class="built_in">var</span>(--slice-<span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">					<span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">10px</span>, <span class="number">5px</span>);</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">				<span class="number">80%</span> &#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">clip-path</span>: <span class="built_in">var</span>(--slice-<span class="number">5</span>);</span></span><br><span class="line"><span class="language-css">					<span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">18px</span>, -<span class="number">5px</span>);</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">				<span class="number">90%</span> &#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">clip-path</span>: <span class="built_in">var</span>(--slice-<span class="number">4</span>);</span></span><br><span class="line"><span class="language-css">					<span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">5px</span>, <span class="number">12px</span>);</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">				<span class="number">100%</span> &#123;</span></span><br><span class="line"><span class="language-css">					<span class="attribute">clip-path</span>: <span class="built_in">var</span>(--slice-<span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">					<span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">15px</span>, -<span class="number">3px</span>);</span></span><br><span class="line"><span class="language-css">				&#125;</span></span><br><span class="line"><span class="language-css">			&#125;</span></span><br><span class="line"><span class="language-css">		</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;faultBox&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;fault-btn&quot;</span>&gt;</span>FAULT BUTTON<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>clip-path</tag>
      </tags>
  </entry>
  <entry>
    <title>前端路由的hash+history模式</title>
    <url>/2025/09/16/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E7%9A%84hash+history%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>前端路由的两种核心实现方式（hash 哈希模式、history 模式），主要用于管理 URL 与组件之间的映射关系，核心区别：</p>
<ul>
<li>URL 格式</li>
<li>底层原理</li>
<li>服务器依赖（hash ❌ 、history ✅）</li>
<li>功能限制</li>
</ul>
<h3 id="👉-URL-格式"><a href="#👉-URL-格式" class="headerlink" title="👉 URL 格式"></a>👉 URL 格式</h3><ul>
<li><p>hash 模式</p>
<ul>
<li>URL 包含 <code>#</code>，<code>#</code> 后面的部分为路由路径 <code>http://example.com/#/home</code></li>
<li><strong><code>#</code>及其后面的内容不会被发送到服务器，仅由前端路由解析</strong></li>
</ul>
</li>
<li><p>history 模式</p>
<ul>
<li>URL 不包含 <code>#</code>，路径格式与传统 URL 一致 <code>http://example.com/home</code></li>
<li>路径看起来更 “整洁” ，符合用户对 URL 的常规认知</li>
</ul>
</li>
</ul>
<h3 id="👉-底层原理"><a href="#👉-底层原理" class="headerlink" title="👉 底层原理"></a>👉 底层原理</h3><ul>
<li><p>hash 模式</p>
<ul>
<li>基于浏览器的 <strong>哈希值（window.location.hash）</strong> 实现</li>
<li>哈希值的变化会触发 hashchange 事件，Vue Router 监听该事件并匹配对应的路由组件</li>
<li>特点<ul>
<li><strong><code>#</code> 后面的内容不会被包含在 HTTP 请求中，仅在客户端解析</strong></li>
<li>即使刷新页面，浏览器也不会向服务器请求该路径，而是直接加载当前页面并由前端路由处理</li>
</ul>
</li>
</ul>
</li>
<li><p>history 模式</p>
<ul>
<li>基于 <strong>HTML5 的 History API（window.history）</strong> 实现，主要使用 pushState() 和 replaceState() 方法操作浏览器历史记录</li>
<li>特点<ul>
<li>可以修改 URL 路径而不触发页面刷新（传统的 window.location.href 会导致刷新）</li>
<li>路径变化时不会自动触发事件，Vue Router 内部通过拦截 <code>&lt;a&gt;</code> 标签点击和监听 popstate 事件（前进 &#x2F; 后退按钮）实现路由切换。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="👉-核心区别对比表"><a href="#👉-核心区别对比表" class="headerlink" title="👉 核心区别对比表"></a>👉 核心区别对比表</h3><table>
<thead>
<tr>
<th align="left">对比维度</th>
<th align="left">hash 模式</th>
<th align="left">history 模式</th>
</tr>
</thead>
<tbody><tr>
<td align="left">URL 美观度</td>
<td align="left">含 <code>#</code>，不够美观（如 <code>/#/about</code>）</td>
<td align="left">无 <code>#</code>，更接近传统 URL（如 <code>/about</code>）</td>
</tr>
<tr>
<td align="left">服务器依赖</td>
<td align="left">无：刷新页面不会向服务器请求路径</td>
<td align="left">有：刷新页面会向服务器请求该路径</td>
</tr>
<tr>
<td align="left">兼容性</td>
<td align="left">支持所有浏览器（包括 IE8 及以下）</td>
<td align="left">仅支持 HTML5 浏览器（IE10+）</td>
</tr>
<tr>
<td align="left">路径长度限制</td>
<td align="left">有（不同浏览器对哈希值长度限制不同）</td>
<td align="left">理论上无限制（取决于服务器配置）</td>
</tr>
<tr>
<td align="left">部署复杂度</td>
<td align="left">简单：无需服务器配置</td>
<td align="left">复杂：需服务器配置路由重定向</td>
</tr>
<tr>
<td align="left">404 处理</td>
<td align="left">不会出现 404（始终由前端处理）</td>
<td align="left">可能出现 404（需服务器配置兜底页面</td>
</tr>
</tbody></table>
<h3 id="👉-使用场景"><a href="#👉-使用场景" class="headerlink" title="👉 使用场景"></a>👉 使用场景</h3><ul>
<li><p>优先选择 hash 模式的情况</p>
<ul>
<li>项目需要兼容 旧浏览器（如：IE8 及以下）—— 理由：hash 兼容性强，无需后端配置</li>
<li>部署环境无法修改服务器配置（如某些静态托管平台不支持自定义配置）</li>
<li>对 URL 美观度要求不高，更注重开发和部署的简便</li>
</ul>
</li>
<li><p>优先选择 history 模式的情况</p>
<ul>
<li>追求 URL 美观性（如：企业官网、产品展示页）</li>
<li>需要使用 SEO 友好的 URL（虽然单页应用 SEO 需额外处理，但 history 模式的 URL 更符合搜索引擎规范）</li>
<li><strong>部署环境支持服务器配置（如 Nginx、Apache 等）</strong>，可解决刷新 404 问题</li>
</ul>
</li>
</ul>
<h2 id="👉-关键注意事项："><a href="#👉-关键注意事项：" class="headerlink" title="👉 关键注意事项："></a>👉 关键注意事项：</h2><h3 id="⚠️-history-模式的-404-问题-空白页-页面-404-Cannot-GET-path"><a href="#⚠️-history-模式的-404-问题-空白页-页面-404-Cannot-GET-path" class="headerlink" title="⚠️ history 模式的 404 问题 (空白页&#x2F;页面 404&#x2F;Cannot GET /path)"></a>⚠️ history 模式的 404 问题 (空白页&#x2F;页面 404&#x2F;<code>Cannot GET /path</code>)</h3><p>当用户直接访问<code>http://example.com/about</code>并刷新页面时，浏览器会向服务器请求<code>/about</code>路径。若服务器未配置该路径指向 index.html，会返回 404 错误 或者 <code>Cannot GET /about</code></p>
<ul>
<li><p>解决方法（<strong>需在服务器配置中添加规则，将所有请求重定向到 index.html</strong>）：</p>
<ul>
<li><p><strong>开发环境</strong>配置（本地调试）</p>
<ul>
<li><p>通过 <code>devServer.historyApiFallback</code> 选项，配置路由重定向到 index.html（通常用于支持 history 模式）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vue CLI（vue.config.js）</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">	<span class="attr">devServer</span>: &#123;</span><br><span class="line">		<span class="attr">historyApiFallback</span>: <span class="literal">true</span>, <span class="comment">// 所有请求重定向到 index.html</span></span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vite（vite.config.js）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">	<span class="attr">server</span>: &#123;</span><br><span class="line">		<span class="attr">historyApiFallback</span>: <span class="literal">true</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>生产环境</strong>配置（服务器端）<br>vue.config.js 仅负责开发环境配置，生产环境部署时仍需在服务器（如 Nginx、Apache）中配置重定向规则</p>
</li>
</ul>
</li>
</ul>
<h3 id="⚠️-hash-模式的-SEO-局限"><a href="#⚠️-hash-模式的-SEO-局限" class="headerlink" title="⚠️ hash 模式的 SEO 局限"></a>⚠️ hash 模式的 SEO 局限</h3><p>部分搜索引擎可能会忽略<code>#</code>后的内容，影响页面的 SEO 效果（虽然现代搜索引擎已逐步支持，但仍存在兼容性问题）</p>
<ul>
<li><p>URL 包含<code>#</code>，影响美观和 SEO</p>
<ul>
<li>问题：<code>#</code>符号可能让用户觉得 URL 不专业，且部分旧搜索引擎会忽略<code>#</code>后的内容（影响 SEO）</li>
<li>解决：<ul>
<li>若对 URL 美观度要求高，直接改用 history 模式</li>
<li>SEO 需求可结合服务端渲染（SSR）或预渲染（Prerender）处理</li>
</ul>
</li>
</ul>
</li>
<li><p>哈希值被编码导致路由匹配失败</p>
<ul>
<li>问题：若路由参数包含特殊字符（如 <code>?、&amp;</code>），会被自动编码（如 <code>?</code> 变为 <code>%3F</code>），可能导致路由匹配异常</li>
<li>解决：<ul>
<li>使用 <code>encodeURIComponent</code> 和 <code>decodeURIComponent</code> 手动处理参数编码</li>
<li>复杂参数建议通过 <code>Vuex/Pinia</code> 存储，而非放在 URL 中</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="👉-开发-测试环境（本地打开-dist-index-html）"><a href="#👉-开发-测试环境（本地打开-dist-index-html）" class="headerlink" title="👉 开发&#x2F;测试环境（本地打开 dist&#x2F;index.html）"></a>👉 开发&#x2F;测试环境（本地打开 dist&#x2F;index.html）</h3><ul>
<li>直接双击 <code>dist/index.html</code> 打开（<code>file:// 协议</code>）时，history 模式会因浏览器安全限制失效（空白页）</li>
<li>或 右键使用 vscode 的 Live Server 这类简单文件服务打开页面时，出现空白页</li>
</ul>
<p><img src="/images/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E7%9A%84hash+history%E6%A8%A1%E5%BC%8F/liveServer.png"></p>
<p>临时解决：使用本地服务器打开，如 serve 或 http-server</p>
<ul>
<li>serve 轻量级本地服务器，适合非 Vue 项目或需要独立服务器的场景</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 serve 工具（需 Node.js）</span></span><br><span class="line">npm install -g serve</span><br><span class="line"><span class="comment"># 在 dist 目录运行</span></span><br><span class="line"><span class="built_in">cd</span> dist</span><br><span class="line">serve -s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">npm install -g http-server</span><br><span class="line"><span class="comment"># 在 dist 目录运行</span></span><br><span class="line"><span class="built_in">cd</span> dist</span><br><span class="line">http-server</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E7%9A%84hash+history%E6%A8%A1%E5%BC%8F/httpServer.png"></p>
]]></content>
      <categories>
        <category>Vue-Router</category>
      </categories>
      <tags>
        <tag>Vue-Router</tag>
        <tag>Hash</tag>
        <tag>History</tag>
      </tags>
  </entry>
  <entry>
    <title>前端性能优化—实战思路</title>
    <url>/2025/09/19/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E2%80%94%E5%AE%9E%E6%88%98%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<ul>
<li>打开速度怎么变快 —— 首屏加载优化</li>
<li>再次打开速度怎么变快 —— 缓存优化</li>
<li>操作怎么才顺滑 —— 渲染优化</li>
<li>动画怎么保证流畅 —— 长任务拆分</li>
</ul>
<h1 id="前端性能优化-——-实战思路"><a href="#前端性能优化-——-实战思路" class="headerlink" title="前端性能优化 —— 实战思路"></a>前端性能优化 —— 实战思路</h1><h2 id="⚙️-开发一个-SEO-要求高、首屏加载快的新网站"><a href="#⚙️-开发一个-SEO-要求高、首屏加载快的新网站" class="headerlink" title="⚙️ 开发一个 SEO 要求高、首屏加载快的新网站"></a>⚙️ 开发一个 SEO 要求高、首屏加载快的新网站</h2><ul>
<li>首选终极方案：SSR 服务端渲染，静态站点生成 SSG</li>
</ul>
<h2 id="⚙️-对一个现成的网站进行性能和-SEO-优化"><a href="#⚙️-对一个现成的网站进行性能和-SEO-优化" class="headerlink" title="⚙️ 对一个现成的网站进行性能和 SEO 优化"></a>⚙️ 对一个现成的网站进行性能和 SEO 优化</h2><h3 id="性能指标衡量"><a href="#性能指标衡量" class="headerlink" title="性能指标衡量"></a>性能指标衡量</h3><ul>
<li>⭐ FCP（First Contentful Paint）—— 用户导航到你页面后浏览器呈现第一块 DOM 内容所花费的时间</li>
<li>⭐ LCP（Largest Contentful Paint） —— 指页面渲染出最大文本或图片的时间</li>
<li>SI（Speed Index） —— 指界面可见内容的显示速度</li>
<li>TTI（Time to Interactive） —— 指网页需要多长时间才能提供完整的交互功能</li>
<li>TBT（Total Blocking Time） —— 度量页面被阻止响应用户输入（如鼠标单击、屏幕点击或键盘按下）的总时间<ul>
<li>这个综合是通过在 FCP 和可交互时间之间添加所有长任务的阻塞部分来计算的</li>
<li>任何执行时间超过 50ms 的任务都是长任务，50ms 后的时间量就是阻塞部分</li>
</ul>
</li>
<li>CLS（Cumulative Layout Shift） —— 指整个页面生命周期内发生的所有单次布局偏移分数的总和</li>
</ul>
<p><img src="/images/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E2%80%94%E5%AE%9E%E6%88%98%E6%80%9D%E8%B7%AF/lighthouse-performance0.png"> <img src="/images/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E2%80%94%E5%AE%9E%E6%88%98%E6%80%9D%E8%B7%AF/lighthouse-performance.png"></p>
<p><strong>Lighthouse</strong> 的性能指标时间计算：其核心原理是利用浏览器提供的 Performance API（如 performance.timing、LCP 观察者等）和自定义追踪逻辑，结合页面加载的全生命周期数据进行计算得到的<br><img src="/images/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E2%80%94%E5%AE%9E%E6%88%98%E6%80%9D%E8%B7%AF/performanceapi.png"></p>
<h3 id="先对网站本身性能优化"><a href="#先对网站本身性能优化" class="headerlink" title="先对网站本身性能优化"></a>先对网站本身性能优化</h3><ul>
<li><h4 id="🖼️-图片"><a href="#🖼️-图片" class="headerlink" title="🖼️ 图片"></a>🖼️ 图片</h4><ul>
<li><p>压缩 png → webp&#x2F;avif (压缩质量 80%的用户看不出，可接受)</p>
<ul>
<li><p>手动转换项目中较大图片的格式，<a href="https://squoosh.app/," title="图片格式转换在线工具">图片格式转换</a></p>
</li>
<li><p>项目中 <strong>批量</strong> 将图片格式修改为 Webp</p>
<ul>
<li><p>安装转换工具：</p>
<ul>
<li>Windows：使用 Google 官方的 cwebp 工具（高效且支持批量处理）<ul>
<li>从 <a href="https://developers.google.com/speed/webp/download?hl=zh-cn">WebP 官网</a> 下载工具包</li>
<li>解压后，在<code>bin</code>目录下可以看到<code>cwebp.exe</code>（这是核心转换工具）</li>
<li>配置环境变量：在「系统变量」中找到 Path 变量，双击打开 → 输入<code>cwebp.exe</code>所在的<code>bin</code>目录路径<br><img src="/images/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E2%80%94%E5%AE%9E%E6%88%98%E6%80%9D%E8%B7%AF/path_cwebp.png"></li>
<li>重新打开 cmd，输入<code>cwebp -version</code>显示版本则配置成功</li>
</ul>
</li>
<li>Mac：<code>brew install webp</code></li>
<li>Linux：<code>sudo apt install webp</code></li>
</ul>
</li>
<li><p>批量转换图片为 WebP 格式 （全局图片 WebP 化，同时保证兼容性，通常能减少 <code>40%-60%</code> 的图片体积）</p>
<ul>
<li><p>先手动备份图片（关键!!!），防止转换失败导致文件丢失</p>
</li>
<li><p><strong>编写批量转换脚本</strong>，确保路径与项目图片目录一致</p>
<ul>
<li>Mac&#x2F;Linux 脚本（convert-webp.sh）—— 自行搜索</li>
<li><strong>Windows 脚本（<code>convert-webp.bat</code>）</strong></li>
</ul>
<figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">setlocal</span> enabledelayedexpansion</span><br><span class="line"></span><br><span class="line">:: 图片源目录（根据项目实际路径修改：脚本文件 .bat 与路径第一层的 src 放在同一目录）</span><br><span class="line"><span class="built_in">set</span> &quot;IMG_DIR=src\assets\images&quot;</span><br><span class="line"></span><br><span class="line">:: 检查目录是否存在</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exist</span> &quot;<span class="variable">%IMG_DIR%</span>&quot; (</span><br><span class="line">  <span class="built_in">echo</span> 错误：目录 <span class="variable">%IMG_DIR%</span> 不存在！</span><br><span class="line">  <span class="built_in">pause</span></span><br><span class="line">  <span class="keyword">exit</span> /b <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">:: 递归转换所有图片</span><br><span class="line"><span class="keyword">for</span> /r &quot;<span class="variable">%IMG_DIR%</span>&quot; <span class="variable">%%i</span> <span class="keyword">in</span> (*.jpg, *.jpeg, *.png) <span class="keyword">do</span> (</span><br><span class="line">  <span class="built_in">set</span> &quot;output=<span class="variable">%%~</span>dpni.webp&quot;</span><br><span class="line">  cwebp -q <span class="number">80</span> -m <span class="number">6</span> &quot;<span class="variable">%%i</span>&quot; -o &quot;<span class="variable">!output!</span>&quot;</span><br><span class="line"></span><br><span class="line">  :: 检查转换结果</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">exist</span> &quot;<span class="variable">!output!</span>&quot; (</span><br><span class="line">    <span class="built_in">echo</span> ✅ 转换成功：<span class="variable">!output!</span></span><br><span class="line">  ) <span class="keyword">else</span> (</span><br><span class="line">    <span class="built_in">echo</span> ❌ 转换失败：<span class="variable">%%i</span></span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">:: 删除原图（可选）：确认转换无误后，删除原 jpg/png 文件（节省空间）</span><br><span class="line">:: <span class="built_in">del</span> /s /q src\assets\images\*.jpg</span><br><span class="line">:: <span class="built_in">del</span> /s /q src\assets\images\*.jpeg</span><br><span class="line">:: <span class="built_in">del</span> /s /q src\assets\images\*.png</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 批量转换完成！</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>执行脚本，会在原图片同目录生成 .webp 文件</p>
<ul>
<li>Mac&#x2F;Linux：终端进入项目根目录，运行 chmod +x convert-webp.sh &amp;&amp; .&#x2F;convert-webp.sh。</li>
<li>Windows：<strong>双击 <code>convert-webp.bat</code> 运行</strong>（或在 cmd 中执行）<br><img src="/images/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E2%80%94%E5%AE%9E%E6%88%98%E6%80%9D%E8%B7%AF/double_webp.png"></li>
</ul>
</li>
<li><p>项目中图片全部替换 webp 格式（.vue&#x2F;.js&#x2F;.ts&#x2F;.css 等文件：仔细检查所有的图片）</p>
<ul>
<li>搜索内容：(<code>\.jpg|\.jpeg|\.png</code>)（正则匹配原扩展名） → 替换内容：.webp</li>
</ul>
</li>
<li><p>兼容性处理（关键）</p>
<ul>
<li>WebP 在 IE、老旧安卓浏览器中不兼容，需使用 <code>&lt;picture&gt;</code> 标签自动降级</li>
</ul>
</li>
<li><p>清理原图，打开清理原图的代码，在执行一遍 <code>convert-webp.bat</code>，验证页面效果</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>项目使用 Vite 或 Webpack，可通过插件实现 <strong>开发 &#x2F; 构建时自动转换</strong></p>
<ul>
<li>安装插件：<code>npm i vite-plugin-webp -D</code>、<code>npm i image-webpack-loader file-loader -D</code></li>
<li>在配置文件中配置：<code>vite.config.js</code>、<code>webpack.config.js</code></li>
</ul>
</li>
</ul>
</li>
<li><p>上传图片功能：图片上传前先进行压缩，控制的压缩图片的尺寸大小</p>
<ul>
<li>比如：上传头像、 业务后台上传配置 app 上新闻&#x2F;轮播图等模块的图片，都不需要太大尺寸</li>
<li>下载依赖：<code>browser-image-compression</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> imageCompression <span class="keyword">from</span> <span class="string">&#x27;browser-image-compression&#x27;</span></span><br><span class="line"><span class="comment">// 上传图片</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getResoureUrl</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">	<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="keyword">const</span> resoUp = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;IMGUpload&#x27;</span>)</span><br><span class="line">		<span class="keyword">if</span> (!resoUp) <span class="keyword">return</span></span><br><span class="line">		resoUp.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">		resoUp.<span class="property">onchange</span> = <span class="literal">null</span></span><br><span class="line">		resoUp?.<span class="title function_">click</span>()</span><br><span class="line"></span><br><span class="line">		resoUp.<span class="property">onchange</span> = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">			<span class="keyword">const</span> upFile = event.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>] <span class="comment">// 获取文件对象</span></span><br><span class="line">			<span class="keyword">if</span> (!upFile) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">			<span class="comment">// ******* 压缩图片 *********</span></span><br><span class="line">			<span class="keyword">const</span> options = &#123;</span><br><span class="line">				<span class="attr">maxSizeMB</span>: <span class="number">1</span>, <span class="comment">// 最大文件大小(MB)</span></span><br><span class="line">				<span class="attr">maxWidthOrHeight</span>: <span class="number">500</span>, <span class="comment">// （压缩后的）最大宽/高</span></span><br><span class="line">				<span class="attr">useWebWorker</span>: <span class="literal">true</span>, <span class="comment">// 使用WebWorker加速</span></span><br><span class="line">				<span class="attr">fileType</span>: <span class="string">&#x27;image/webp&#x27;</span>, <span class="comment">// 可选转换为webp格式</span></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">const</span> compressedFile = <span class="keyword">await</span> <span class="title function_">imageCompression</span>(upFile, options)</span><br><span class="line">			<span class="comment">// 使用压缩后的文件或原文件</span></span><br><span class="line">			<span class="keyword">const</span> file = compressedFile || upFile</span><br><span class="line"></span><br><span class="line">			<span class="comment">// ******* 对拿到的 file 进行处理 *********</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>精灵图（<a href="https://www.toptal.com/developers/css/sprite-generator," title="在线合成精灵图工具">制作精灵图</a>）</p>
</li>
<li><p>svg 矢量图，直接使用，体积小</p>
</li>
<li><p>避免”大图小用”，按照分辨率显示不同尺寸的图片(1&#x2F;2&#x2F;3 倍图)（srcset + sizes）</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">	<span class="attr">src</span>=<span class="string">&quot;pic-800.jpg&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">srcset</span>=<span class="string">&quot;pic-400.jpg 400w, pic-800.jpg 800w&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">sizes</span>=<span class="string">&quot;(max-width: 600px) 400px, 800px&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="🎬-视频"><a href="#🎬-视频" class="headerlink" title="🎬 视频"></a>🎬 视频</h4><ul>
<li>用 <code>MP4</code>（H.264）或 WebM（更小）</li>
<li>避免加载全高清视频，按需加载 “自适应分辨率”</li>
<li>视频上传前压缩（视频压缩会降低文件大小，但可能影响画质；建议根据需求调整参数，压缩过程在浏览器中完成，不会上传到服务器）</li>
<li>…</li>
</ul>
</li>
<li><h4 id="🧩-三方库优化"><a href="#🧩-三方库优化" class="headerlink" title="🧩 三方库优化"></a>🧩 三方库优化</h4><ul>
<li>对大体积第三方库（如 Excel 处理、图表库），按需加载其子模块（如：<code>import &#123; Line &#125; from &#39;chart.js&#39;</code>）</li>
<li>或用更轻量的替代库（如用 <code>dayjs</code> 替代 <code>moment.js</code>）</li>
</ul>
</li>
<li><h4 id="📦-代码压缩"><a href="#📦-代码压缩" class="headerlink" title="📦 代码压缩"></a>📦 代码压缩</h4><ul>
<li><p><strong>原生 html 项目</strong>，使用压缩版本的 min.js 文件</p>
</li>
<li><p><strong>vue 项目</strong></p>
<ul>
<li><p>手动压缩 Terser，直接在 vue.config.js 文件中配置即可（配置 Terser 压缩 + Tree Shaking 摇树优化）</p>
<ul>
<li>通过混淆、删除空格、合并语句、移除不需要的代码等方式，显著减小生产环境的 JS 包体积</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">	<span class="attr">publicPath</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">	<span class="attr">outputDir</span>: <span class="string">&#x27;distTerser&#x27;</span>,</span><br><span class="line">	<span class="attr">assetsDir</span>: <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line">	<span class="attr">devServer</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 生产环境下启用 sourceMap（可选，关闭可进一步减小体积）</span></span><br><span class="line">	<span class="attr">productionSourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">	<span class="comment">// 配置 webpack 优化项</span></span><br><span class="line">	<span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">		<span class="comment">// 启用 Tree-Shaking（生产环境开启，开发环境无需压缩）</span></span><br><span class="line">		<span class="attr">optimization</span>:</span><br><span class="line">			process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span></span><br><span class="line">				? &#123;</span><br><span class="line">						<span class="comment">// 1. 摇树优化核心配置</span></span><br><span class="line">						<span class="attr">usedExports</span>: <span class="literal">true</span>, <span class="comment">// 标记未使用的导出，为摇树提供依据</span></span><br><span class="line">						<span class="attr">sideEffects</span>: <span class="literal">true</span>, <span class="comment">// 识别 package.json 中的 sideEffects 字段，避免误删有副作用的代码</span></span><br><span class="line">						<span class="comment">// 压缩配置</span></span><br><span class="line">						<span class="attr">minimizer</span>: [</span><br><span class="line">							<span class="comment">// 2. 配置压缩工具（Terser）：压缩代码 + 彻底移除死代码</span></span><br><span class="line">							<span class="title function_">new</span> (<span class="built_in">require</span>(<span class="string">&#x27;terser-webpack-plugin&#x27;</span>))(&#123;</span><br><span class="line">								<span class="comment">// 压缩选项</span></span><br><span class="line">								<span class="attr">terserOptions</span>: &#123;</span><br><span class="line">									<span class="comment">// 删除注释（生产环境推荐开启）</span></span><br><span class="line">									<span class="attr">output</span>: &#123;</span><br><span class="line">										<span class="attr">comments</span>: <span class="literal">false</span>,</span><br><span class="line">									&#125;,</span><br><span class="line">									<span class="comment">// 压缩策略配置</span></span><br><span class="line">									<span class="attr">compress</span>: &#123;</span><br><span class="line">										<span class="comment">// 移除 console（可选，根据需求决定）</span></span><br><span class="line">										<span class="attr">drop_console</span>: <span class="literal">true</span>,</span><br><span class="line">										<span class="comment">// 移除 debugger</span></span><br><span class="line">										<span class="attr">drop_debugger</span>: <span class="literal">true</span>,</span><br><span class="line">										<span class="comment">// 合并重复代码</span></span><br><span class="line">										<span class="attr">collapse_vars</span>: <span class="literal">true</span>,</span><br><span class="line">										<span class="comment">// 提取公共代码到变量</span></span><br><span class="line">										<span class="attr">reduce_vars</span>: <span class="literal">true</span>,</span><br><span class="line">										<span class="comment">// 移除未使用的变量和函数（摇树的最终执行环节）</span></span><br><span class="line">										<span class="attr">unused</span>: <span class="literal">true</span>,</span><br><span class="line">									&#125;,</span><br><span class="line">								&#125;,</span><br><span class="line">								<span class="comment">// 删除所有注释（包括 LICENSE 等）</span></span><br><span class="line">								<span class="attr">extractComments</span>: <span class="literal">false</span>,</span><br><span class="line">							&#125;),</span><br><span class="line">						],</span><br><span class="line">						<span class="comment">// 3. 分割代码（可选，进一步提升压缩效率）</span></span><br><span class="line">						<span class="attr">splitChunks</span>: &#123;</span><br><span class="line">							<span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">							<span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">								<span class="comment">// 提取 node_modules 中的公共库</span></span><br><span class="line">								<span class="attr">vendor</span>: &#123;</span><br><span class="line">									<span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">									<span class="attr">name</span>: <span class="string">&#x27;vendors&#x27;</span>,</span><br><span class="line">									<span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">								&#125;,</span><br><span class="line">							&#125;,</span><br><span class="line">						&#125;,</span><br><span class="line">				  &#125;</span><br><span class="line">				: &#123;&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>自动压缩：利用 Gzip、Brotil 打包压缩，前端配置 Gzip 压缩，服务器端开启支持 Gzip 即可</p>
<ul>
<li>安装依赖：<code>compression-webpack-plugin</code></li>
<li>在 <code>vue.config.js</code> 中配置 Gzip 压缩</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CompressionPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;compression-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">    <span class="attr">outputDir</span>: <span class="string">&#x27;distTerser&#x27;</span>,</span><br><span class="line">    <span class="attr">assetsDir</span>: <span class="string">&#x27;static&#x27;</span>,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置 webpack 优化项</span></span><br><span class="line">    <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">      <span class="attr">optimization</span>:</span><br><span class="line">        process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span></span><br><span class="line">          ? &#123;</span><br><span class="line">              <span class="comment">// 压缩配置</span></span><br><span class="line">              <span class="attr">minimizer</span>: [</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">CompressionPlugin</span>(&#123;</span><br><span class="line">                  <span class="attr">filename</span>: <span class="string">&#x27;[path][base].gz&#x27;</span>, <span class="comment">// 必须指定输出文件名格式（关键）</span></span><br><span class="line">                  <span class="attr">test</span>: <span class="regexp">/\.(js|css|html|svg)$/</span>, <span class="comment">// 匹配需要压缩的文件类型</span></span><br><span class="line">                  <span class="attr">algorithm</span>: <span class="string">&#x27;gzip&#x27;</span>, <span class="comment">// 使用 gzip 算法</span></span><br><span class="line">                  <span class="attr">threshold</span>: <span class="number">5120</span>, <span class="comment">// 5KB 以上才压缩</span></span><br><span class="line">                  <span class="attr">minRatio</span>: <span class="number">0.8</span>, <span class="comment">// 压缩率小于 0.8 才保留</span></span><br><span class="line">                  <span class="attr">deleteOriginalAssets</span>: <span class="literal">false</span>, <span class="comment">// 保留原文件（避免服务器不支持 gzip 时出错）</span></span><br><span class="line">                &#125;),</span><br><span class="line">              ],</span><br><span class="line">          : &#123;&#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>npm run build</code> 生产环境打包，触发压缩逻辑</li>
<li>验证是否生效：进入 <code>dist/js</code> 或 <code>dist/css</code> 目录，查看是否有 .gz 文件</li>
<li>此时直在本地双击运行 <code>dist/index.html</code>（<code>以 file:// 协议打开</code>）时，gzip 压缩的 .gz 文件无法被浏览器正常解析，会导致页面加载失败或 JS&#x2F;CSS 等资源无法解析<ul>
<li>这是因为本地运行不具备服务器环境，不支持 gzip 解压（报错 “语法错误” 或 “资源无法加载”），无法处理 gzip 压缩文件的解压逻辑</li>
</ul>
</li>
<li>服务器配置<ul>
<li>仅仅在前端打包生成 .gz 文件还不够，还需要服务器配置支持 Gzip 压缩<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Nginx 配置示例</span></span><br><span class="line">gzip on;</span><br><span class="line">gzip_types text/css application/javascript image/svg+xml text/html;</span><br><span class="line">gzip_min_length 10k;</span><br><span class="line">gzip_comp_level 5;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>检查服务器部署是否生效，部署后，通过浏览器开发者工具的 Network 面板查看<ul>
<li>响应头中是否有 <code>Content-Encoding: gzip</code>（数据的压缩格式）</li>
<li>查看文件大小是否有明显减小</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>📌【注意】Gzip 压缩（<code>compression-webpack-plugin</code>）和 Terser 压缩（<code>terser-webpack-plugin</code>）完全不冲突，两者的优化方向不同：</p>
<ul>
<li><p>Terser：对 JS 代码进行语法级压缩（删除注释、混淆变量、合并语句等），生成更小的 JS 文件</p>
</li>
<li><p>Gzip：对打包后的静态资源（包括 JS、CSS、HTML 等）进行二进制级压缩，进一步减小传输体积</p>
</li>
<li><p>两者可以同时启用，且搭配使用效果更好（<strong>先经 Terser 压缩 JS，再经 Gzip 压缩所有资源</strong>），二者协同工作，先优化代码结构，再压缩传输体积，最终实现 <code>60%-80%</code> 的资源体积缩减，显著提升 Lighthouse 性能评分</p>
</li>
</ul>
</li>
<li><p>📌 <code>Transfer-Encoding: chunked</code> 和 <code>Content-Encoding: gzip</code></p>
<ul>
<li>分块传输（<code>Transfer-Encoding: chunked</code>）：通常由服务器自动配置，用于在无法预先确定响应数据总大小的场景（如动态生成内容、流式传输）</li>
<li><code>Content-Encoding: gzip</code> （数据的压缩格式）</li>
</ul>
<table>
<thead>
<tr>
<th align="left">对比维度</th>
<th align="left"><code>Transfer-Encoding: chunked</code></th>
<th align="left"><code>Content-Encoding: gzip</code></th>
</tr>
</thead>
<tbody><tr>
<td align="left">核心目</td>
<td align="left">解决「数据大小未知时如何传输」的问题</td>
<td align="left">解决「如何减小数据</td>
</tr>
<tr>
<td align="left">对数据的影响</td>
<td align="left">不改变数据内容，仅改变传输方式</td>
<td align="left">改变数据格式（压缩），需客户端解压</td>
</tr>
<tr>
<td align="left">依赖关系</td>
<td align="left">与数据是否压缩无关</td>
<td align="left">可与分块传输结合使用</td>
</tr>
<tr>
<td align="left">客户端处理方式</td>
<td align="left">自动拼接分块，还原为完整数据</td>
<td align="left">自动解压，还原为原始数据</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><h4 id="⏳-延迟加载"><a href="#⏳-延迟加载" class="headerlink" title="⏳ 延迟加载"></a>⏳ 延迟加载</h4><ul>
<li><p>懒加载</p>
<ul>
<li>vue 组件&#x2F;路由懒加载：<code>const Home = () =&gt; import(&#39;./views/Home.vue&#39;);</code></li>
<li>视频&#x2F;图片&#x2F;iframe 懒加载：<ul>
<li>原生支持的 lazy 属性 <code>&lt;img src=&quot;image.webp&quot; alt=&quot;...&quot; loading=&quot;lazy&quot;&gt;</code> （旧浏览器不支持）</li>
<li>使用 IntersectionObserver API（推荐，现代方案），通过 data-src 占位，监听元素进入视口后替换真实地址 <code>&lt;img data-src=&quot;image.webp&quot; alt=&quot;...&quot; class=&quot;lazy&quot;&gt;</code></li>
<li>点击后再动态创建<code>&lt;video&gt;/&lt;img&gt;</code>标签或赋值 src，比如：先展示缩略图点击后查看清晰图、非自动播放的视频(先展示图片，点击后再播放)</li>
</ul>
</li>
<li>脚本（JS）延迟加载，延迟动态创建<code> &lt;script&gt;</code> 标签，或使用 <code>async/defer</code> 异步加载</li>
</ul>
</li>
<li><p>按需加载：加载首屏需要的资源(css、Font、js 等)</p>
</li>
</ul>
</li>
<li><h4 id="🔗-预加载"><a href="#🔗-预加载" class="headerlink" title="🔗 预加载"></a>🔗 预加载</h4><ul>
<li><p>预加载关键资源 <code>&lt;link rel=&quot;preload&quot; href=&quot;hero-banner.webp&quot; as=&quot;image&quot; type=&quot;image/webp&quot;&gt;</code></p>
<ul>
<li>href，指定资源的路径</li>
<li>as，指定资源类型（如 font、script、image、style、audio、video），决定浏览器的加载优先级和处理逻辑；若省略，浏览器会以低优先级加载为 “通用资源”</li>
<li>type，指定 MIME 类型（如 font&#x2F;woff2、image&#x2F;jpeg），浏览器可提前判断是否支持该资源，避免无效加载</li>
<li>crossorigin，加载跨域资源（如字体）时必需，否则资源加载后无法被页面使用</li>
</ul>
</li>
<li><p>预加载的适用场景</p>
<ul>
<li>图片画廊 &#x2F; 轮播图：预加载下一张 &#x2F; 下一组图片，实现无缝切换</li>
<li>单页应用（SPA）：路由切换前预加载目标页面的 JS&#x2F;CSS，消除切换时的白屏</li>
<li>多媒体内容：视频 &#x2F; 音频播放前预加载部分内容，避免播放缓冲</li>
<li>导航菜单：预加载热门导航对应的页面资源（如：电商的 “购物车”，”订单” 页面）</li>
<li>字体资源：预加载自定义字体，解决 “无样式文本闪烁（FOIT）” 问题</li>
</ul>
</li>
</ul>
</li>
<li><h4 id="🐘-缓存优化"><a href="#🐘-缓存优化" class="headerlink" title="🐘 缓存优化"></a>🐘 缓存优化</h4><p>前端缓存是性能优化的核心手段之一，其本质是<strong>将频繁访问的资源（如静态文件、接口数据）存储在本地或中间层，避免重复请求与传输，从而降低延迟、减少带宽消耗、提升页面加载速度</strong><br>前端缓存体系可分为 浏览器缓存（客户端缓存）、HTTP 缓存（服务端与客户端协同）和应用层缓存（前端代码层面控制）三大类</p>
<ul>
<li><p>HTTP 缓存（强缓存、协商缓存）</p>
<ul>
<li><p>后端配置（核心）：在响应头中返回这些字段</p>
<table>
<thead>
<tr>
<th align="left">对比维度</th>
<th align="left">强缓存 (Strong Cache)</th>
<th align="left">协商缓存 (Conditional Cache)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">核心逻辑</td>
<td align="left">本地判断有效则直接用，不发请求</td>
<td align="left">必发请求，服务器判断是否用缓存</td>
</tr>
<tr>
<td align="left">关键响应头</td>
<td align="left"><code>Cache-Control</code>(优先级高)、<code>Expire</code></td>
<td align="left"><code>Last-Modified</code>&#x2F;<code>ETag </code></td>
</tr>
<tr>
<td align="left">网络请求</td>
<td align="left">未过期时无请求</td>
<td align="left">始终发请求（响应体可能为空）</td>
</tr>
<tr>
<td align="left">命中状态码</td>
<td align="left">200 (from cache)</td>
<td align="left">304 Not Modified</td>
</tr>
<tr>
<td align="left">更新灵活性</td>
<td align="left">低（未过期不更新）</td>
<td align="left">高（服务器实时控制）</td>
</tr>
<tr>
<td align="left">服务器压力</td>
<td align="left">无</td>
<td align="left">有（需处理判断请求）</td>
</tr>
<tr>
<td align="left">适用场景</td>
<td align="left">更新慢的静态资源（图、JS&#x2F;CSS 包）</td>
<td align="left">动态资源、更新频繁的静态资源</td>
</tr>
</tbody></table>
</li>
<li><p>前端配置（配合后端）：前端通过 <strong>资源命名策略</strong> 和 <strong>请求头控制</strong> 配合后端缓存策略，确保缓存有效性</p>
<ul>
<li>静态资源版本化（解决缓存更新问题）<ul>
<li>方案 1：文件名加哈希（推荐）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 构建工具（Webpack/Vite）自动生成带哈希的文件名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.8f2b7.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;app.a3d9c.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>方案 2：URL 参数（不推荐，部分代理服务器不识别）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;logo.png?v=202409&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>动态资源 &#x2F; API 缓存控制，比如：axios、fetch 中实现请求缓存<ul>
<li>默认情况下不缓存</li>
<li>cacheTime：60, &#x2F;&#x2F; 缓存时间，60s</li>
<li>noCache: true, &#x2F;&#x2F; 强制不使用缓存</li>
<li>使用第三方缓存库（如 axios-cache-adapter）</li>
<li>…</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>浏览器缓存</p>
<ul>
<li>localStorage</li>
<li>sessionStorage</li>
<li>Cookies</li>
<li>IndexedDB（本地数据库）</li>
</ul>
</li>
<li><p>应用缓存 —— 前端代码层面的 “逻辑缓存”</p>
<ul>
<li>keep-alive 页面缓存</li>
<li>计算属性 computed 有缓存</li>
<li>…</li>
</ul>
</li>
<li><p>Service Worker（离线缓存）</p>
</li>
<li><p>服务端辅助缓存（CDN 与代理缓存）</p>
</li>
</ul>
</li>
<li><h4 id="🚀-动画卡顿优化"><a href="#🚀-动画卡顿优化" class="headerlink" title="🚀 动画卡顿优化"></a>🚀 动画卡顿优化</h4><ul>
<li>卡顿和核心原因：动画触发了「布局」或「绘制」阶段，涉及重新计算，消耗较大</li>
<li>为什么会卡顿，<strong>单线程</strong>， 阻塞主线程，减少长任务</li>
<li>优化：<ul>
<li>用 css 的位移 transform&#x2F;过渡 transition&#x2F;动画 animation 代替 js 计算直接操作 ODM</li>
<li>减少对 DOM 的操作</li>
<li>优化 js 代码，做好防抖&#x2F;节流等</li>
<li>更换合适的动画方案<table>
<thead>
<tr>
<th align="left">动画方案</th>
<th align="left">性能级别</th>
<th align="left">适用场景</th>
<th align="left">注意事项</th>
</tr>
</thead>
<tbody><tr>
<td align="left">CSS<code>transform/opacity</code></td>
<td align="left">5 星</td>
<td align="left">基础位移、缩放、旋转、透明度动画</td>
<td align="left">仅支持简单动画，逻辑复杂时需配合 JS</td>
</tr>
<tr>
<td align="left">CSS<code>@keyframes</code></td>
<td align="left">4 星</td>
<td align="left">关键帧动画（如循环闪烁、路径固定）</td>
<td align="left">避免在关键帧中使用布局属性</td>
</tr>
<tr>
<td align="left">JS<code>requestAnimationFrame</code></td>
<td align="left">4 星</td>
<td align="left">复杂交互动画（如跟随鼠标、数据驱动）</td>
<td align="left">避免回调中做耗时计算</td>
</tr>
<tr>
<td align="left">Canvas 动画</td>
<td align="left">3 星</td>
<td align="left">大量元素动画（如粒子效果、图表）</td>
<td align="left">需手动优化重绘区域，避免全量重</td>
</tr>
<tr>
<td align="left">SVG 动画</td>
<td align="left">2 星</td>
<td align="left">矢量图形动画（如图标动效）</td>
<td align="left">复杂 SVG 易触发高频绘制，性能较差</td>
</tr>
<tr>
<td align="left">三方动画库</td>
<td align="left"></td>
<td align="left"><a href="https://michalsnik.github.io/aos/">aos</a>、<a href="https://gsap.com/">gsap</a> 等</td>
<td align="left"></td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="再对外部因素进行优化"><a href="#再对外部因素进行优化" class="headerlink" title="再对外部因素进行优化"></a>再对外部因素进行优化</h3><ul>
<li><p>CDN 分发静态资源<br>将 JS、CSS、图片等静态资源部署到 CDN（如 Cloudflare、阿里云 CDN），用户从最近的节点加载，减少网络延迟（尤其跨地区用户）</p>
</li>
<li><p><strong>启用 HTTP&#x2F;2 或 HTTP&#x2F;3</strong></p>
<ul>
<li>HTTP&#x2F;2：支持多路复用（同一连接并发请求），解决 HTTP&#x2F;1.1 的队头阻塞问题</li>
<li>HTTP&#x2F;3：基于 QUIC 协议（UDP），进一步优化丢包恢复和连接建立速度</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>性能优化</category>
      </categories>
      <tags>
        <tag>性能优化</tag>
      </tags>
  </entry>
  <entry>
    <title>你好呀</title>
    <url>/about/index.html</url>
    <content><![CDATA[<h3 id="✍️「个人介绍」"><a href="#✍️「个人介绍」" class="headerlink" title="✍️「个人介绍」"></a>✍️「个人介绍」</h3><p>👋 大家好，我是 Sara，一名 web 前端开发工程师兼技术博主</p>
<p>本人 00 后，大学本科毕业，平时喜欢追剧、看综艺、打羽毛球，也喜欢学习一些新技术，有好玩的技术可以留言分享</p>
<h3 id="📚「这里主要分享」"><a href="#📚「这里主要分享」" class="headerlink" title="📚「这里主要分享」"></a>📚「这里主要分享」</h3><ul>
<li>前端开发技巧</li>
<li>效率工具测评</li>
<li>个人成长心得</li>
</ul>
<h3 id="🔄「更新频率」"><a href="#🔄「更新频率」" class="headerlink" title="🔄「更新频率」"></a>🔄「更新频率」</h3><ul>
<li>不定期更新</li>
<li>日常碎片思考</li>
</ul>
<h3 id="💬「欢迎评论告诉我」"><a href="#💬「欢迎评论告诉我」" class="headerlink" title="💬「欢迎评论告诉我」"></a>💬「欢迎评论告诉我」</h3><ul>
<li>你对哪类内容最感兴趣？</li>
<li>希望看到什么主题的文章？</li>
<li>文章上有什么错处？</li>
</ul>
<h3 id="💻「代码如诗」"><a href="#💻「代码如诗」" class="headerlink" title="💻「代码如诗」"></a>💻「代码如诗」</h3><ul>
<li>在 console.log() 里埋下种子，意外长出了整个春天的叙事诗</li>
<li>递归函数像俄罗斯套娃，每个 return 都藏着一个更小的宇宙</li>
</ul>
<h3 id="💫「交换星光」"><a href="#💫「交换星光」" class="headerlink" title="💫「交换星光」"></a>💫「交换星光」</h3><blockquote>
<p>“生活中没有什么可怕的东西，只有需要理解的东西” ——《居里夫人》<br>“上善若水，水善利万物而不争” ——《老子》</p>
</blockquote>
<p>欢迎带着你的星轨图<br>来我的小宇宙做客<br>让我们互为对方的诗篇注脚</p>
]]></content>
  </entry>
  <entry>
    <title>分类</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/css/custom.css</url>
    <content><![CDATA[/* 自定义样式 */
#post #article-container img {
	text-align: left;
    margin: 10px 0;
    /* transition: transform 0.3s ease; */
}
#post #article-container img:hover {
    /* transform: scale(1.001); */
}
.max400 {
    max-width: 400px !important;
}
.max450 {
    max-width: 450px !important;
}
.max500 {
    max-width: 500px !important;
}
.max600 {
    max-width: 600px !important;
}]]></content>
  </entry>
  <entry>
    <title>链接</title>
    <url>/link/index.html</url>
    <content><![CDATA[<!-- [Hexo 官网](https://hexo.io/ 'Hexo静态博客框架')
[Butterfly 主题官网](https://butterfly.js.org/posts/21cfbf15/)
[Waline 三方评论系统](https://waline.js.org/guide/get-started/) -->
]]></content>
  </entry>
  <entry>
    <title>标签</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
